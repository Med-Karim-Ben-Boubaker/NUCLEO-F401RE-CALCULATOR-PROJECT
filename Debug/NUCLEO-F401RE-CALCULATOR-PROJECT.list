
NUCLEO-F401RE-CALCULATOR-PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004ba8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004ba8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd46  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0a  00000000  00000000  0002bde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017647  00000000  00000000  0002f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e969  00000000  00000000  000466cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089507  00000000  00000000  00055038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de53f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000de590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004924 	.word	0x08004924

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004924 	.word	0x08004924

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <alert>:
#include "alarm-sound.h"
#include "stm32f4xx_hal.h"
#include "main.h"


void alert(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <alert+0x24>)
 800058e:	f001 fc6d 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f001 f9c4 	bl	8001920 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <alert+0x24>)
 800059e:	f001 fc65 	bl	8001e6c <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000

080005ac <precedence>:
#include <arithmetic_calculator.h>

int precedence(char operator) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    if (operator == '+' || operator == '-')
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b2b      	cmp	r3, #43	; 0x2b
 80005ba:	d002      	beq.n	80005c2 <precedence+0x16>
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b2d      	cmp	r3, #45	; 0x2d
 80005c0:	d101      	bne.n	80005c6 <precedence+0x1a>
        return 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e008      	b.n	80005d8 <precedence+0x2c>
    else if (operator == '*' || operator == '/')
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b2a      	cmp	r3, #42	; 0x2a
 80005ca:	d002      	beq.n	80005d2 <precedence+0x26>
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b2f      	cmp	r3, #47	; 0x2f
 80005d0:	d101      	bne.n	80005d6 <precedence+0x2a>
        return 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	e000      	b.n	80005d8 <precedence+0x2c>
    else
        return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <applyOperator>:

int applyOperator(int a, int b, char operator) {
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	4613      	mov	r3, r2
 80005f0:	71fb      	strb	r3, [r7, #7]
    switch (operator) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3b2a      	subs	r3, #42	; 0x2a
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d820      	bhi.n	800063c <applyOperator+0x58>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <applyOperator+0x1c>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000629 	.word	0x08000629
 8000604:	08000619 	.word	0x08000619
 8000608:	0800063d 	.word	0x0800063d
 800060c:	08000621 	.word	0x08000621
 8000610:	0800063d 	.word	0x0800063d
 8000614:	08000633 	.word	0x08000633
        case '+':
            return a + b;
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4413      	add	r3, r2
 800061e:	e00e      	b.n	800063e <applyOperator+0x5a>
        case '-':
            return a - b;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	e00a      	b.n	800063e <applyOperator+0x5a>
        case '*':
            return a * b;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	e005      	b.n	800063e <applyOperator+0x5a>
        case '/':
        	return a / b;
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	fb92 f3f3 	sdiv	r3, r2, r3
 800063a:	e000      	b.n	800063e <applyOperator+0x5a>
        default:
            return 0;
 800063c:	2300      	movs	r3, #0
    }
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <isOperator>:

bool isOperator(char ch){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	if(ch == '+' || ch == '-' || ch == '*' || ch == '/') return true;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b2b      	cmp	r3, #43	; 0x2b
 800065a:	d008      	beq.n	800066e <isOperator+0x22>
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b2d      	cmp	r3, #45	; 0x2d
 8000660:	d005      	beq.n	800066e <isOperator+0x22>
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b2a      	cmp	r3, #42	; 0x2a
 8000666:	d002      	beq.n	800066e <isOperator+0x22>
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b2f      	cmp	r3, #47	; 0x2f
 800066c:	d101      	bne.n	8000672 <isOperator+0x26>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <isOperator+0x28>
	else return false;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <evaluateExpression>:

bool evaluateExpression(char* expression, int* result) {
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8000686:	af00      	add	r7, sp, #0
 8000688:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800068c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000690:	6018      	str	r0, [r3, #0]
 8000692:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000696:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800069a:	6019      	str	r1, [r3, #0]
    int i;
    int value;
    int stack[100];
    char operatorStack[100];
    int stackTop = -1;
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    int operatorTop = -1;
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    for (i = 0; expression[i] != '\0'; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80006b2:	e1a4      	b.n	80009fe <evaluateExpression+0x37e>
        if (isdigit(expression[i])) {
 80006b4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006b8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80006bc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4ad3      	ldr	r2, [pc, #844]	; (8000a18 <evaluateExpression+0x398>)
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d042      	beq.n	800075c <evaluateExpression+0xdc>
            value = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
            while (isdigit(expression[i])) {
 80006dc:	e018      	b.n	8000710 <evaluateExpression+0x90>
                value = value * 10 + (expression[i] - '0');
 80006de:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006f0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80006f4:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80006f8:	6812      	ldr	r2, [r2, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b30      	subs	r3, #48	; 0x30
 8000700:	440b      	add	r3, r1
 8000702:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                i++;
 8000706:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800070a:	3301      	adds	r3, #1
 800070c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
            while (isdigit(expression[i])) {
 8000710:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000714:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000718:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4abc      	ldr	r2, [pc, #752]	; (8000a18 <evaluateExpression+0x398>)
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1d5      	bne.n	80006de <evaluateExpression+0x5e>
            }
            i--;
 8000732:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000736:	3b01      	subs	r3, #1
 8000738:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
            stack[++stackTop] = value;
 800073c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000740:	3301      	adds	r3, #1
 8000742:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000746:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800074a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800074e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000752:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800075a:	e14b      	b.n	80009f4 <evaluateExpression+0x374>
        }
        else if (expression[i] == '(') {
 800075c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000760:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000764:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b28      	cmp	r3, #40	; 0x28
 8000770:	d117      	bne.n	80007a2 <evaluateExpression+0x122>
            operatorStack[++operatorTop] = expression[i];
 8000772:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000776:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800077a:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4413      	add	r3, r2
 8000782:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000786:	3201      	adds	r2, #1
 8000788:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800078c:	7819      	ldrb	r1, [r3, #0]
 800078e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000792:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8000796:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800079a:	4413      	add	r3, r2
 800079c:	460a      	mov	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e128      	b.n	80009f4 <evaluateExpression+0x374>
        }
        else if (expression[i] == ')') {
 80007a2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80007a6:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007aa:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b29      	cmp	r3, #41	; 0x29
 80007b6:	d16f      	bne.n	8000898 <evaluateExpression+0x218>
            while (operatorTop != -1 && operatorStack[operatorTop] != '(') {
 80007b8:	e048      	b.n	800084c <evaluateExpression+0x1cc>
                int b = stack[stackTop--];
 80007ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80007c4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007c8:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80007cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
                int a = stack[stackTop--];
 80007d4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80007de:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007e2:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
                char op = operatorStack[operatorTop--];
 80007ee:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80007f8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007fc:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
                if(op == '/' && b == ERROR_DIVISION_BY_ZERO){
 8000806:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800080a:	2b2f      	cmp	r3, #47	; 0x2f
 800080c:	d107      	bne.n	800081e <evaluateExpression+0x19e>
 800080e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <evaluateExpression+0x19e>
                	display_error_division_by_zero();
 8000816:	f000 fa11 	bl	8000c3c <display_error_division_by_zero>
                	return false;
 800081a:	2300      	movs	r3, #0
 800081c:	e15b      	b.n	8000ad6 <evaluateExpression+0x456>
                }
                else stack[++stackTop] = applyOperator(a, b, op);
 800081e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000822:	3301      	adds	r3, #1
 8000824:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000828:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800082c:	461a      	mov	r2, r3
 800082e:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000832:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8000836:	f7ff fed5 	bl	80005e4 <applyOperator>
 800083a:	4601      	mov	r1, r0
 800083c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000840:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000844:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            while (operatorTop != -1 && operatorStack[operatorTop] != '(') {
 800084c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d009      	beq.n	800086a <evaluateExpression+0x1ea>
 8000856:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800085a:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800085e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b28      	cmp	r3, #40	; 0x28
 8000868:	d1a7      	bne.n	80007ba <evaluateExpression+0x13a>
            }
            if (operatorTop != -1 && operatorStack[operatorTop] == '(') {
 800086a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800086e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000872:	f000 80bf 	beq.w	80009f4 <evaluateExpression+0x374>
 8000876:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800087a:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800087e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b28      	cmp	r3, #40	; 0x28
 8000888:	f040 80b4 	bne.w	80009f4 <evaluateExpression+0x374>
                operatorTop--;
 800088c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000890:	3b01      	subs	r3, #1
 8000892:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000896:	e0ad      	b.n	80009f4 <evaluateExpression+0x374>
            }
        }
        else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {
 8000898:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800089c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008a0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b2b      	cmp	r3, #43	; 0x2b
 80008ac:	d06b      	beq.n	8000986 <evaluateExpression+0x306>
 80008ae:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80008b2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008b6:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b2d      	cmp	r3, #45	; 0x2d
 80008c2:	d060      	beq.n	8000986 <evaluateExpression+0x306>
 80008c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80008c8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008cc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b2a      	cmp	r3, #42	; 0x2a
 80008d8:	d055      	beq.n	8000986 <evaluateExpression+0x306>
 80008da:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80008de:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008e2:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b2f      	cmp	r3, #47	; 0x2f
 80008ee:	f040 8081 	bne.w	80009f4 <evaluateExpression+0x374>
            while (operatorTop != -1 && precedence(operatorStack[operatorTop]) >= precedence(expression[i])) {
 80008f2:	e048      	b.n	8000986 <evaluateExpression+0x306>
                int b = stack[stackTop--];
 80008f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80008fe:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000902:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                int a = stack[stackTop--];
 800090e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000918:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800091c:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
                char op = operatorStack[operatorTop--];
 8000928:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8000932:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000936:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
                if(op == '/' && b == ERROR_DIVISION_BY_ZERO){
 8000940:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8000944:	2b2f      	cmp	r3, #47	; 0x2f
 8000946:	d107      	bne.n	8000958 <evaluateExpression+0x2d8>
 8000948:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <evaluateExpression+0x2d8>
                	display_error_division_by_zero();
 8000950:	f000 f974 	bl	8000c3c <display_error_division_by_zero>
                	return false;
 8000954:	2300      	movs	r3, #0
 8000956:	e0be      	b.n	8000ad6 <evaluateExpression+0x456>
                }
                else stack[++stackTop] = applyOperator(a, b, op);
 8000958:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800095c:	3301      	adds	r3, #1
 800095e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000962:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8000966:	461a      	mov	r2, r3
 8000968:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800096c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000970:	f7ff fe38 	bl	80005e4 <applyOperator>
 8000974:	4601      	mov	r1, r0
 8000976:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800097a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800097e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            while (operatorTop != -1 && precedence(operatorStack[operatorTop]) >= precedence(expression[i])) {
 8000986:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800098a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098e:	d01a      	beq.n	80009c6 <evaluateExpression+0x346>
 8000990:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000994:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8000998:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe03 	bl	80005ac <precedence>
 80009a6:	4604      	mov	r4, r0
 80009a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80009ac:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80009b0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fdf6 	bl	80005ac <precedence>
 80009c0:	4603      	mov	r3, r0
 80009c2:	429c      	cmp	r4, r3
 80009c4:	da96      	bge.n	80008f4 <evaluateExpression+0x274>
            }
            operatorStack[++operatorTop] = expression[i];
 80009c6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80009ca:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80009ce:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80009da:	3201      	adds	r2, #1
 80009dc:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80009e0:	7819      	ldrb	r1, [r3, #0]
 80009e2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80009e6:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 80009ea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
    for (i = 0; expression[i] != '\0'; i++) {
 80009f4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80009f8:	3301      	adds	r3, #1
 80009fa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80009fe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000a02:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a06:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f47f ae4f 	bne.w	80006b4 <evaluateExpression+0x34>
        }
    }

    while (operatorTop != -1) {
 8000a16:	e04a      	b.n	8000aae <evaluateExpression+0x42e>
 8000a18:	0800498c 	.word	0x0800498c
        int b = stack[stackTop--];
 8000a1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000a26:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a2a:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        int a = stack[stackTop--];
 8000a36:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000a40:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a44:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        char op = operatorStack[operatorTop--];
 8000a50:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8000a5a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a5e:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000a62:	5cd3      	ldrb	r3, [r2, r3]
 8000a64:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
        if(op == '/' && b == ERROR_DIVISION_BY_ZERO){
 8000a68:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a6e:	d107      	bne.n	8000a80 <evaluateExpression+0x400>
 8000a70:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <evaluateExpression+0x400>
        	display_error_division_by_zero();
 8000a78:	f000 f8e0 	bl	8000c3c <display_error_division_by_zero>
        	return false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e02a      	b.n	8000ad6 <evaluateExpression+0x456>
        }
        else stack[++stackTop] = applyOperator(a, b, op);
 8000a80:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000a84:	3301      	adds	r3, #1
 8000a86:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000a8a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000a94:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000a98:	f7ff fda4 	bl	80005e4 <applyOperator>
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000aa2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000aa6:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (operatorTop != -1) {
 8000aae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d1b1      	bne.n	8000a1c <evaluateExpression+0x39c>
    }

    *result = stack[stackTop];
 8000ab8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000abc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000ac0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000acc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	601a      	str	r2, [r3, #0]
    return true;
 8000ad4:	2301      	movs	r3, #1
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <checkValidExpression>:

bool checkValidExpression(char* expression){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    int i;
	if(isOperator(expression[0])) return false;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdad 	bl	800064c <isOperator>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <checkValidExpression+0x1c>
 8000af8:	2300      	movs	r3, #0
 8000afa:	e038      	b.n	8000b6e <checkValidExpression+0x8e>

	for(i=0; expression[i] != '\0'; i++){
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e021      	b.n	8000b46 <checkValidExpression+0x66>
        printf("%c \n", expression[i]);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481a      	ldr	r0, [pc, #104]	; (8000b78 <checkValidExpression+0x98>)
 8000b0e:	f002 fd9f 	bl	8003650 <iprintf>
		if(isOperator(expression[i]) && isOperator(expression[i+1])) return false;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd96 	bl	800064c <isOperator>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00c      	beq.n	8000b40 <checkValidExpression+0x60>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd8b 	bl	800064c <isOperator>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <checkValidExpression+0x60>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e016      	b.n	8000b6e <checkValidExpression+0x8e>
	for(i=0; expression[i] != '\0'; i++){
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1d7      	bne.n	8000b02 <checkValidExpression+0x22>
	}

	if(isOperator(expression[i-1])) return false;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fd75 	bl	800064c <isOperator>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <checkValidExpression+0x8c>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e000      	b.n	8000b6e <checkValidExpression+0x8e>

	return true;
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800493c 	.word	0x0800493c

08000b7c <print_result>:

#include "calc-write-lcd-hundler.h"

void print_result(char* stringResult){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	clear_row(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 f9cd 	bl	8000f24 <clear_row>
	lcd_put_cur(1, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 f8c5 	bl	8000d1c <lcd_put_cur>
	lcd_send_string("=");
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <print_result+0x34>)
 8000b94:	f000 f91e 	bl	8000dd4 <lcd_send_string>
	lcd_put_cur(1, 1);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 f8be 	bl	8000d1c <lcd_put_cur>
	lcd_send_string(stringResult);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f917 	bl	8000dd4 <lcd_send_string>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08004944 	.word	0x08004944

08000bb4 <calculate_and_display>:

void calculate_and_display(char* expression){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if(checkValidExpression(expression)){
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff8f 	bl	8000ae0 <checkValidExpression>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d020      	beq.n	8000c0a <calculate_and_display+0x56>
		int result;
		if(evaluateExpression(expression, &result)){
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd56 	bl	8000680 <evaluateExpression>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d014      	beq.n	8000c04 <calculate_and_display+0x50>
			char stringResult[16] = {'\0'};
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
			sprintf(stringResult, "%d", result);
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4909      	ldr	r1, [pc, #36]	; (8000c18 <calculate_and_display+0x64>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fd44 	bl	8003680 <siprintf>
			print_result(stringResult);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffbd 	bl	8000b7c <print_result>
	}
	else{
		print_invalid_expression_error();
	}

}
 8000c02:	e004      	b.n	8000c0e <calculate_and_display+0x5a>
		else display_error_division_by_zero();
 8000c04:	f000 f81a 	bl	8000c3c <display_error_division_by_zero>
}
 8000c08:	e001      	b.n	8000c0e <calculate_and_display+0x5a>
		print_invalid_expression_error();
 8000c0a:	f000 f807 	bl	8000c1c <print_invalid_expression_error>
}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08004948 	.word	0x08004948

08000c1c <print_invalid_expression_error>:

void print_invalid_expression_error(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	clear_row(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 f97f 	bl	8000f24 <clear_row>
	lcd_put_cur(1, 0);
 8000c26:	2100      	movs	r1, #0
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 f877 	bl	8000d1c <lcd_put_cur>
	lcd_send_string(ERROR_MESSAGE_INVALID_EXPRESSION);
 8000c2e:	4802      	ldr	r0, [pc, #8]	; (8000c38 <print_invalid_expression_error+0x1c>)
 8000c30:	f000 f8d0 	bl	8000dd4 <lcd_send_string>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	0800494c 	.word	0x0800494c

08000c3c <display_error_division_by_zero>:

void display_error_division_by_zero(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	clear_row(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 f96f 	bl	8000f24 <clear_row>
	lcd_put_cur(1, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 f867 	bl	8000d1c <lcd_put_cur>
	lcd_send_string(ERROR_MESSAGE_DIVISON_ZERO);
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <display_error_division_by_zero+0x1c>)
 8000c50:	f000 f8c0 	bl	8000dd4 <lcd_send_string>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	08004960 	.word	0x08004960

08000c5c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f023 030f 	bic.w	r3, r3, #15
 8000c6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f043 030c 	orr.w	r3, r3, #12
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	f043 030c 	orr.w	r3, r3, #12
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c9c:	f107 0208 	add.w	r2, r7, #8
 8000ca0:	2364      	movs	r3, #100	; 0x64
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	214e      	movs	r1, #78	; 0x4e
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <lcd_send_cmd+0x5c>)
 8000caa:	f001 fa3d 	bl	8002128 <HAL_I2C_Master_Transmit>
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000008c 	.word	0x2000008c

08000cbc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f023 030f 	bic.w	r3, r3, #15
 8000ccc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	f043 030d 	orr.w	r3, r3, #13
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	f043 0309 	orr.w	r3, r3, #9
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	f043 030d 	orr.w	r3, r3, #13
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	f043 0309 	orr.w	r3, r3, #9
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cfc:	f107 0208 	add.w	r2, r7, #8
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2304      	movs	r3, #4
 8000d06:	214e      	movs	r1, #78	; 0x4e
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <lcd_send_data+0x5c>)
 8000d0a:	f001 fa0d 	bl	8002128 <HAL_I2C_Master_Transmit>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000008c 	.word	0x2000008c

08000d1c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <lcd_put_cur+0x18>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d005      	beq.n	8000d3e <lcd_put_cur+0x22>
 8000d32:	e009      	b.n	8000d48 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	603b      	str	r3, [r7, #0]
            break;
 8000d3c:	e004      	b.n	8000d48 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d44:	603b      	str	r3, [r7, #0]
            break;
 8000d46:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff85 	bl	8000c5c <lcd_send_cmd>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <lcd_init>:


void lcd_init (void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d5e:	2032      	movs	r0, #50	; 0x32
 8000d60:	f000 fdde 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d64:	2030      	movs	r0, #48	; 0x30
 8000d66:	f7ff ff79 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f000 fdd8 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d70:	2030      	movs	r0, #48	; 0x30
 8000d72:	f7ff ff73 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fdd2 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d7c:	2030      	movs	r0, #48	; 0x30
 8000d7e:	f7ff ff6d 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(10);
 8000d82:	200a      	movs	r0, #10
 8000d84:	f000 fdcc 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d88:	2020      	movs	r0, #32
 8000d8a:	f7ff ff67 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f000 fdc6 	bl	8001920 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d94:	2028      	movs	r0, #40	; 0x28
 8000d96:	f7ff ff61 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 fdc0 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000da0:	2008      	movs	r0, #8
 8000da2:	f7ff ff5b 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fdba 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff55 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fdb4 	bl	8001920 <HAL_Delay>
	HAL_Delay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 fdb1 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000dbe:	2006      	movs	r0, #6
 8000dc0:	f7ff ff4c 	bl	8000c5c <lcd_send_cmd>
	HAL_Delay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 fdab 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f7ff ff46 	bl	8000c5c <lcd_send_cmd>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ddc:	e006      	b.n	8000dec <lcd_send_string+0x18>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff68 	bl	8000cbc <lcd_send_data>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f4      	bne.n	8000dde <lcd_send_string+0xa>
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <cursor_deplacement_right>:

// Function to move the cursor to the right
void cursor_deplacement_right(int* row, int* col){
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
    if(*col < 16){
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	dc0c      	bgt.n	8000e2a <cursor_deplacement_right+0x2c>
        // If the current column is less than 16, move the cursor one position to the right
        lcd_put_cur(*row, ++(*col));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff ff7a 	bl	8000d1c <lcd_put_cur>
        // move the cursor to the first row at the beginning of the line
        *col = 0;
        *row = 0;
        lcd_put_cur(*row, *col);
    }
}
 8000e28:	e022      	b.n	8000e70 <cursor_deplacement_right+0x72>
    else if(*row == 0){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d110      	bne.n	8000e54 <cursor_deplacement_right+0x56>
        *col = 0;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
        lcd_put_cur(++(*row), *col);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f7ff ff65 	bl	8000d1c <lcd_put_cur>
}
 8000e52:	e00d      	b.n	8000e70 <cursor_deplacement_right+0x72>
        *col = 0;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
        *row = 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
        lcd_put_cur(*row, *col);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f7ff ff56 	bl	8000d1c <lcd_put_cur>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <cursor_deplacement_left>:

// Function to move the cursor to the left
void cursor_deplacement_left(int* row, int* col){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    if(*col > 0){
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dd0c      	ble.n	8000ea4 <cursor_deplacement_left+0x2c>
        // If the current column is greater than 0, move the cursor one position to the left
        lcd_put_cur(*row, --(*col));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff ff3d 	bl	8000d1c <lcd_put_cur>
        // If the current row is 1 and the column is at the beginning (0),
        // move the cursor to the previous row at the end of the line
        *col = 16;
        lcd_put_cur(--(*row), *col);
    }
}
 8000ea2:	e013      	b.n	8000ecc <cursor_deplacement_left+0x54>
    else if(*row == 1){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10f      	bne.n	8000ecc <cursor_deplacement_left+0x54>
        *col = 16;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2210      	movs	r2, #16
 8000eb0:	601a      	str	r2, [r3, #0]
        lcd_put_cur(--(*row), *col);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	f7ff ff28 	bl	8000d1c <lcd_put_cur>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <remove_cursor_element>:

void remove_cursor_element(int* row, int* col){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	if(*row == 0 && *col == 0){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <remove_cursor_element+0x32>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10b      	bne.n	8000f06 <remove_cursor_element+0x32>
		lcd_put_cur(0, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ff13 	bl	8000d1c <lcd_put_cur>
		lcd_send_string(" ");
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <remove_cursor_element+0x4c>)
 8000ef8:	f7ff ff6c 	bl	8000dd4 <lcd_send_string>
		cursor_deplacement_left(row, col);
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffba 	bl	8000e78 <cursor_deplacement_left>
 8000f04:	e007      	b.n	8000f16 <remove_cursor_element+0x42>
	}
	else {
		cursor_deplacement_left(row, col);
 8000f06:	6839      	ldr	r1, [r7, #0]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffb5 	bl	8000e78 <cursor_deplacement_left>
		lcd_send_string(" ");
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <remove_cursor_element+0x4c>)
 8000f10:	f7ff ff60 	bl	8000dd4 <lcd_send_string>

	}

}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08004970 	.word	0x08004970

08000f24 <clear_row>:

void clear_row(int row){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<16; i++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e009      	b.n	8000f46 <clear_row+0x22>
		lcd_put_cur(row, i);
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fef1 	bl	8000d1c <lcd_put_cur>
		lcd_send_string(" ");
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <clear_row+0x34>)
 8000f3c:	f7ff ff4a 	bl	8000dd4 <lcd_send_string>
	for(int i=0; i<16; i++){
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	ddf2      	ble.n	8000f32 <clear_row+0xe>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08004970 	.word	0x08004970

08000f5c <keypad_read>:
#include "keypad-lib.h"


// Function to read the pressed key from the keypad
char keypad_read() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
    // Iterate through each row
    for (int row = 0; row < 4; row++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	e09d      	b.n	80010a4 <keypad_read+0x148>

        // Set all rows to low (deactivate all rows)
        HAL_GPIO_WritePin(GPIOC, ROW1_PIN | ROW2_PIN | ROW3_PIN | ROW4_PIN, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	4852      	ldr	r0, [pc, #328]	; (80010b8 <keypad_read+0x15c>)
 8000f6e:	f000 ff7d 	bl	8001e6c <HAL_GPIO_WritePin>

        // Set the current row to high (activate the specific row)
        switch (row) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d823      	bhi.n	8000fc0 <keypad_read+0x64>
 8000f78:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <keypad_read+0x24>)
 8000f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7e:	bf00      	nop
 8000f80:	08000f91 	.word	0x08000f91
 8000f84:	08000f9d 	.word	0x08000f9d
 8000f88:	08000fa9 	.word	0x08000fa9
 8000f8c:	08000fb5 	.word	0x08000fb5
            case 0:
                HAL_GPIO_WritePin(GPIOC, ROW1_PIN, GPIO_PIN_SET); //Write PC1
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4848      	ldr	r0, [pc, #288]	; (80010b8 <keypad_read+0x15c>)
 8000f96:	f000 ff69 	bl	8001e6c <HAL_GPIO_WritePin>
                break;
 8000f9a:	e011      	b.n	8000fc0 <keypad_read+0x64>
            case 1:
                HAL_GPIO_WritePin(GPIOC, ROW2_PIN, GPIO_PIN_SET); //Write PC0
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4845      	ldr	r0, [pc, #276]	; (80010b8 <keypad_read+0x15c>)
 8000fa2:	f000 ff63 	bl	8001e6c <HAL_GPIO_WritePin>
                break;
 8000fa6:	e00b      	b.n	8000fc0 <keypad_read+0x64>
            case 2:
                HAL_GPIO_WritePin(GPIOC, ROW3_PIN, GPIO_PIN_SET); //Write PC3
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2108      	movs	r1, #8
 8000fac:	4842      	ldr	r0, [pc, #264]	; (80010b8 <keypad_read+0x15c>)
 8000fae:	f000 ff5d 	bl	8001e6c <HAL_GPIO_WritePin>
                break;
 8000fb2:	e005      	b.n	8000fc0 <keypad_read+0x64>
            case 3:
                HAL_GPIO_WritePin(GPIOC, ROW4_PIN, GPIO_PIN_SET); //Write PC2
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	483f      	ldr	r0, [pc, #252]	; (80010b8 <keypad_read+0x15c>)
 8000fba:	f000 ff57 	bl	8001e6c <HAL_GPIO_WritePin>
                break;
 8000fbe:	bf00      	nop
        }

        HAL_Delay(1); // Adjust the delay duration as needed
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f000 fcad 	bl	8001920 <HAL_Delay>

        // Check if any column is low (indicating a key press)
        if (HAL_GPIO_ReadPin(GPIOA, COL1_PIN) == GPIO_PIN_SET) {
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	483c      	ldr	r0, [pc, #240]	; (80010bc <keypad_read+0x160>)
 8000fca:	f000 ff37 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d113      	bne.n	8000ffc <keypad_read+0xa0>
            if (row == 0)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <keypad_read+0x82>
                return '1';
 8000fda:	2331      	movs	r3, #49	; 0x31
 8000fdc:	e067      	b.n	80010ae <keypad_read+0x152>
            else if (row == 1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <keypad_read+0x8c>
                return '4';
 8000fe4:	2334      	movs	r3, #52	; 0x34
 8000fe6:	e062      	b.n	80010ae <keypad_read+0x152>
            else if (row == 2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d101      	bne.n	8000ff2 <keypad_read+0x96>
                return '7';
 8000fee:	2337      	movs	r3, #55	; 0x37
 8000ff0:	e05d      	b.n	80010ae <keypad_read+0x152>
            else if (row == 3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d101      	bne.n	8000ffc <keypad_read+0xa0>
                return '*';
 8000ff8:	232a      	movs	r3, #42	; 0x2a
 8000ffa:	e058      	b.n	80010ae <keypad_read+0x152>
        }

        if (HAL_GPIO_ReadPin(GPIOA, COL2_PIN) == GPIO_PIN_SET) {
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	482f      	ldr	r0, [pc, #188]	; (80010bc <keypad_read+0x160>)
 8001000:	f000 ff1c 	bl	8001e3c <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d113      	bne.n	8001032 <keypad_read+0xd6>
            if (row == 0)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <keypad_read+0xb8>
                return '2';
 8001010:	2332      	movs	r3, #50	; 0x32
 8001012:	e04c      	b.n	80010ae <keypad_read+0x152>
            else if (row == 1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <keypad_read+0xc2>
                return '5';
 800101a:	2335      	movs	r3, #53	; 0x35
 800101c:	e047      	b.n	80010ae <keypad_read+0x152>
            else if (row == 2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d101      	bne.n	8001028 <keypad_read+0xcc>
                return '8';
 8001024:	2338      	movs	r3, #56	; 0x38
 8001026:	e042      	b.n	80010ae <keypad_read+0x152>
            else if (row == 3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d101      	bne.n	8001032 <keypad_read+0xd6>
                return '0';
 800102e:	2330      	movs	r3, #48	; 0x30
 8001030:	e03d      	b.n	80010ae <keypad_read+0x152>
        }

        if (HAL_GPIO_ReadPin(GPIOA, COL3_PIN) == GPIO_PIN_SET) {
 8001032:	2110      	movs	r1, #16
 8001034:	4821      	ldr	r0, [pc, #132]	; (80010bc <keypad_read+0x160>)
 8001036:	f000 ff01 	bl	8001e3c <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d113      	bne.n	8001068 <keypad_read+0x10c>
            if (row == 0)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <keypad_read+0xee>
                return '3';
 8001046:	2333      	movs	r3, #51	; 0x33
 8001048:	e031      	b.n	80010ae <keypad_read+0x152>
            else if (row == 1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <keypad_read+0xf8>
                return '6';
 8001050:	2336      	movs	r3, #54	; 0x36
 8001052:	e02c      	b.n	80010ae <keypad_read+0x152>
            else if (row == 2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d101      	bne.n	800105e <keypad_read+0x102>
                return '9';
 800105a:	2339      	movs	r3, #57	; 0x39
 800105c:	e027      	b.n	80010ae <keypad_read+0x152>
            else if (row == 3)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d101      	bne.n	8001068 <keypad_read+0x10c>
                return '#';
 8001064:	2323      	movs	r3, #35	; 0x23
 8001066:	e022      	b.n	80010ae <keypad_read+0x152>
        }

        if (HAL_GPIO_ReadPin(GPIOB, COL4_PIN) == GPIO_PIN_SET) {
 8001068:	2101      	movs	r1, #1
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <keypad_read+0x164>)
 800106c:	f000 fee6 	bl	8001e3c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d113      	bne.n	800109e <keypad_read+0x142>
            if (row == 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <keypad_read+0x124>
                return '+';
 800107c:	232b      	movs	r3, #43	; 0x2b
 800107e:	e016      	b.n	80010ae <keypad_read+0x152>
            else if (row == 1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <keypad_read+0x12e>
                return '-';
 8001086:	232d      	movs	r3, #45	; 0x2d
 8001088:	e011      	b.n	80010ae <keypad_read+0x152>
            else if (row == 2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d101      	bne.n	8001094 <keypad_read+0x138>
                return '/';
 8001090:	232f      	movs	r3, #47	; 0x2f
 8001092:	e00c      	b.n	80010ae <keypad_read+0x152>
            else if (row == 3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d101      	bne.n	800109e <keypad_read+0x142>
                return 'D';
 800109a:	2344      	movs	r3, #68	; 0x44
 800109c:	e007      	b.n	80010ae <keypad_read+0x152>
    for (int row = 0; row < 4; row++) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3301      	adds	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	f77f af5e 	ble.w	8000f68 <keypad_read+0xc>
        }
    }

    // No key press detected
    return '\0';
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08e      	sub	sp, #56	; 0x38
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f000 fbb7 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f88f 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f000 f94f 	bl	8001374 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 f923 	bl	8001320 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010da:	f000 f8f3 	bl	80012c4 <MX_I2C1_Init>
  lcd_init();
 80010de:	f7ff fe3c 	bl	8000d5a <lcd_init>
  /* USER CODE BEGIN 2 */
  lcd_put_cur(0, 0);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fe19 	bl	8000d1c <lcd_put_cur>
  HAL_Delay(100);
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f000 fc18 	bl	8001920 <HAL_Delay>
  char str[2] = {'\0'};
 80010f0:	2300      	movs	r3, #0
 80010f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  char expression[16*2] = {'\0'};
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]
  char ch;
  char ch_printed = 'x';
 800110c:	2378      	movs	r3, #120	; 0x78
 800110e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int row, col, exp_index;
  row = col = exp_index = 0 ;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  ch = keypad_read();
 800111e:	f7ff ff1d 	bl	8000f5c <keypad_read>
 8001122:	4603      	mov	r3, r0
 8001124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if(ch!= '\0' && ch_printed != ch){
 8001128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800112c:	2b00      	cmp	r3, #0
 800112e:	d057      	beq.n	80011e0 <main+0x11c>
 8001130:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001138:	429a      	cmp	r2, r3
 800113a:	d051      	beq.n	80011e0 <main+0x11c>
		  alert();
 800113c:	f7ff fa22 	bl	8000584 <alert>
		  if(ch!='#' && ch!='D'){
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001144:	2b23      	cmp	r3, #35	; 0x23
 8001146:	d024      	beq.n	8001192 <main+0xce>
 8001148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114c:	2b44      	cmp	r3, #68	; 0x44
 800114e:	d020      	beq.n	8001192 <main+0xce>
			  expression[exp_index] = ch;
 8001150:	f107 020c 	add.w	r2, r7, #12
 8001154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001156:	4413      	add	r3, r2
 8001158:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800115c:	701a      	strb	r2, [r3, #0]
			  str[0] = ch;
 800115e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001162:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			  lcd_put_cur(row, col);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fdd5 	bl	8000d1c <lcd_put_cur>
			  lcd_send_string(str);
 8001172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe2c 	bl	8000dd4 <lcd_send_string>
			  cursor_deplacement_right(&row, &col);
 800117c:	1d3a      	adds	r2, r7, #4
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe3a 	bl	8000dfe <cursor_deplacement_right>
			  exp_index++;
 800118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118c:	3301      	adds	r3, #1
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
 8001190:	e026      	b.n	80011e0 <main+0x11c>
		  }
		  else if(ch == '#'){
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001196:	2b23      	cmp	r3, #35	; 0x23
 8001198:	d119      	bne.n	80011ce <main+0x10a>
			  lcd_put_cur(row, col);
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fdbb 	bl	8000d1c <lcd_put_cur>
			  remove_cursor_element(&row, &col);
 80011a6:	1d3a      	adds	r2, r7, #4
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe90 	bl	8000ed4 <remove_cursor_element>
			  expression[exp_index] = '\0';
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	4413      	add	r3, r2
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
			  if (exp_index != 0)
 80011c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <main+0x11c>
				  exp_index--;
 80011c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c8:	3b01      	subs	r3, #1
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
 80011cc:	e008      	b.n	80011e0 <main+0x11c>
		  }
		  else if(ch == 'D'){
 80011ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d2:	2b44      	cmp	r3, #68	; 0x44
 80011d4:	d104      	bne.n	80011e0 <main+0x11c>
			  calculate_and_display(expression);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcea 	bl	8000bb4 <calculate_and_display>
		  }

	  }
	  ch_printed = ch;
 80011e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  HAL_Delay(200);
 80011e8:	20c8      	movs	r0, #200	; 0xc8
 80011ea:	f000 fb99 	bl	8001920 <HAL_Delay>
	  ch = keypad_read();
 80011ee:	e796      	b.n	800111e <main+0x5a>

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fa1e 	bl	8003640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <SystemClock_Config+0xcc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <SystemClock_Config+0xcc>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <SystemClock_Config+0xcc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <SystemClock_Config+0xd0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <SystemClock_Config+0xd0>)
 800123e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001268:	2348      	movs	r3, #72	; 0x48
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fa5d 	bl	8002738 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001284:	f000 f912 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fcbf 	bl	8002c28 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012b0:	f000 f8fc 	bl	80014ac <Error_Handler>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3750      	adds	r7, #80	; 0x50
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_I2C1_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_I2C1_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2C1_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2C1_Init+0x50>)
 8001302:	f000 fdcd 	bl	8001ea0 <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 f8ce 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000008c 	.word	0x2000008c
 8001318:	40005400 	.word	0x40005400
 800131c:	000186a0 	.word	0x000186a0

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART2_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART2_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART2_UART_Init+0x4c>)
 8001358:	f001 fe86 	bl	8003068 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 f8a3 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000e0 	.word	0x200000e0
 8001370:	40004400 	.word	0x40004400

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b43      	ldr	r3, [pc, #268]	; (800149c <MX_GPIO_Init+0x128>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a42      	ldr	r2, [pc, #264]	; (800149c <MX_GPIO_Init+0x128>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <MX_GPIO_Init+0x128>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <MX_GPIO_Init+0x128>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <MX_GPIO_Init+0x128>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <MX_GPIO_Init+0x128>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <MX_GPIO_Init+0x128>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a34      	ldr	r2, [pc, #208]	; (800149c <MX_GPIO_Init+0x128>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <MX_GPIO_Init+0x128>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <MX_GPIO_Init+0x128>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <MX_GPIO_Init+0x128>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <MX_GPIO_Init+0x128>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	4828      	ldr	r0, [pc, #160]	; (80014a0 <MX_GPIO_Init+0x12c>)
 8001400:	f000 fd34 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	4826      	ldr	r0, [pc, #152]	; (80014a4 <MX_GPIO_Init+0x130>)
 800140a:	f000 fd2f 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001414:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_GPIO_Init+0x12c>)
 8001426:	f000 fb85 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800142a:	230f      	movs	r3, #15
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001432:	2302      	movs	r3, #2
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_GPIO_Init+0x12c>)
 8001442:	f000 fb77 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001446:	2313      	movs	r3, #19
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800144e:	2302      	movs	r3, #2
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <MX_GPIO_Init+0x130>)
 800145a:	f000 fb6b 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800145e:	2320      	movs	r3, #32
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0x130>)
 8001476:	f000 fb5d 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001482:	2302      	movs	r3, #2
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_GPIO_Init+0x134>)
 800148e:	f000 fb51 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x4c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 fae8 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_I2C_MspInit+0x84>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_I2C_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	2312      	movs	r3, #18
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001556:	2304      	movs	r3, #4
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_I2C_MspInit+0x8c>)
 8001562:	f000 fae7 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_I2C_MspInit+0x88>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005400 	.word	0x40005400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_UART_MspInit+0x8c>)
 800160e:	f000 fa91 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f934 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f001 ff30 	bl	80035ec <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20018000 	.word	0x20018000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20000124 	.word	0x20000124
 80017c0:	20000140 	.word	0x20000140

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f001 feef 	bl	80035f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fc53 	bl	80010c4 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800182c:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8001830:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001834:	2000013c 	.word	0x2000013c

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f931 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fe22 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f93b 	bl	8001b1a <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f911 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	20000128 	.word	0x20000128

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000128 	.word	0x20000128

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e159      	b.n	8001e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8148 	bne.w	8001dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a2 	beq.w	8001dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x1fe>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x1fa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x1f6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x1f2>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f aea2 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	619a      	str	r2, [r3, #24]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e12b      	b.n	800210a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fb1e 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	; 0x24
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f04:	f001 f888 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8001f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a81      	ldr	r2, [pc, #516]	; (8002114 <HAL_I2C_Init+0x274>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d807      	bhi.n	8001f24 <HAL_I2C_Init+0x84>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a80      	ldr	r2, [pc, #512]	; (8002118 <HAL_I2C_Init+0x278>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e006      	b.n	8001f32 <HAL_I2C_Init+0x92>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a7d      	ldr	r2, [pc, #500]	; (800211c <HAL_I2C_Init+0x27c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0e7      	b.n	800210a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a78      	ldr	r2, [pc, #480]	; (8002120 <HAL_I2C_Init+0x280>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0c9b      	lsrs	r3, r3, #18
 8001f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a6a      	ldr	r2, [pc, #424]	; (8002114 <HAL_I2C_Init+0x274>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d802      	bhi.n	8001f74 <HAL_I2C_Init+0xd4>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	e009      	b.n	8001f88 <HAL_I2C_Init+0xe8>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	4a69      	ldr	r2, [pc, #420]	; (8002124 <HAL_I2C_Init+0x284>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	3301      	adds	r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	495c      	ldr	r1, [pc, #368]	; (8002114 <HAL_I2C_Init+0x274>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d819      	bhi.n	8001fdc <HAL_I2C_Init+0x13c>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e59      	subs	r1, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_I2C_Init+0x138>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e59      	subs	r1, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd6:	e051      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e04f      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d111      	bne.n	8002008 <HAL_I2C_Init+0x168>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e012      	b.n	800202e <HAL_I2C_Init+0x18e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	0099      	lsls	r1, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Init+0x196>
 8002032:	2301      	movs	r3, #1
 8002034:	e022      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10e      	bne.n	800205c <HAL_I2C_Init+0x1bc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e58      	subs	r0, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	440b      	add	r3, r1
 800204c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205a:	e00f      	b.n	800207c <HAL_I2C_Init+0x1dc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	0099      	lsls	r1, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	6809      	ldr	r1, [r1, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6911      	ldr	r1, [r2, #16]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68d2      	ldr	r2, [r2, #12]
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	000186a0 	.word	0x000186a0
 8002118:	001e847f 	.word	0x001e847f
 800211c:	003d08ff 	.word	0x003d08ff
 8002120:	431bde83 	.word	0x431bde83
 8002124:	10624dd3 	.word	0x10624dd3

08002128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
 8002138:	4613      	mov	r3, r2
 800213a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff fbe4 	bl	8001908 <HAL_GetTick>
 8002140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	f040 80e0 	bne.w	8002310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	2201      	movs	r2, #1
 8002158:	4970      	ldr	r1, [pc, #448]	; (800231c <HAL_I2C_Master_Transmit+0x1f4>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f964 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	e0d3      	b.n	8002312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2C_Master_Transmit+0x50>
 8002174:	2302      	movs	r3, #2
 8002176:	e0cc      	b.n	8002312 <HAL_I2C_Master_Transmit+0x1ea>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d007      	beq.n	800219e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2221      	movs	r2, #33	; 0x21
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2210      	movs	r2, #16
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	893a      	ldrh	r2, [r7, #8]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a50      	ldr	r2, [pc, #320]	; (8002320 <HAL_I2C_Master_Transmit+0x1f8>)
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f89c 	bl	8002324 <I2C_MasterRequestWrite>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e08d      	b.n	8002312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800220c:	e066      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	6a39      	ldr	r1, [r7, #32]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f9de 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2b04      	cmp	r3, #4
 8002224:	d107      	bne.n	8002236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06b      	b.n	8002312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d11b      	bne.n	80022b0 <HAL_I2C_Master_Transmit+0x188>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	2b00      	cmp	r3, #0
 800227e:	d017      	beq.n	80022b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	6a39      	ldr	r1, [r7, #32]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f9ce 	bl	8002656 <I2C_WaitOnBTFFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d107      	bne.n	80022d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e01a      	b.n	8002312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d194      	bne.n	800220e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	e000      	b.n	8002312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002310:	2302      	movs	r3, #2
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	00100002 	.word	0x00100002
 8002320:	ffff0000 	.word	0xffff0000

08002324 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	460b      	mov	r3, r1
 8002332:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d006      	beq.n	800234e <I2C_MasterRequestWrite+0x2a>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d003      	beq.n	800234e <I2C_MasterRequestWrite+0x2a>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800234c:	d108      	bne.n	8002360 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e00b      	b.n	8002378 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	2b12      	cmp	r3, #18
 8002366:	d107      	bne.n	8002378 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002376:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f84f 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239e:	d103      	bne.n	80023a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e035      	b.n	8002418 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023b4:	d108      	bne.n	80023c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	e01b      	b.n	8002400 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023c8:	897b      	ldrh	r3, [r7, #10]
 80023ca:	11db      	asrs	r3, r3, #7
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0306 	and.w	r3, r3, #6
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f063 030f 	orn	r3, r3, #15
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <I2C_MasterRequestWrite+0xfc>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f875 	bl	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e010      	b.n	8002418 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <I2C_MasterRequestWrite+0x100>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f865 	bl	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	00010008 	.word	0x00010008
 8002424:	00010002 	.word	0x00010002

08002428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002438:	e025      	b.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d021      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002442:	f7ff fa61 	bl	8001908 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d116      	bne.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f043 0220 	orr.w	r2, r3, #32
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e023      	b.n	80024ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d10d      	bne.n	80024ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4013      	ands	r3, r2
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	e00c      	b.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4013      	ands	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d0b6      	beq.n	800243a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e4:	e051      	b.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f4:	d123      	bne.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002504:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800250e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0204 	orr.w	r2, r3, #4
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e046      	b.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d021      	beq.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f9df 	bl	8001908 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e020      	b.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10c      	bne.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e00b      	b.n	80025c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d18d      	bne.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e0:	e02d      	b.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f878 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02d      	b.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d021      	beq.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff f985 	bl	8001908 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d1ca      	bne.n	80025e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002662:	e02d      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f837 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e02d      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d021      	beq.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7ff f944 	bl	8001908 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d1ca      	bne.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ee:	d11b      	bne.n	8002728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e267      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d075      	beq.n	8002842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002756:	4b88      	ldr	r3, [pc, #544]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b04      	cmp	r3, #4
 8002760:	d00c      	beq.n	800277c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002762:	4b85      	ldr	r3, [pc, #532]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276a:	2b08      	cmp	r3, #8
 800276c:	d112      	bne.n	8002794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276e:	4b82      	ldr	r3, [pc, #520]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800277a:	d10b      	bne.n	8002794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	4b7e      	ldr	r3, [pc, #504]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05b      	beq.n	8002840 <HAL_RCC_OscConfig+0x108>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d157      	bne.n	8002840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e242      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d106      	bne.n	80027ac <HAL_RCC_OscConfig+0x74>
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a75      	ldr	r2, [pc, #468]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e01d      	b.n	80027e8 <HAL_RCC_OscConfig+0xb0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x98>
 80027b6:	4b70      	ldr	r3, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6f      	ldr	r2, [pc, #444]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6c      	ldr	r2, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xb0>
 80027d0:	4b69      	ldr	r3, [pc, #420]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a68      	ldr	r2, [pc, #416]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b66      	ldr	r3, [pc, #408]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a65      	ldr	r2, [pc, #404]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7ff f88a 	bl	8001908 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f8:	f7ff f886 	bl	8001908 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e207      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b5b      	ldr	r3, [pc, #364]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0xc0>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff f876 	bl	8001908 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002820:	f7ff f872 	bl	8001908 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1f3      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	4b51      	ldr	r3, [pc, #324]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0xe8>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d063      	beq.n	8002916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002862:	2b08      	cmp	r3, #8
 8002864:	d11c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002866:	4b44      	ldr	r3, [pc, #272]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_RCC_OscConfig+0x152>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e1c7      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4937      	ldr	r1, [pc, #220]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	e03a      	b.n	8002916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a8:	4b34      	ldr	r3, [pc, #208]	; (800297c <HAL_RCC_OscConfig+0x244>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff f82b 	bl	8001908 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b6:	f7ff f827 	bl	8001908 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1a8      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4925      	ldr	r1, [pc, #148]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_OscConfig+0x244>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7ff f80a 	bl	8001908 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f8:	f7ff f806 	bl	8001908 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e187      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d036      	beq.n	8002990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d016      	beq.n	8002958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_RCC_OscConfig+0x248>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe ffea 	bl	8001908 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe ffe6 	bl	8001908 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e167      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x240>)
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x200>
 8002956:	e01b      	b.n	8002990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_OscConfig+0x248>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe ffd3 	bl	8001908 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	e00e      	b.n	8002984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002966:	f7fe ffcf 	bl	8001908 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d907      	bls.n	8002984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e150      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
 8002978:	40023800 	.word	0x40023800
 800297c:	42470000 	.word	0x42470000
 8002980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ea      	bne.n	8002966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8097 	beq.w	8002acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a2:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	4b7d      	ldr	r3, [pc, #500]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a7c      	ldr	r2, [pc, #496]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ce:	4b77      	ldr	r3, [pc, #476]	; (8002bac <HAL_RCC_OscConfig+0x474>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d118      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029da:	4b74      	ldr	r3, [pc, #464]	; (8002bac <HAL_RCC_OscConfig+0x474>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a73      	ldr	r2, [pc, #460]	; (8002bac <HAL_RCC_OscConfig+0x474>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e6:	f7fe ff8f 	bl	8001908 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ee:	f7fe ff8b 	bl	8001908 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e10c      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCC_OscConfig+0x474>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x2ea>
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	e01c      	b.n	8002a5c <HAL_RCC_OscConfig+0x324>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x30c>
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0x324>
 8002a44:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	4b55      	ldr	r3, [pc, #340]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 0304 	bic.w	r3, r3, #4
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d015      	beq.n	8002a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe ff50 	bl	8001908 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7fe ff4c 	bl	8001908 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0cb      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a82:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ee      	beq.n	8002a6c <HAL_RCC_OscConfig+0x334>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a90:	f7fe ff3a 	bl	8001908 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe ff36 	bl	8001908 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0b5      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	4a38      	ldr	r2, [pc, #224]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a1 	beq.w	8002c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d05c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d141      	bne.n	8002b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCC_OscConfig+0x478>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe ff0a 	bl	8001908 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe ff06 	bl	8001908 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e087      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	491b      	ldr	r1, [pc, #108]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x478>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fe fedf 	bl	8001908 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe fedb 	bl	8001908 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e05c      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x416>
 8002b6c:	e054      	b.n	8002c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_RCC_OscConfig+0x478>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fec8 	bl	8001908 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fec4 	bl	8001908 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e045      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_OscConfig+0x470>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x444>
 8002b9a:	e03d      	b.n	8002c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e038      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4ec>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d028      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d121      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d11a      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d111      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0cc      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d90c      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b8      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	494d      	ldr	r1, [pc, #308]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d044      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d119      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e067      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4934      	ldr	r1, [pc, #208]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fdf6 	bl	8001908 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe fdf2 	bl	8001908 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e04f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 020c 	and.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1eb      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d20c      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e032      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4916      	ldr	r1, [pc, #88]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	490e      	ldr	r1, [pc, #56]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dae:	f000 f821 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	490a      	ldr	r1, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	5ccb      	ldrb	r3, [r1, r3]
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fd56 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00
 8002de4:	40023800 	.word	0x40023800
 8002de8:	08004974 	.word	0x08004974
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b094      	sub	sp, #80	; 0x50
 8002dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002e00:	2300      	movs	r3, #0
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e04:	2300      	movs	r3, #0
 8002e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0c:	4b79      	ldr	r3, [pc, #484]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d00d      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x40>
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	f200 80e1 	bhi.w	8002fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e26:	e0db      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e28:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e2c:	e0db      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2e:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e32:	e0d8      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e34:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d063      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	2200      	movs	r2, #0
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5e:	2300      	movs	r3, #0
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
 8002e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e66:	4622      	mov	r2, r4
 8002e68:	462b      	mov	r3, r5
 8002e6a:	f04f 0000 	mov.w	r0, #0
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	0159      	lsls	r1, r3, #5
 8002e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e78:	0150      	lsls	r0, r2, #5
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4621      	mov	r1, r4
 8002e80:	1a51      	subs	r1, r2, r1
 8002e82:	6139      	str	r1, [r7, #16]
 8002e84:	4629      	mov	r1, r5
 8002e86:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	018b      	lsls	r3, r1, #6
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	018a      	lsls	r2, r1, #6
 8002ea6:	4651      	mov	r1, sl
 8002ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8002eac:	4659      	mov	r1, fp
 8002eae:	eb63 0901 	sbc.w	r9, r3, r1
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ec6:	4690      	mov	r8, r2
 8002ec8:	4699      	mov	r9, r3
 8002eca:	4623      	mov	r3, r4
 8002ecc:	eb18 0303 	adds.w	r3, r8, r3
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	462b      	mov	r3, r5
 8002ed4:	eb49 0303 	adc.w	r3, r9, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	024b      	lsls	r3, r1, #9
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	024a      	lsls	r2, r1, #9
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efa:	2200      	movs	r2, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f04:	f7fd f9bc 	bl	8000280 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	e058      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	2200      	movs	r2, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	464b      	mov	r3, r9
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	0159      	lsls	r1, r3, #5
 8002f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3e:	0150      	lsls	r0, r2, #5
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4641      	mov	r1, r8
 8002f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f64:	ebb2 040a 	subs.w	r4, r2, sl
 8002f68:	eb63 050b 	sbc.w	r5, r3, fp
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	00eb      	lsls	r3, r5, #3
 8002f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f7a:	00e2      	lsls	r2, r4, #3
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	461d      	mov	r5, r3
 8002f80:	4643      	mov	r3, r8
 8002f82:	18e3      	adds	r3, r4, r3
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	464b      	mov	r3, r9
 8002f88:	eb45 0303 	adc.w	r3, r5, r3
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	028b      	lsls	r3, r1, #10
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	028a      	lsls	r2, r1, #10
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	61fa      	str	r2, [r7, #28]
 8002fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb8:	f7fd f962 	bl	8000280 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fde:	e002      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3750      	adds	r7, #80	; 0x50
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	007a1200 	.word	0x007a1200

08003000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff0 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	08004984 	.word	0x08004984

08003040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003044:	f7ff ffdc 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0b5b      	lsrs	r3, r3, #13
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08004984 	.word	0x08004984

08003068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e03f      	b.n	80030fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fa82 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f829 	bl	8003104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0c0      	sub	sp, #256	; 0x100
 800310a:	af00      	add	r7, sp, #0
 800310c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	ea40 0301 	orr.w	r3, r0, r1
 800312c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	431a      	orrs	r2, r3
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800315c:	f021 010c 	bic.w	r1, r1, #12
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316a:	430b      	orrs	r3, r1
 800316c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	ea40 0301 	orr.w	r3, r0, r1
 800318a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <UART_SetConfig+0x2cc>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0xa0>
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <UART_SetConfig+0x2d0>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d104      	bne.n	80031ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7ff ff4c 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 80031a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031ac:	e003      	b.n	80031b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ae:	f7ff ff33 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 80031b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c0:	f040 810c 	bne.w	80033dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80031de:	415b      	adcs	r3, r3
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e6:	4621      	mov	r1, r4
 80031e8:	eb12 0801 	adds.w	r8, r2, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb43 0901 	adc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800322e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003232:	460b      	mov	r3, r1
 8003234:	18db      	adds	r3, r3, r3
 8003236:	653b      	str	r3, [r7, #80]	; 0x50
 8003238:	4613      	mov	r3, r2
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
 8003240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003248:	f7fd f81a 	bl	8000280 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011c      	lsls	r4, r3, #4
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	64b9      	str	r1, [r7, #72]	; 0x48
 8003274:	415b      	adcs	r3, r3
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327c:	4641      	mov	r1, r8
 800327e:	eb12 0a01 	adds.w	sl, r2, r1
 8003282:	4649      	mov	r1, r9
 8003284:	eb43 0b01 	adc.w	fp, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	4692      	mov	sl, r2
 800329e:	469b      	mov	fp, r3
 80032a0:	4643      	mov	r3, r8
 80032a2:	eb1a 0303 	adds.w	r3, sl, r3
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032aa:	464b      	mov	r3, r9
 80032ac:	eb4b 0303 	adc.w	r3, fp, r3
 80032b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c8:	460b      	mov	r3, r1
 80032ca:	18db      	adds	r3, r3, r3
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
 80032ce:	4613      	mov	r3, r2
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	647b      	str	r3, [r7, #68]	; 0x44
 80032d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032de:	f7fc ffcf 	bl	8000280 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <UART_SetConfig+0x2d4>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2264      	movs	r2, #100	; 0x64
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	1acb      	subs	r3, r1, r3
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	441c      	add	r4, r3
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800331c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	63b9      	str	r1, [r7, #56]	; 0x38
 8003328:	415b      	adcs	r3, r3
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003330:	4641      	mov	r1, r8
 8003332:	1851      	adds	r1, r2, r1
 8003334:	6339      	str	r1, [r7, #48]	; 0x30
 8003336:	4649      	mov	r1, r9
 8003338:	414b      	adcs	r3, r1
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003348:	4659      	mov	r1, fp
 800334a:	00cb      	lsls	r3, r1, #3
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003352:	4651      	mov	r1, sl
 8003354:	00ca      	lsls	r2, r1, #3
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	4603      	mov	r3, r0
 800335c:	4642      	mov	r2, r8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003364:	464b      	mov	r3, r9
 8003366:	460a      	mov	r2, r1
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800337c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003384:	460b      	mov	r3, r1
 8003386:	18db      	adds	r3, r3, r3
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	4613      	mov	r3, r2
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339a:	f7fc ff71 	bl	8000280 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4422      	add	r2, r4
 80033ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033cc:	e105      	b.n	80035da <UART_SetConfig+0x4d6>
 80033ce:	bf00      	nop
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033ee:	4642      	mov	r2, r8
 80033f0:	464b      	mov	r3, r9
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	6239      	str	r1, [r7, #32]
 80033f6:	415b      	adcs	r3, r3
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fe:	4641      	mov	r1, r8
 8003400:	1854      	adds	r4, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb43 0501 	adc.w	r5, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003424:	464b      	mov	r3, r9
 8003426:	eb45 0303 	adc.w	r3, r5, r3
 800342a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344a:	4629      	mov	r1, r5
 800344c:	008b      	lsls	r3, r1, #2
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003454:	4621      	mov	r1, r4
 8003456:	008a      	lsls	r2, r1, #2
 8003458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800345c:	f7fc ff10 	bl	8000280 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003466:	fba3 2302 	umull	r2, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	011c      	lsls	r4, r3, #4
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800347c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	61b9      	str	r1, [r7, #24]
 8003488:	415b      	adcs	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6139      	str	r1, [r7, #16]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e8:	4649      	mov	r1, r9
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	4641      	mov	r1, r8
 80034ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f2:	4641      	mov	r1, r8
 80034f4:	008a      	lsls	r2, r1, #2
 80034f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fa:	f7fc fec1 	bl	8000280 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003522:	441c      	add	r4, r3
 8003524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003528:	2200      	movs	r2, #0
 800352a:	673b      	str	r3, [r7, #112]	; 0x70
 800352c:	677a      	str	r2, [r7, #116]	; 0x74
 800352e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003532:	4642      	mov	r2, r8
 8003534:	464b      	mov	r3, r9
 8003536:	1891      	adds	r1, r2, r2
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	415b      	adcs	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003542:	4641      	mov	r1, r8
 8003544:	1851      	adds	r1, r2, r1
 8003546:	6039      	str	r1, [r7, #0]
 8003548:	4649      	mov	r1, r9
 800354a:	414b      	adcs	r3, r1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355a:	4659      	mov	r1, fp
 800355c:	00cb      	lsls	r3, r1, #3
 800355e:	4651      	mov	r1, sl
 8003560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003564:	4651      	mov	r1, sl
 8003566:	00ca      	lsls	r2, r1, #3
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	4603      	mov	r3, r0
 800356e:	4642      	mov	r2, r8
 8003570:	189b      	adds	r3, r3, r2
 8003572:	66bb      	str	r3, [r7, #104]	; 0x68
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	663b      	str	r3, [r7, #96]	; 0x60
 8003588:	667a      	str	r2, [r7, #100]	; 0x64
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003596:	4649      	mov	r1, r9
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4641      	mov	r1, r8
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4641      	mov	r1, r8
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a8:	f7fc fe6a 	bl	8000280 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 1302 	umull	r1, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2164      	movs	r1, #100	; 0x64
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4422      	add	r2, r4
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <__errno>:
 80035ec:	4b01      	ldr	r3, [pc, #4]	; (80035f4 <__errno+0x8>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000000c 	.word	0x2000000c

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4d0d      	ldr	r5, [pc, #52]	; (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	; (8003634 <__libc_init_array+0x3c>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2600      	movs	r6, #0
 8003604:	42a6      	cmp	r6, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4d0b      	ldr	r5, [pc, #44]	; (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	; (800363c <__libc_init_array+0x44>)
 800360c:	f001 f98a 	bl	8004924 <_init>
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2600      	movs	r6, #0
 8003616:	42a6      	cmp	r6, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003620:	4798      	blx	r3
 8003622:	3601      	adds	r6, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f855 3b04 	ldr.w	r3, [r5], #4
 800362a:	4798      	blx	r3
 800362c:	3601      	adds	r6, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	08004b30 	.word	0x08004b30
 8003634:	08004b30 	.word	0x08004b30
 8003638:	08004b30 	.word	0x08004b30
 800363c:	08004b34 	.word	0x08004b34

08003640 <memset>:
 8003640:	4402      	add	r2, r0
 8003642:	4603      	mov	r3, r0
 8003644:	4293      	cmp	r3, r2
 8003646:	d100      	bne.n	800364a <memset+0xa>
 8003648:	4770      	bx	lr
 800364a:	f803 1b01 	strb.w	r1, [r3], #1
 800364e:	e7f9      	b.n	8003644 <memset+0x4>

08003650 <iprintf>:
 8003650:	b40f      	push	{r0, r1, r2, r3}
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <iprintf+0x2c>)
 8003654:	b513      	push	{r0, r1, r4, lr}
 8003656:	681c      	ldr	r4, [r3, #0]
 8003658:	b124      	cbz	r4, 8003664 <iprintf+0x14>
 800365a:	69a3      	ldr	r3, [r4, #24]
 800365c:	b913      	cbnz	r3, 8003664 <iprintf+0x14>
 800365e:	4620      	mov	r0, r4
 8003660:	f000 f886 	bl	8003770 <__sinit>
 8003664:	ab05      	add	r3, sp, #20
 8003666:	9a04      	ldr	r2, [sp, #16]
 8003668:	68a1      	ldr	r1, [r4, #8]
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	4620      	mov	r0, r4
 800366e:	f000 fb39 	bl	8003ce4 <_vfiprintf_r>
 8003672:	b002      	add	sp, #8
 8003674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003678:	b004      	add	sp, #16
 800367a:	4770      	bx	lr
 800367c:	2000000c 	.word	0x2000000c

08003680 <siprintf>:
 8003680:	b40e      	push	{r1, r2, r3}
 8003682:	b500      	push	{lr}
 8003684:	b09c      	sub	sp, #112	; 0x70
 8003686:	ab1d      	add	r3, sp, #116	; 0x74
 8003688:	9002      	str	r0, [sp, #8]
 800368a:	9006      	str	r0, [sp, #24]
 800368c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003690:	4809      	ldr	r0, [pc, #36]	; (80036b8 <siprintf+0x38>)
 8003692:	9107      	str	r1, [sp, #28]
 8003694:	9104      	str	r1, [sp, #16]
 8003696:	4909      	ldr	r1, [pc, #36]	; (80036bc <siprintf+0x3c>)
 8003698:	f853 2b04 	ldr.w	r2, [r3], #4
 800369c:	9105      	str	r1, [sp, #20]
 800369e:	6800      	ldr	r0, [r0, #0]
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	a902      	add	r1, sp, #8
 80036a4:	f000 f9f4 	bl	8003a90 <_svfiprintf_r>
 80036a8:	9b02      	ldr	r3, [sp, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	b01c      	add	sp, #112	; 0x70
 80036b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b4:	b003      	add	sp, #12
 80036b6:	4770      	bx	lr
 80036b8:	2000000c 	.word	0x2000000c
 80036bc:	ffff0208 	.word	0xffff0208

080036c0 <std>:
 80036c0:	2300      	movs	r3, #0
 80036c2:	b510      	push	{r4, lr}
 80036c4:	4604      	mov	r4, r0
 80036c6:	e9c0 3300 	strd	r3, r3, [r0]
 80036ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036ce:	6083      	str	r3, [r0, #8]
 80036d0:	8181      	strh	r1, [r0, #12]
 80036d2:	6643      	str	r3, [r0, #100]	; 0x64
 80036d4:	81c2      	strh	r2, [r0, #14]
 80036d6:	6183      	str	r3, [r0, #24]
 80036d8:	4619      	mov	r1, r3
 80036da:	2208      	movs	r2, #8
 80036dc:	305c      	adds	r0, #92	; 0x5c
 80036de:	f7ff ffaf 	bl	8003640 <memset>
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <std+0x38>)
 80036e4:	6263      	str	r3, [r4, #36]	; 0x24
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <std+0x3c>)
 80036e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <std+0x40>)
 80036ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <std+0x44>)
 80036f0:	6224      	str	r4, [r4, #32]
 80036f2:	6323      	str	r3, [r4, #48]	; 0x30
 80036f4:	bd10      	pop	{r4, pc}
 80036f6:	bf00      	nop
 80036f8:	0800428d 	.word	0x0800428d
 80036fc:	080042af 	.word	0x080042af
 8003700:	080042e7 	.word	0x080042e7
 8003704:	0800430b 	.word	0x0800430b

08003708 <_cleanup_r>:
 8003708:	4901      	ldr	r1, [pc, #4]	; (8003710 <_cleanup_r+0x8>)
 800370a:	f000 b8af 	b.w	800386c <_fwalk_reent>
 800370e:	bf00      	nop
 8003710:	080045e5 	.word	0x080045e5

08003714 <__sfmoreglue>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	2268      	movs	r2, #104	; 0x68
 8003718:	1e4d      	subs	r5, r1, #1
 800371a:	4355      	muls	r5, r2
 800371c:	460e      	mov	r6, r1
 800371e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003722:	f000 f8e5 	bl	80038f0 <_malloc_r>
 8003726:	4604      	mov	r4, r0
 8003728:	b140      	cbz	r0, 800373c <__sfmoreglue+0x28>
 800372a:	2100      	movs	r1, #0
 800372c:	e9c0 1600 	strd	r1, r6, [r0]
 8003730:	300c      	adds	r0, #12
 8003732:	60a0      	str	r0, [r4, #8]
 8003734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003738:	f7ff ff82 	bl	8003640 <memset>
 800373c:	4620      	mov	r0, r4
 800373e:	bd70      	pop	{r4, r5, r6, pc}

08003740 <__sfp_lock_acquire>:
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <__sfp_lock_acquire+0x8>)
 8003742:	f000 b8b3 	b.w	80038ac <__retarget_lock_acquire_recursive>
 8003746:	bf00      	nop
 8003748:	2000012d 	.word	0x2000012d

0800374c <__sfp_lock_release>:
 800374c:	4801      	ldr	r0, [pc, #4]	; (8003754 <__sfp_lock_release+0x8>)
 800374e:	f000 b8ae 	b.w	80038ae <__retarget_lock_release_recursive>
 8003752:	bf00      	nop
 8003754:	2000012d 	.word	0x2000012d

08003758 <__sinit_lock_acquire>:
 8003758:	4801      	ldr	r0, [pc, #4]	; (8003760 <__sinit_lock_acquire+0x8>)
 800375a:	f000 b8a7 	b.w	80038ac <__retarget_lock_acquire_recursive>
 800375e:	bf00      	nop
 8003760:	2000012e 	.word	0x2000012e

08003764 <__sinit_lock_release>:
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <__sinit_lock_release+0x8>)
 8003766:	f000 b8a2 	b.w	80038ae <__retarget_lock_release_recursive>
 800376a:	bf00      	nop
 800376c:	2000012e 	.word	0x2000012e

08003770 <__sinit>:
 8003770:	b510      	push	{r4, lr}
 8003772:	4604      	mov	r4, r0
 8003774:	f7ff fff0 	bl	8003758 <__sinit_lock_acquire>
 8003778:	69a3      	ldr	r3, [r4, #24]
 800377a:	b11b      	cbz	r3, 8003784 <__sinit+0x14>
 800377c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003780:	f7ff bff0 	b.w	8003764 <__sinit_lock_release>
 8003784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003788:	6523      	str	r3, [r4, #80]	; 0x50
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <__sinit+0x68>)
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <__sinit+0x6c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	62a2      	str	r2, [r4, #40]	; 0x28
 8003792:	42a3      	cmp	r3, r4
 8003794:	bf04      	itt	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	61a3      	streq	r3, [r4, #24]
 800379a:	4620      	mov	r0, r4
 800379c:	f000 f820 	bl	80037e0 <__sfp>
 80037a0:	6060      	str	r0, [r4, #4]
 80037a2:	4620      	mov	r0, r4
 80037a4:	f000 f81c 	bl	80037e0 <__sfp>
 80037a8:	60a0      	str	r0, [r4, #8]
 80037aa:	4620      	mov	r0, r4
 80037ac:	f000 f818 	bl	80037e0 <__sfp>
 80037b0:	2200      	movs	r2, #0
 80037b2:	60e0      	str	r0, [r4, #12]
 80037b4:	2104      	movs	r1, #4
 80037b6:	6860      	ldr	r0, [r4, #4]
 80037b8:	f7ff ff82 	bl	80036c0 <std>
 80037bc:	68a0      	ldr	r0, [r4, #8]
 80037be:	2201      	movs	r2, #1
 80037c0:	2109      	movs	r1, #9
 80037c2:	f7ff ff7d 	bl	80036c0 <std>
 80037c6:	68e0      	ldr	r0, [r4, #12]
 80037c8:	2202      	movs	r2, #2
 80037ca:	2112      	movs	r1, #18
 80037cc:	f7ff ff78 	bl	80036c0 <std>
 80037d0:	2301      	movs	r3, #1
 80037d2:	61a3      	str	r3, [r4, #24]
 80037d4:	e7d2      	b.n	800377c <__sinit+0xc>
 80037d6:	bf00      	nop
 80037d8:	08004a90 	.word	0x08004a90
 80037dc:	08003709 	.word	0x08003709

080037e0 <__sfp>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	4607      	mov	r7, r0
 80037e4:	f7ff ffac 	bl	8003740 <__sfp_lock_acquire>
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <__sfp+0x84>)
 80037ea:	681e      	ldr	r6, [r3, #0]
 80037ec:	69b3      	ldr	r3, [r6, #24]
 80037ee:	b913      	cbnz	r3, 80037f6 <__sfp+0x16>
 80037f0:	4630      	mov	r0, r6
 80037f2:	f7ff ffbd 	bl	8003770 <__sinit>
 80037f6:	3648      	adds	r6, #72	; 0x48
 80037f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	d503      	bpl.n	8003808 <__sfp+0x28>
 8003800:	6833      	ldr	r3, [r6, #0]
 8003802:	b30b      	cbz	r3, 8003848 <__sfp+0x68>
 8003804:	6836      	ldr	r6, [r6, #0]
 8003806:	e7f7      	b.n	80037f8 <__sfp+0x18>
 8003808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800380c:	b9d5      	cbnz	r5, 8003844 <__sfp+0x64>
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <__sfp+0x88>)
 8003810:	60e3      	str	r3, [r4, #12]
 8003812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003816:	6665      	str	r5, [r4, #100]	; 0x64
 8003818:	f000 f847 	bl	80038aa <__retarget_lock_init_recursive>
 800381c:	f7ff ff96 	bl	800374c <__sfp_lock_release>
 8003820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003828:	6025      	str	r5, [r4, #0]
 800382a:	61a5      	str	r5, [r4, #24]
 800382c:	2208      	movs	r2, #8
 800382e:	4629      	mov	r1, r5
 8003830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003834:	f7ff ff04 	bl	8003640 <memset>
 8003838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800383c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003840:	4620      	mov	r0, r4
 8003842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003844:	3468      	adds	r4, #104	; 0x68
 8003846:	e7d9      	b.n	80037fc <__sfp+0x1c>
 8003848:	2104      	movs	r1, #4
 800384a:	4638      	mov	r0, r7
 800384c:	f7ff ff62 	bl	8003714 <__sfmoreglue>
 8003850:	4604      	mov	r4, r0
 8003852:	6030      	str	r0, [r6, #0]
 8003854:	2800      	cmp	r0, #0
 8003856:	d1d5      	bne.n	8003804 <__sfp+0x24>
 8003858:	f7ff ff78 	bl	800374c <__sfp_lock_release>
 800385c:	230c      	movs	r3, #12
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	e7ee      	b.n	8003840 <__sfp+0x60>
 8003862:	bf00      	nop
 8003864:	08004a90 	.word	0x08004a90
 8003868:	ffff0001 	.word	0xffff0001

0800386c <_fwalk_reent>:
 800386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003870:	4606      	mov	r6, r0
 8003872:	4688      	mov	r8, r1
 8003874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003878:	2700      	movs	r7, #0
 800387a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800387e:	f1b9 0901 	subs.w	r9, r9, #1
 8003882:	d505      	bpl.n	8003890 <_fwalk_reent+0x24>
 8003884:	6824      	ldr	r4, [r4, #0]
 8003886:	2c00      	cmp	r4, #0
 8003888:	d1f7      	bne.n	800387a <_fwalk_reent+0xe>
 800388a:	4638      	mov	r0, r7
 800388c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003890:	89ab      	ldrh	r3, [r5, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d907      	bls.n	80038a6 <_fwalk_reent+0x3a>
 8003896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800389a:	3301      	adds	r3, #1
 800389c:	d003      	beq.n	80038a6 <_fwalk_reent+0x3a>
 800389e:	4629      	mov	r1, r5
 80038a0:	4630      	mov	r0, r6
 80038a2:	47c0      	blx	r8
 80038a4:	4307      	orrs	r7, r0
 80038a6:	3568      	adds	r5, #104	; 0x68
 80038a8:	e7e9      	b.n	800387e <_fwalk_reent+0x12>

080038aa <__retarget_lock_init_recursive>:
 80038aa:	4770      	bx	lr

080038ac <__retarget_lock_acquire_recursive>:
 80038ac:	4770      	bx	lr

080038ae <__retarget_lock_release_recursive>:
 80038ae:	4770      	bx	lr

080038b0 <sbrk_aligned>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4e0e      	ldr	r6, [pc, #56]	; (80038ec <sbrk_aligned+0x3c>)
 80038b4:	460c      	mov	r4, r1
 80038b6:	6831      	ldr	r1, [r6, #0]
 80038b8:	4605      	mov	r5, r0
 80038ba:	b911      	cbnz	r1, 80038c2 <sbrk_aligned+0x12>
 80038bc:	f000 fcd6 	bl	800426c <_sbrk_r>
 80038c0:	6030      	str	r0, [r6, #0]
 80038c2:	4621      	mov	r1, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	f000 fcd1 	bl	800426c <_sbrk_r>
 80038ca:	1c43      	adds	r3, r0, #1
 80038cc:	d00a      	beq.n	80038e4 <sbrk_aligned+0x34>
 80038ce:	1cc4      	adds	r4, r0, #3
 80038d0:	f024 0403 	bic.w	r4, r4, #3
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d007      	beq.n	80038e8 <sbrk_aligned+0x38>
 80038d8:	1a21      	subs	r1, r4, r0
 80038da:	4628      	mov	r0, r5
 80038dc:	f000 fcc6 	bl	800426c <_sbrk_r>
 80038e0:	3001      	adds	r0, #1
 80038e2:	d101      	bne.n	80038e8 <sbrk_aligned+0x38>
 80038e4:	f04f 34ff 	mov.w	r4, #4294967295
 80038e8:	4620      	mov	r0, r4
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	20000134 	.word	0x20000134

080038f0 <_malloc_r>:
 80038f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f4:	1ccd      	adds	r5, r1, #3
 80038f6:	f025 0503 	bic.w	r5, r5, #3
 80038fa:	3508      	adds	r5, #8
 80038fc:	2d0c      	cmp	r5, #12
 80038fe:	bf38      	it	cc
 8003900:	250c      	movcc	r5, #12
 8003902:	2d00      	cmp	r5, #0
 8003904:	4607      	mov	r7, r0
 8003906:	db01      	blt.n	800390c <_malloc_r+0x1c>
 8003908:	42a9      	cmp	r1, r5
 800390a:	d905      	bls.n	8003918 <_malloc_r+0x28>
 800390c:	230c      	movs	r3, #12
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	2600      	movs	r6, #0
 8003912:	4630      	mov	r0, r6
 8003914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003918:	4e2e      	ldr	r6, [pc, #184]	; (80039d4 <_malloc_r+0xe4>)
 800391a:	f000 ff3f 	bl	800479c <__malloc_lock>
 800391e:	6833      	ldr	r3, [r6, #0]
 8003920:	461c      	mov	r4, r3
 8003922:	bb34      	cbnz	r4, 8003972 <_malloc_r+0x82>
 8003924:	4629      	mov	r1, r5
 8003926:	4638      	mov	r0, r7
 8003928:	f7ff ffc2 	bl	80038b0 <sbrk_aligned>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	4604      	mov	r4, r0
 8003930:	d14d      	bne.n	80039ce <_malloc_r+0xde>
 8003932:	6834      	ldr	r4, [r6, #0]
 8003934:	4626      	mov	r6, r4
 8003936:	2e00      	cmp	r6, #0
 8003938:	d140      	bne.n	80039bc <_malloc_r+0xcc>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	4631      	mov	r1, r6
 800393e:	4638      	mov	r0, r7
 8003940:	eb04 0803 	add.w	r8, r4, r3
 8003944:	f000 fc92 	bl	800426c <_sbrk_r>
 8003948:	4580      	cmp	r8, r0
 800394a:	d13a      	bne.n	80039c2 <_malloc_r+0xd2>
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	3503      	adds	r5, #3
 8003950:	1a6d      	subs	r5, r5, r1
 8003952:	f025 0503 	bic.w	r5, r5, #3
 8003956:	3508      	adds	r5, #8
 8003958:	2d0c      	cmp	r5, #12
 800395a:	bf38      	it	cc
 800395c:	250c      	movcc	r5, #12
 800395e:	4629      	mov	r1, r5
 8003960:	4638      	mov	r0, r7
 8003962:	f7ff ffa5 	bl	80038b0 <sbrk_aligned>
 8003966:	3001      	adds	r0, #1
 8003968:	d02b      	beq.n	80039c2 <_malloc_r+0xd2>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	442b      	add	r3, r5
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	e00e      	b.n	8003990 <_malloc_r+0xa0>
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	1b52      	subs	r2, r2, r5
 8003976:	d41e      	bmi.n	80039b6 <_malloc_r+0xc6>
 8003978:	2a0b      	cmp	r2, #11
 800397a:	d916      	bls.n	80039aa <_malloc_r+0xba>
 800397c:	1961      	adds	r1, r4, r5
 800397e:	42a3      	cmp	r3, r4
 8003980:	6025      	str	r5, [r4, #0]
 8003982:	bf18      	it	ne
 8003984:	6059      	strne	r1, [r3, #4]
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	bf08      	it	eq
 800398a:	6031      	streq	r1, [r6, #0]
 800398c:	5162      	str	r2, [r4, r5]
 800398e:	604b      	str	r3, [r1, #4]
 8003990:	4638      	mov	r0, r7
 8003992:	f104 060b 	add.w	r6, r4, #11
 8003996:	f000 ff07 	bl	80047a8 <__malloc_unlock>
 800399a:	f026 0607 	bic.w	r6, r6, #7
 800399e:	1d23      	adds	r3, r4, #4
 80039a0:	1af2      	subs	r2, r6, r3
 80039a2:	d0b6      	beq.n	8003912 <_malloc_r+0x22>
 80039a4:	1b9b      	subs	r3, r3, r6
 80039a6:	50a3      	str	r3, [r4, r2]
 80039a8:	e7b3      	b.n	8003912 <_malloc_r+0x22>
 80039aa:	6862      	ldr	r2, [r4, #4]
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	bf0c      	ite	eq
 80039b0:	6032      	streq	r2, [r6, #0]
 80039b2:	605a      	strne	r2, [r3, #4]
 80039b4:	e7ec      	b.n	8003990 <_malloc_r+0xa0>
 80039b6:	4623      	mov	r3, r4
 80039b8:	6864      	ldr	r4, [r4, #4]
 80039ba:	e7b2      	b.n	8003922 <_malloc_r+0x32>
 80039bc:	4634      	mov	r4, r6
 80039be:	6876      	ldr	r6, [r6, #4]
 80039c0:	e7b9      	b.n	8003936 <_malloc_r+0x46>
 80039c2:	230c      	movs	r3, #12
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4638      	mov	r0, r7
 80039c8:	f000 feee 	bl	80047a8 <__malloc_unlock>
 80039cc:	e7a1      	b.n	8003912 <_malloc_r+0x22>
 80039ce:	6025      	str	r5, [r4, #0]
 80039d0:	e7de      	b.n	8003990 <_malloc_r+0xa0>
 80039d2:	bf00      	nop
 80039d4:	20000130 	.word	0x20000130

080039d8 <__ssputs_r>:
 80039d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	688e      	ldr	r6, [r1, #8]
 80039de:	429e      	cmp	r6, r3
 80039e0:	4682      	mov	sl, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4690      	mov	r8, r2
 80039e6:	461f      	mov	r7, r3
 80039e8:	d838      	bhi.n	8003a5c <__ssputs_r+0x84>
 80039ea:	898a      	ldrh	r2, [r1, #12]
 80039ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039f0:	d032      	beq.n	8003a58 <__ssputs_r+0x80>
 80039f2:	6825      	ldr	r5, [r4, #0]
 80039f4:	6909      	ldr	r1, [r1, #16]
 80039f6:	eba5 0901 	sub.w	r9, r5, r1
 80039fa:	6965      	ldr	r5, [r4, #20]
 80039fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a04:	3301      	adds	r3, #1
 8003a06:	444b      	add	r3, r9
 8003a08:	106d      	asrs	r5, r5, #1
 8003a0a:	429d      	cmp	r5, r3
 8003a0c:	bf38      	it	cc
 8003a0e:	461d      	movcc	r5, r3
 8003a10:	0553      	lsls	r3, r2, #21
 8003a12:	d531      	bpl.n	8003a78 <__ssputs_r+0xa0>
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7ff ff6b 	bl	80038f0 <_malloc_r>
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	b950      	cbnz	r0, 8003a34 <__ssputs_r+0x5c>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	f8ca 3000 	str.w	r3, [sl]
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	464a      	mov	r2, r9
 8003a38:	f000 fe88 	bl	800474c <memcpy>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	6126      	str	r6, [r4, #16]
 8003a4a:	6165      	str	r5, [r4, #20]
 8003a4c:	444e      	add	r6, r9
 8003a4e:	eba5 0509 	sub.w	r5, r5, r9
 8003a52:	6026      	str	r6, [r4, #0]
 8003a54:	60a5      	str	r5, [r4, #8]
 8003a56:	463e      	mov	r6, r7
 8003a58:	42be      	cmp	r6, r7
 8003a5a:	d900      	bls.n	8003a5e <__ssputs_r+0x86>
 8003a5c:	463e      	mov	r6, r7
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	4632      	mov	r2, r6
 8003a62:	4641      	mov	r1, r8
 8003a64:	f000 fe80 	bl	8004768 <memmove>
 8003a68:	68a3      	ldr	r3, [r4, #8]
 8003a6a:	1b9b      	subs	r3, r3, r6
 8003a6c:	60a3      	str	r3, [r4, #8]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	4433      	add	r3, r6
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	2000      	movs	r0, #0
 8003a76:	e7db      	b.n	8003a30 <__ssputs_r+0x58>
 8003a78:	462a      	mov	r2, r5
 8003a7a:	f000 fee7 	bl	800484c <_realloc_r>
 8003a7e:	4606      	mov	r6, r0
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d1e1      	bne.n	8003a48 <__ssputs_r+0x70>
 8003a84:	6921      	ldr	r1, [r4, #16]
 8003a86:	4650      	mov	r0, sl
 8003a88:	f000 fe94 	bl	80047b4 <_free_r>
 8003a8c:	e7c7      	b.n	8003a1e <__ssputs_r+0x46>
	...

08003a90 <_svfiprintf_r>:
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	4698      	mov	r8, r3
 8003a96:	898b      	ldrh	r3, [r1, #12]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	b09d      	sub	sp, #116	; 0x74
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	d50e      	bpl.n	8003ac2 <_svfiprintf_r+0x32>
 8003aa4:	690b      	ldr	r3, [r1, #16]
 8003aa6:	b963      	cbnz	r3, 8003ac2 <_svfiprintf_r+0x32>
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	f7ff ff21 	bl	80038f0 <_malloc_r>
 8003aae:	6028      	str	r0, [r5, #0]
 8003ab0:	6128      	str	r0, [r5, #16]
 8003ab2:	b920      	cbnz	r0, 8003abe <_svfiprintf_r+0x2e>
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	e0d1      	b.n	8003c62 <_svfiprintf_r+0x1d2>
 8003abe:	2340      	movs	r3, #64	; 0x40
 8003ac0:	616b      	str	r3, [r5, #20]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad0:	2330      	movs	r3, #48	; 0x30
 8003ad2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c7c <_svfiprintf_r+0x1ec>
 8003ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ada:	f04f 0901 	mov.w	r9, #1
 8003ade:	4623      	mov	r3, r4
 8003ae0:	469a      	mov	sl, r3
 8003ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae6:	b10a      	cbz	r2, 8003aec <_svfiprintf_r+0x5c>
 8003ae8:	2a25      	cmp	r2, #37	; 0x25
 8003aea:	d1f9      	bne.n	8003ae0 <_svfiprintf_r+0x50>
 8003aec:	ebba 0b04 	subs.w	fp, sl, r4
 8003af0:	d00b      	beq.n	8003b0a <_svfiprintf_r+0x7a>
 8003af2:	465b      	mov	r3, fp
 8003af4:	4622      	mov	r2, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7ff ff6d 	bl	80039d8 <__ssputs_r>
 8003afe:	3001      	adds	r0, #1
 8003b00:	f000 80aa 	beq.w	8003c58 <_svfiprintf_r+0x1c8>
 8003b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b06:	445a      	add	r2, fp
 8003b08:	9209      	str	r2, [sp, #36]	; 0x24
 8003b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a2 	beq.w	8003c58 <_svfiprintf_r+0x1c8>
 8003b14:	2300      	movs	r3, #0
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b1e:	f10a 0a01 	add.w	sl, sl, #1
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	9307      	str	r3, [sp, #28]
 8003b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b2c:	4654      	mov	r4, sl
 8003b2e:	2205      	movs	r2, #5
 8003b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b34:	4851      	ldr	r0, [pc, #324]	; (8003c7c <_svfiprintf_r+0x1ec>)
 8003b36:	f7fc fb53 	bl	80001e0 <memchr>
 8003b3a:	9a04      	ldr	r2, [sp, #16]
 8003b3c:	b9d8      	cbnz	r0, 8003b76 <_svfiprintf_r+0xe6>
 8003b3e:	06d0      	lsls	r0, r2, #27
 8003b40:	bf44      	itt	mi
 8003b42:	2320      	movmi	r3, #32
 8003b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b48:	0711      	lsls	r1, r2, #28
 8003b4a:	bf44      	itt	mi
 8003b4c:	232b      	movmi	r3, #43	; 0x2b
 8003b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b52:	f89a 3000 	ldrb.w	r3, [sl]
 8003b56:	2b2a      	cmp	r3, #42	; 0x2a
 8003b58:	d015      	beq.n	8003b86 <_svfiprintf_r+0xf6>
 8003b5a:	9a07      	ldr	r2, [sp, #28]
 8003b5c:	4654      	mov	r4, sl
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f04f 0c0a 	mov.w	ip, #10
 8003b64:	4621      	mov	r1, r4
 8003b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b6a:	3b30      	subs	r3, #48	; 0x30
 8003b6c:	2b09      	cmp	r3, #9
 8003b6e:	d94e      	bls.n	8003c0e <_svfiprintf_r+0x17e>
 8003b70:	b1b0      	cbz	r0, 8003ba0 <_svfiprintf_r+0x110>
 8003b72:	9207      	str	r2, [sp, #28]
 8003b74:	e014      	b.n	8003ba0 <_svfiprintf_r+0x110>
 8003b76:	eba0 0308 	sub.w	r3, r0, r8
 8003b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	46a2      	mov	sl, r4
 8003b84:	e7d2      	b.n	8003b2c <_svfiprintf_r+0x9c>
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	1d19      	adds	r1, r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	9103      	str	r1, [sp, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfbb      	ittet	lt
 8003b92:	425b      	neglt	r3, r3
 8003b94:	f042 0202 	orrlt.w	r2, r2, #2
 8003b98:	9307      	strge	r3, [sp, #28]
 8003b9a:	9307      	strlt	r3, [sp, #28]
 8003b9c:	bfb8      	it	lt
 8003b9e:	9204      	strlt	r2, [sp, #16]
 8003ba0:	7823      	ldrb	r3, [r4, #0]
 8003ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ba4:	d10c      	bne.n	8003bc0 <_svfiprintf_r+0x130>
 8003ba6:	7863      	ldrb	r3, [r4, #1]
 8003ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8003baa:	d135      	bne.n	8003c18 <_svfiprintf_r+0x188>
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	9203      	str	r2, [sp, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bfb8      	it	lt
 8003bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bbc:	3402      	adds	r4, #2
 8003bbe:	9305      	str	r3, [sp, #20]
 8003bc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c8c <_svfiprintf_r+0x1fc>
 8003bc4:	7821      	ldrb	r1, [r4, #0]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4650      	mov	r0, sl
 8003bca:	f7fc fb09 	bl	80001e0 <memchr>
 8003bce:	b140      	cbz	r0, 8003be2 <_svfiprintf_r+0x152>
 8003bd0:	2340      	movs	r3, #64	; 0x40
 8003bd2:	eba0 000a 	sub.w	r0, r0, sl
 8003bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8003bda:	9b04      	ldr	r3, [sp, #16]
 8003bdc:	4303      	orrs	r3, r0
 8003bde:	3401      	adds	r4, #1
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be6:	4826      	ldr	r0, [pc, #152]	; (8003c80 <_svfiprintf_r+0x1f0>)
 8003be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bec:	2206      	movs	r2, #6
 8003bee:	f7fc faf7 	bl	80001e0 <memchr>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d038      	beq.n	8003c68 <_svfiprintf_r+0x1d8>
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <_svfiprintf_r+0x1f4>)
 8003bf8:	bb1b      	cbnz	r3, 8003c42 <_svfiprintf_r+0x1b2>
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	3307      	adds	r3, #7
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	3308      	adds	r3, #8
 8003c04:	9303      	str	r3, [sp, #12]
 8003c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c08:	4433      	add	r3, r6
 8003c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0c:	e767      	b.n	8003ade <_svfiprintf_r+0x4e>
 8003c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c12:	460c      	mov	r4, r1
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7a5      	b.n	8003b64 <_svfiprintf_r+0xd4>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	3401      	adds	r4, #1
 8003c1c:	9305      	str	r3, [sp, #20]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f04f 0c0a 	mov.w	ip, #10
 8003c24:	4620      	mov	r0, r4
 8003c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c2a:	3a30      	subs	r2, #48	; 0x30
 8003c2c:	2a09      	cmp	r2, #9
 8003c2e:	d903      	bls.n	8003c38 <_svfiprintf_r+0x1a8>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0c5      	beq.n	8003bc0 <_svfiprintf_r+0x130>
 8003c34:	9105      	str	r1, [sp, #20]
 8003c36:	e7c3      	b.n	8003bc0 <_svfiprintf_r+0x130>
 8003c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e7f0      	b.n	8003c24 <_svfiprintf_r+0x194>
 8003c42:	ab03      	add	r3, sp, #12
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	462a      	mov	r2, r5
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <_svfiprintf_r+0x1f8>)
 8003c4a:	a904      	add	r1, sp, #16
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f3af 8000 	nop.w
 8003c52:	1c42      	adds	r2, r0, #1
 8003c54:	4606      	mov	r6, r0
 8003c56:	d1d6      	bne.n	8003c06 <_svfiprintf_r+0x176>
 8003c58:	89ab      	ldrh	r3, [r5, #12]
 8003c5a:	065b      	lsls	r3, r3, #25
 8003c5c:	f53f af2c 	bmi.w	8003ab8 <_svfiprintf_r+0x28>
 8003c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c62:	b01d      	add	sp, #116	; 0x74
 8003c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c68:	ab03      	add	r3, sp, #12
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	462a      	mov	r2, r5
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <_svfiprintf_r+0x1f8>)
 8003c70:	a904      	add	r1, sp, #16
 8003c72:	4638      	mov	r0, r7
 8003c74:	f000 f9d4 	bl	8004020 <_printf_i>
 8003c78:	e7eb      	b.n	8003c52 <_svfiprintf_r+0x1c2>
 8003c7a:	bf00      	nop
 8003c7c:	08004af4 	.word	0x08004af4
 8003c80:	08004afe 	.word	0x08004afe
 8003c84:	00000000 	.word	0x00000000
 8003c88:	080039d9 	.word	0x080039d9
 8003c8c:	08004afa 	.word	0x08004afa

08003c90 <__sfputc_r>:
 8003c90:	6893      	ldr	r3, [r2, #8]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	b410      	push	{r4}
 8003c98:	6093      	str	r3, [r2, #8]
 8003c9a:	da08      	bge.n	8003cae <__sfputc_r+0x1e>
 8003c9c:	6994      	ldr	r4, [r2, #24]
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	db01      	blt.n	8003ca6 <__sfputc_r+0x16>
 8003ca2:	290a      	cmp	r1, #10
 8003ca4:	d103      	bne.n	8003cae <__sfputc_r+0x1e>
 8003ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003caa:	f000 bb33 	b.w	8004314 <__swbuf_r>
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	1c58      	adds	r0, r3, #1
 8003cb2:	6010      	str	r0, [r2, #0]
 8003cb4:	7019      	strb	r1, [r3, #0]
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <__sfputs_r>:
 8003cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	460f      	mov	r7, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	18d5      	adds	r5, r2, r3
 8003cc8:	42ac      	cmp	r4, r5
 8003cca:	d101      	bne.n	8003cd0 <__sfputs_r+0x12>
 8003ccc:	2000      	movs	r0, #0
 8003cce:	e007      	b.n	8003ce0 <__sfputs_r+0x22>
 8003cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd4:	463a      	mov	r2, r7
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ffda 	bl	8003c90 <__sfputc_r>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d1f3      	bne.n	8003cc8 <__sfputs_r+0xa>
 8003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ce4 <_vfiprintf_r>:
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	460d      	mov	r5, r1
 8003cea:	b09d      	sub	sp, #116	; 0x74
 8003cec:	4614      	mov	r4, r2
 8003cee:	4698      	mov	r8, r3
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	b118      	cbz	r0, 8003cfc <_vfiprintf_r+0x18>
 8003cf4:	6983      	ldr	r3, [r0, #24]
 8003cf6:	b90b      	cbnz	r3, 8003cfc <_vfiprintf_r+0x18>
 8003cf8:	f7ff fd3a 	bl	8003770 <__sinit>
 8003cfc:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <_vfiprintf_r+0x240>)
 8003cfe:	429d      	cmp	r5, r3
 8003d00:	d11b      	bne.n	8003d3a <_vfiprintf_r+0x56>
 8003d02:	6875      	ldr	r5, [r6, #4]
 8003d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d06:	07d9      	lsls	r1, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_vfiprintf_r+0x32>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	059a      	lsls	r2, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_vfiprintf_r+0x32>
 8003d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d12:	f7ff fdcb 	bl	80038ac <__retarget_lock_acquire_recursive>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	d501      	bpl.n	8003d20 <_vfiprintf_r+0x3c>
 8003d1c:	692b      	ldr	r3, [r5, #16]
 8003d1e:	b9eb      	cbnz	r3, 8003d5c <_vfiprintf_r+0x78>
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 fb5a 	bl	80043dc <__swsetup_r>
 8003d28:	b1c0      	cbz	r0, 8003d5c <_vfiprintf_r+0x78>
 8003d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d2c:	07dc      	lsls	r4, r3, #31
 8003d2e:	d50e      	bpl.n	8003d4e <_vfiprintf_r+0x6a>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	b01d      	add	sp, #116	; 0x74
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <_vfiprintf_r+0x244>)
 8003d3c:	429d      	cmp	r5, r3
 8003d3e:	d101      	bne.n	8003d44 <_vfiprintf_r+0x60>
 8003d40:	68b5      	ldr	r5, [r6, #8]
 8003d42:	e7df      	b.n	8003d04 <_vfiprintf_r+0x20>
 8003d44:	4b79      	ldr	r3, [pc, #484]	; (8003f2c <_vfiprintf_r+0x248>)
 8003d46:	429d      	cmp	r5, r3
 8003d48:	bf08      	it	eq
 8003d4a:	68f5      	ldreq	r5, [r6, #12]
 8003d4c:	e7da      	b.n	8003d04 <_vfiprintf_r+0x20>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	0598      	lsls	r0, r3, #22
 8003d52:	d4ed      	bmi.n	8003d30 <_vfiprintf_r+0x4c>
 8003d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d56:	f7ff fdaa 	bl	80038ae <__retarget_lock_release_recursive>
 8003d5a:	e7e9      	b.n	8003d30 <_vfiprintf_r+0x4c>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d60:	2320      	movs	r3, #32
 8003d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d6a:	2330      	movs	r3, #48	; 0x30
 8003d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f30 <_vfiprintf_r+0x24c>
 8003d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d74:	f04f 0901 	mov.w	r9, #1
 8003d78:	4623      	mov	r3, r4
 8003d7a:	469a      	mov	sl, r3
 8003d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d80:	b10a      	cbz	r2, 8003d86 <_vfiprintf_r+0xa2>
 8003d82:	2a25      	cmp	r2, #37	; 0x25
 8003d84:	d1f9      	bne.n	8003d7a <_vfiprintf_r+0x96>
 8003d86:	ebba 0b04 	subs.w	fp, sl, r4
 8003d8a:	d00b      	beq.n	8003da4 <_vfiprintf_r+0xc0>
 8003d8c:	465b      	mov	r3, fp
 8003d8e:	4622      	mov	r2, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	4630      	mov	r0, r6
 8003d94:	f7ff ff93 	bl	8003cbe <__sfputs_r>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f000 80aa 	beq.w	8003ef2 <_vfiprintf_r+0x20e>
 8003d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003da0:	445a      	add	r2, fp
 8003da2:	9209      	str	r2, [sp, #36]	; 0x24
 8003da4:	f89a 3000 	ldrb.w	r3, [sl]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a2 	beq.w	8003ef2 <_vfiprintf_r+0x20e>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db8:	f10a 0a01 	add.w	sl, sl, #1
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	9307      	str	r3, [sp, #28]
 8003dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc6:	4654      	mov	r4, sl
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dce:	4858      	ldr	r0, [pc, #352]	; (8003f30 <_vfiprintf_r+0x24c>)
 8003dd0:	f7fc fa06 	bl	80001e0 <memchr>
 8003dd4:	9a04      	ldr	r2, [sp, #16]
 8003dd6:	b9d8      	cbnz	r0, 8003e10 <_vfiprintf_r+0x12c>
 8003dd8:	06d1      	lsls	r1, r2, #27
 8003dda:	bf44      	itt	mi
 8003ddc:	2320      	movmi	r3, #32
 8003dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de2:	0713      	lsls	r3, r2, #28
 8003de4:	bf44      	itt	mi
 8003de6:	232b      	movmi	r3, #43	; 0x2b
 8003de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dec:	f89a 3000 	ldrb.w	r3, [sl]
 8003df0:	2b2a      	cmp	r3, #42	; 0x2a
 8003df2:	d015      	beq.n	8003e20 <_vfiprintf_r+0x13c>
 8003df4:	9a07      	ldr	r2, [sp, #28]
 8003df6:	4654      	mov	r4, sl
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f04f 0c0a 	mov.w	ip, #10
 8003dfe:	4621      	mov	r1, r4
 8003e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e04:	3b30      	subs	r3, #48	; 0x30
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	d94e      	bls.n	8003ea8 <_vfiprintf_r+0x1c4>
 8003e0a:	b1b0      	cbz	r0, 8003e3a <_vfiprintf_r+0x156>
 8003e0c:	9207      	str	r2, [sp, #28]
 8003e0e:	e014      	b.n	8003e3a <_vfiprintf_r+0x156>
 8003e10:	eba0 0308 	sub.w	r3, r0, r8
 8003e14:	fa09 f303 	lsl.w	r3, r9, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	e7d2      	b.n	8003dc6 <_vfiprintf_r+0xe2>
 8003e20:	9b03      	ldr	r3, [sp, #12]
 8003e22:	1d19      	adds	r1, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	9103      	str	r1, [sp, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bfbb      	ittet	lt
 8003e2c:	425b      	neglt	r3, r3
 8003e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e32:	9307      	strge	r3, [sp, #28]
 8003e34:	9307      	strlt	r3, [sp, #28]
 8003e36:	bfb8      	it	lt
 8003e38:	9204      	strlt	r2, [sp, #16]
 8003e3a:	7823      	ldrb	r3, [r4, #0]
 8003e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e3e:	d10c      	bne.n	8003e5a <_vfiprintf_r+0x176>
 8003e40:	7863      	ldrb	r3, [r4, #1]
 8003e42:	2b2a      	cmp	r3, #42	; 0x2a
 8003e44:	d135      	bne.n	8003eb2 <_vfiprintf_r+0x1ce>
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	1d1a      	adds	r2, r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	9203      	str	r2, [sp, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bfb8      	it	lt
 8003e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e56:	3402      	adds	r4, #2
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f40 <_vfiprintf_r+0x25c>
 8003e5e:	7821      	ldrb	r1, [r4, #0]
 8003e60:	2203      	movs	r2, #3
 8003e62:	4650      	mov	r0, sl
 8003e64:	f7fc f9bc 	bl	80001e0 <memchr>
 8003e68:	b140      	cbz	r0, 8003e7c <_vfiprintf_r+0x198>
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	eba0 000a 	sub.w	r0, r0, sl
 8003e70:	fa03 f000 	lsl.w	r0, r3, r0
 8003e74:	9b04      	ldr	r3, [sp, #16]
 8003e76:	4303      	orrs	r3, r0
 8003e78:	3401      	adds	r4, #1
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e80:	482c      	ldr	r0, [pc, #176]	; (8003f34 <_vfiprintf_r+0x250>)
 8003e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e86:	2206      	movs	r2, #6
 8003e88:	f7fc f9aa 	bl	80001e0 <memchr>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d03f      	beq.n	8003f10 <_vfiprintf_r+0x22c>
 8003e90:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <_vfiprintf_r+0x254>)
 8003e92:	bb1b      	cbnz	r3, 8003edc <_vfiprintf_r+0x1f8>
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	3307      	adds	r3, #7
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea2:	443b      	add	r3, r7
 8003ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea6:	e767      	b.n	8003d78 <_vfiprintf_r+0x94>
 8003ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eac:	460c      	mov	r4, r1
 8003eae:	2001      	movs	r0, #1
 8003eb0:	e7a5      	b.n	8003dfe <_vfiprintf_r+0x11a>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	3401      	adds	r4, #1
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f04f 0c0a 	mov.w	ip, #10
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec4:	3a30      	subs	r2, #48	; 0x30
 8003ec6:	2a09      	cmp	r2, #9
 8003ec8:	d903      	bls.n	8003ed2 <_vfiprintf_r+0x1ee>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0c5      	beq.n	8003e5a <_vfiprintf_r+0x176>
 8003ece:	9105      	str	r1, [sp, #20]
 8003ed0:	e7c3      	b.n	8003e5a <_vfiprintf_r+0x176>
 8003ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e7f0      	b.n	8003ebe <_vfiprintf_r+0x1da>
 8003edc:	ab03      	add	r3, sp, #12
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <_vfiprintf_r+0x258>)
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f3af 8000 	nop.w
 8003eec:	4607      	mov	r7, r0
 8003eee:	1c78      	adds	r0, r7, #1
 8003ef0:	d1d6      	bne.n	8003ea0 <_vfiprintf_r+0x1bc>
 8003ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ef4:	07d9      	lsls	r1, r3, #31
 8003ef6:	d405      	bmi.n	8003f04 <_vfiprintf_r+0x220>
 8003ef8:	89ab      	ldrh	r3, [r5, #12]
 8003efa:	059a      	lsls	r2, r3, #22
 8003efc:	d402      	bmi.n	8003f04 <_vfiprintf_r+0x220>
 8003efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f00:	f7ff fcd5 	bl	80038ae <__retarget_lock_release_recursive>
 8003f04:	89ab      	ldrh	r3, [r5, #12]
 8003f06:	065b      	lsls	r3, r3, #25
 8003f08:	f53f af12 	bmi.w	8003d30 <_vfiprintf_r+0x4c>
 8003f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f0e:	e711      	b.n	8003d34 <_vfiprintf_r+0x50>
 8003f10:	ab03      	add	r3, sp, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	462a      	mov	r2, r5
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <_vfiprintf_r+0x258>)
 8003f18:	a904      	add	r1, sp, #16
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f880 	bl	8004020 <_printf_i>
 8003f20:	e7e4      	b.n	8003eec <_vfiprintf_r+0x208>
 8003f22:	bf00      	nop
 8003f24:	08004ab4 	.word	0x08004ab4
 8003f28:	08004ad4 	.word	0x08004ad4
 8003f2c:	08004a94 	.word	0x08004a94
 8003f30:	08004af4 	.word	0x08004af4
 8003f34:	08004afe 	.word	0x08004afe
 8003f38:	00000000 	.word	0x00000000
 8003f3c:	08003cbf 	.word	0x08003cbf
 8003f40:	08004afa 	.word	0x08004afa

08003f44 <_printf_common>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	4616      	mov	r6, r2
 8003f4a:	4699      	mov	r9, r3
 8003f4c:	688a      	ldr	r2, [r1, #8]
 8003f4e:	690b      	ldr	r3, [r1, #16]
 8003f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bfb8      	it	lt
 8003f58:	4613      	movlt	r3, r2
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f60:	4607      	mov	r7, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	b10a      	cbz	r2, 8003f6a <_printf_common+0x26>
 8003f66:	3301      	adds	r3, #1
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0699      	lsls	r1, r3, #26
 8003f6e:	bf42      	ittt	mi
 8003f70:	6833      	ldrmi	r3, [r6, #0]
 8003f72:	3302      	addmi	r3, #2
 8003f74:	6033      	strmi	r3, [r6, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	f015 0506 	ands.w	r5, r5, #6
 8003f7c:	d106      	bne.n	8003f8c <_printf_common+0x48>
 8003f7e:	f104 0a19 	add.w	sl, r4, #25
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	6832      	ldr	r2, [r6, #0]
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	dc26      	bgt.n	8003fda <_printf_common+0x96>
 8003f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f90:	1e13      	subs	r3, r2, #0
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	bf18      	it	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	0692      	lsls	r2, r2, #26
 8003f9a:	d42b      	bmi.n	8003ff4 <_printf_common+0xb0>
 8003f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	47c0      	blx	r8
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d01e      	beq.n	8003fe8 <_printf_common+0xa4>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	68e5      	ldr	r5, [r4, #12]
 8003fae:	6832      	ldr	r2, [r6, #0]
 8003fb0:	f003 0306 	and.w	r3, r3, #6
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	bf08      	it	eq
 8003fb8:	1aad      	subeq	r5, r5, r2
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	bf0c      	ite	eq
 8003fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc4:	2500      	movne	r5, #0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bfc4      	itt	gt
 8003fca:	1a9b      	subgt	r3, r3, r2
 8003fcc:	18ed      	addgt	r5, r5, r3
 8003fce:	2600      	movs	r6, #0
 8003fd0:	341a      	adds	r4, #26
 8003fd2:	42b5      	cmp	r5, r6
 8003fd4:	d11a      	bne.n	800400c <_printf_common+0xc8>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e008      	b.n	8003fec <_printf_common+0xa8>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4652      	mov	r2, sl
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	47c0      	blx	r8
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_printf_common+0xac>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	e7c6      	b.n	8003f82 <_printf_common+0x3e>
 8003ff4:	18e1      	adds	r1, r4, r3
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	2030      	movs	r0, #48	; 0x30
 8003ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ffe:	4422      	add	r2, r4
 8004000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004008:	3302      	adds	r3, #2
 800400a:	e7c7      	b.n	8003f9c <_printf_common+0x58>
 800400c:	2301      	movs	r3, #1
 800400e:	4622      	mov	r2, r4
 8004010:	4649      	mov	r1, r9
 8004012:	4638      	mov	r0, r7
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d0e6      	beq.n	8003fe8 <_printf_common+0xa4>
 800401a:	3601      	adds	r6, #1
 800401c:	e7d9      	b.n	8003fd2 <_printf_common+0x8e>
	...

08004020 <_printf_i>:
 8004020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	7e0f      	ldrb	r7, [r1, #24]
 8004026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004028:	2f78      	cmp	r7, #120	; 0x78
 800402a:	4691      	mov	r9, r2
 800402c:	4680      	mov	r8, r0
 800402e:	460c      	mov	r4, r1
 8004030:	469a      	mov	sl, r3
 8004032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004036:	d807      	bhi.n	8004048 <_printf_i+0x28>
 8004038:	2f62      	cmp	r7, #98	; 0x62
 800403a:	d80a      	bhi.n	8004052 <_printf_i+0x32>
 800403c:	2f00      	cmp	r7, #0
 800403e:	f000 80d8 	beq.w	80041f2 <_printf_i+0x1d2>
 8004042:	2f58      	cmp	r7, #88	; 0x58
 8004044:	f000 80a3 	beq.w	800418e <_printf_i+0x16e>
 8004048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800404c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004050:	e03a      	b.n	80040c8 <_printf_i+0xa8>
 8004052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004056:	2b15      	cmp	r3, #21
 8004058:	d8f6      	bhi.n	8004048 <_printf_i+0x28>
 800405a:	a101      	add	r1, pc, #4	; (adr r1, 8004060 <_printf_i+0x40>)
 800405c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040cd 	.word	0x080040cd
 8004068:	08004049 	.word	0x08004049
 800406c:	08004049 	.word	0x08004049
 8004070:	08004049 	.word	0x08004049
 8004074:	08004049 	.word	0x08004049
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004049 	.word	0x08004049
 8004080:	08004049 	.word	0x08004049
 8004084:	08004049 	.word	0x08004049
 8004088:	08004049 	.word	0x08004049
 800408c:	080041d9 	.word	0x080041d9
 8004090:	080040fd 	.word	0x080040fd
 8004094:	080041bb 	.word	0x080041bb
 8004098:	08004049 	.word	0x08004049
 800409c:	08004049 	.word	0x08004049
 80040a0:	080041fb 	.word	0x080041fb
 80040a4:	08004049 	.word	0x08004049
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	08004049 	.word	0x08004049
 80040b0:	08004049 	.word	0x08004049
 80040b4:	080041c3 	.word	0x080041c3
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	602a      	str	r2, [r5, #0]
 80040c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a3      	b.n	8004214 <_printf_i+0x1f4>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	6829      	ldr	r1, [r5, #0]
 80040d0:	0606      	lsls	r6, r0, #24
 80040d2:	f101 0304 	add.w	r3, r1, #4
 80040d6:	d50a      	bpl.n	80040ee <_printf_i+0xce>
 80040d8:	680e      	ldr	r6, [r1, #0]
 80040da:	602b      	str	r3, [r5, #0]
 80040dc:	2e00      	cmp	r6, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xc8>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	4276      	negs	r6, r6
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	485e      	ldr	r0, [pc, #376]	; (8004264 <_printf_i+0x244>)
 80040ea:	230a      	movs	r3, #10
 80040ec:	e019      	b.n	8004122 <_printf_i+0x102>
 80040ee:	680e      	ldr	r6, [r1, #0]
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040f6:	bf18      	it	ne
 80040f8:	b236      	sxthne	r6, r6
 80040fa:	e7ef      	b.n	80040dc <_printf_i+0xbc>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	6029      	str	r1, [r5, #0]
 8004104:	0601      	lsls	r1, r0, #24
 8004106:	d501      	bpl.n	800410c <_printf_i+0xec>
 8004108:	681e      	ldr	r6, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0xf2>
 800410c:	0646      	lsls	r6, r0, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0xe8>
 8004110:	881e      	ldrh	r6, [r3, #0]
 8004112:	4854      	ldr	r0, [pc, #336]	; (8004264 <_printf_i+0x244>)
 8004114:	2f6f      	cmp	r7, #111	; 0x6f
 8004116:	bf0c      	ite	eq
 8004118:	2308      	moveq	r3, #8
 800411a:	230a      	movne	r3, #10
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004122:	6865      	ldr	r5, [r4, #4]
 8004124:	60a5      	str	r5, [r4, #8]
 8004126:	2d00      	cmp	r5, #0
 8004128:	bfa2      	ittt	ge
 800412a:	6821      	ldrge	r1, [r4, #0]
 800412c:	f021 0104 	bicge.w	r1, r1, #4
 8004130:	6021      	strge	r1, [r4, #0]
 8004132:	b90e      	cbnz	r6, 8004138 <_printf_i+0x118>
 8004134:	2d00      	cmp	r5, #0
 8004136:	d04d      	beq.n	80041d4 <_printf_i+0x1b4>
 8004138:	4615      	mov	r5, r2
 800413a:	fbb6 f1f3 	udiv	r1, r6, r3
 800413e:	fb03 6711 	mls	r7, r3, r1, r6
 8004142:	5dc7      	ldrb	r7, [r0, r7]
 8004144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004148:	4637      	mov	r7, r6
 800414a:	42bb      	cmp	r3, r7
 800414c:	460e      	mov	r6, r1
 800414e:	d9f4      	bls.n	800413a <_printf_i+0x11a>
 8004150:	2b08      	cmp	r3, #8
 8004152:	d10b      	bne.n	800416c <_printf_i+0x14c>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07de      	lsls	r6, r3, #31
 8004158:	d508      	bpl.n	800416c <_printf_i+0x14c>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	6861      	ldr	r1, [r4, #4]
 800415e:	4299      	cmp	r1, r3
 8004160:	bfde      	ittt	le
 8004162:	2330      	movle	r3, #48	; 0x30
 8004164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800416c:	1b52      	subs	r2, r2, r5
 800416e:	6122      	str	r2, [r4, #16]
 8004170:	f8cd a000 	str.w	sl, [sp]
 8004174:	464b      	mov	r3, r9
 8004176:	aa03      	add	r2, sp, #12
 8004178:	4621      	mov	r1, r4
 800417a:	4640      	mov	r0, r8
 800417c:	f7ff fee2 	bl	8003f44 <_printf_common>
 8004180:	3001      	adds	r0, #1
 8004182:	d14c      	bne.n	800421e <_printf_i+0x1fe>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	b004      	add	sp, #16
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	4835      	ldr	r0, [pc, #212]	; (8004264 <_printf_i+0x244>)
 8004190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004194:	6829      	ldr	r1, [r5, #0]
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f851 6b04 	ldr.w	r6, [r1], #4
 800419c:	6029      	str	r1, [r5, #0]
 800419e:	061d      	lsls	r5, r3, #24
 80041a0:	d514      	bpl.n	80041cc <_printf_i+0x1ac>
 80041a2:	07df      	lsls	r7, r3, #31
 80041a4:	bf44      	itt	mi
 80041a6:	f043 0320 	orrmi.w	r3, r3, #32
 80041aa:	6023      	strmi	r3, [r4, #0]
 80041ac:	b91e      	cbnz	r6, 80041b6 <_printf_i+0x196>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f023 0320 	bic.w	r3, r3, #32
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	2310      	movs	r3, #16
 80041b8:	e7b0      	b.n	800411c <_printf_i+0xfc>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f043 0320 	orr.w	r3, r3, #32
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	2378      	movs	r3, #120	; 0x78
 80041c4:	4828      	ldr	r0, [pc, #160]	; (8004268 <_printf_i+0x248>)
 80041c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ca:	e7e3      	b.n	8004194 <_printf_i+0x174>
 80041cc:	0659      	lsls	r1, r3, #25
 80041ce:	bf48      	it	mi
 80041d0:	b2b6      	uxthmi	r6, r6
 80041d2:	e7e6      	b.n	80041a2 <_printf_i+0x182>
 80041d4:	4615      	mov	r5, r2
 80041d6:	e7bb      	b.n	8004150 <_printf_i+0x130>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	6826      	ldr	r6, [r4, #0]
 80041dc:	6961      	ldr	r1, [r4, #20]
 80041de:	1d18      	adds	r0, r3, #4
 80041e0:	6028      	str	r0, [r5, #0]
 80041e2:	0635      	lsls	r5, r6, #24
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	d501      	bpl.n	80041ec <_printf_i+0x1cc>
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <_printf_i+0x1d2>
 80041ec:	0670      	lsls	r0, r6, #25
 80041ee:	d5fb      	bpl.n	80041e8 <_printf_i+0x1c8>
 80041f0:	8019      	strh	r1, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6123      	str	r3, [r4, #16]
 80041f6:	4615      	mov	r5, r2
 80041f8:	e7ba      	b.n	8004170 <_printf_i+0x150>
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	602a      	str	r2, [r5, #0]
 8004200:	681d      	ldr	r5, [r3, #0]
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	2100      	movs	r1, #0
 8004206:	4628      	mov	r0, r5
 8004208:	f7fb ffea 	bl	80001e0 <memchr>
 800420c:	b108      	cbz	r0, 8004212 <_printf_i+0x1f2>
 800420e:	1b40      	subs	r0, r0, r5
 8004210:	6060      	str	r0, [r4, #4]
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	2300      	movs	r3, #0
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421c:	e7a8      	b.n	8004170 <_printf_i+0x150>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	462a      	mov	r2, r5
 8004222:	4649      	mov	r1, r9
 8004224:	4640      	mov	r0, r8
 8004226:	47d0      	blx	sl
 8004228:	3001      	adds	r0, #1
 800422a:	d0ab      	beq.n	8004184 <_printf_i+0x164>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	079b      	lsls	r3, r3, #30
 8004230:	d413      	bmi.n	800425a <_printf_i+0x23a>
 8004232:	68e0      	ldr	r0, [r4, #12]
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	4298      	cmp	r0, r3
 8004238:	bfb8      	it	lt
 800423a:	4618      	movlt	r0, r3
 800423c:	e7a4      	b.n	8004188 <_printf_i+0x168>
 800423e:	2301      	movs	r3, #1
 8004240:	4632      	mov	r2, r6
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	47d0      	blx	sl
 8004248:	3001      	adds	r0, #1
 800424a:	d09b      	beq.n	8004184 <_printf_i+0x164>
 800424c:	3501      	adds	r5, #1
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	42ab      	cmp	r3, r5
 8004256:	dcf2      	bgt.n	800423e <_printf_i+0x21e>
 8004258:	e7eb      	b.n	8004232 <_printf_i+0x212>
 800425a:	2500      	movs	r5, #0
 800425c:	f104 0619 	add.w	r6, r4, #25
 8004260:	e7f5      	b.n	800424e <_printf_i+0x22e>
 8004262:	bf00      	nop
 8004264:	08004b05 	.word	0x08004b05
 8004268:	08004b16 	.word	0x08004b16

0800426c <_sbrk_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4d06      	ldr	r5, [pc, #24]	; (8004288 <_sbrk_r+0x1c>)
 8004270:	2300      	movs	r3, #0
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	f7fd fa6e 	bl	8001758 <_sbrk>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_sbrk_r+0x1a>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_sbrk_r+0x1a>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	20000138 	.word	0x20000138

0800428c <__sread>:
 800428c:	b510      	push	{r4, lr}
 800428e:	460c      	mov	r4, r1
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	f000 fb0a 	bl	80048ac <_read_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	bfab      	itete	ge
 800429c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800429e:	89a3      	ldrhlt	r3, [r4, #12]
 80042a0:	181b      	addge	r3, r3, r0
 80042a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042a6:	bfac      	ite	ge
 80042a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042aa:	81a3      	strhlt	r3, [r4, #12]
 80042ac:	bd10      	pop	{r4, pc}

080042ae <__swrite>:
 80042ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b2:	461f      	mov	r7, r3
 80042b4:	898b      	ldrh	r3, [r1, #12]
 80042b6:	05db      	lsls	r3, r3, #23
 80042b8:	4605      	mov	r5, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4616      	mov	r6, r2
 80042be:	d505      	bpl.n	80042cc <__swrite+0x1e>
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	2302      	movs	r3, #2
 80042c6:	2200      	movs	r2, #0
 80042c8:	f000 f9c8 	bl	800465c <_lseek_r>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	4632      	mov	r2, r6
 80042da:	463b      	mov	r3, r7
 80042dc:	4628      	mov	r0, r5
 80042de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042e2:	f000 b869 	b.w	80043b8 <_write_r>

080042e6 <__sseek>:
 80042e6:	b510      	push	{r4, lr}
 80042e8:	460c      	mov	r4, r1
 80042ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ee:	f000 f9b5 	bl	800465c <_lseek_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	bf15      	itete	ne
 80042f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80042fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004302:	81a3      	strheq	r3, [r4, #12]
 8004304:	bf18      	it	ne
 8004306:	81a3      	strhne	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__sclose>:
 800430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430e:	f000 b8d3 	b.w	80044b8 <_close_r>
	...

08004314 <__swbuf_r>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	460e      	mov	r6, r1
 8004318:	4614      	mov	r4, r2
 800431a:	4605      	mov	r5, r0
 800431c:	b118      	cbz	r0, 8004326 <__swbuf_r+0x12>
 800431e:	6983      	ldr	r3, [r0, #24]
 8004320:	b90b      	cbnz	r3, 8004326 <__swbuf_r+0x12>
 8004322:	f7ff fa25 	bl	8003770 <__sinit>
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <__swbuf_r+0x98>)
 8004328:	429c      	cmp	r4, r3
 800432a:	d12b      	bne.n	8004384 <__swbuf_r+0x70>
 800432c:	686c      	ldr	r4, [r5, #4]
 800432e:	69a3      	ldr	r3, [r4, #24]
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	071a      	lsls	r2, r3, #28
 8004336:	d52f      	bpl.n	8004398 <__swbuf_r+0x84>
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	b36b      	cbz	r3, 8004398 <__swbuf_r+0x84>
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	1ac0      	subs	r0, r0, r3
 8004342:	6963      	ldr	r3, [r4, #20]
 8004344:	b2f6      	uxtb	r6, r6
 8004346:	4283      	cmp	r3, r0
 8004348:	4637      	mov	r7, r6
 800434a:	dc04      	bgt.n	8004356 <__swbuf_r+0x42>
 800434c:	4621      	mov	r1, r4
 800434e:	4628      	mov	r0, r5
 8004350:	f000 f948 	bl	80045e4 <_fflush_r>
 8004354:	bb30      	cbnz	r0, 80043a4 <__swbuf_r+0x90>
 8004356:	68a3      	ldr	r3, [r4, #8]
 8004358:	3b01      	subs	r3, #1
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	6022      	str	r2, [r4, #0]
 8004362:	701e      	strb	r6, [r3, #0]
 8004364:	6963      	ldr	r3, [r4, #20]
 8004366:	3001      	adds	r0, #1
 8004368:	4283      	cmp	r3, r0
 800436a:	d004      	beq.n	8004376 <__swbuf_r+0x62>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	07db      	lsls	r3, r3, #31
 8004370:	d506      	bpl.n	8004380 <__swbuf_r+0x6c>
 8004372:	2e0a      	cmp	r6, #10
 8004374:	d104      	bne.n	8004380 <__swbuf_r+0x6c>
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 f933 	bl	80045e4 <_fflush_r>
 800437e:	b988      	cbnz	r0, 80043a4 <__swbuf_r+0x90>
 8004380:	4638      	mov	r0, r7
 8004382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <__swbuf_r+0x9c>)
 8004386:	429c      	cmp	r4, r3
 8004388:	d101      	bne.n	800438e <__swbuf_r+0x7a>
 800438a:	68ac      	ldr	r4, [r5, #8]
 800438c:	e7cf      	b.n	800432e <__swbuf_r+0x1a>
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <__swbuf_r+0xa0>)
 8004390:	429c      	cmp	r4, r3
 8004392:	bf08      	it	eq
 8004394:	68ec      	ldreq	r4, [r5, #12]
 8004396:	e7ca      	b.n	800432e <__swbuf_r+0x1a>
 8004398:	4621      	mov	r1, r4
 800439a:	4628      	mov	r0, r5
 800439c:	f000 f81e 	bl	80043dc <__swsetup_r>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d0cb      	beq.n	800433c <__swbuf_r+0x28>
 80043a4:	f04f 37ff 	mov.w	r7, #4294967295
 80043a8:	e7ea      	b.n	8004380 <__swbuf_r+0x6c>
 80043aa:	bf00      	nop
 80043ac:	08004ab4 	.word	0x08004ab4
 80043b0:	08004ad4 	.word	0x08004ad4
 80043b4:	08004a94 	.word	0x08004a94

080043b8 <_write_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4d07      	ldr	r5, [pc, #28]	; (80043d8 <_write_r+0x20>)
 80043bc:	4604      	mov	r4, r0
 80043be:	4608      	mov	r0, r1
 80043c0:	4611      	mov	r1, r2
 80043c2:	2200      	movs	r2, #0
 80043c4:	602a      	str	r2, [r5, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f7fd f975 	bl	80016b6 <_write>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_write_r+0x1e>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_write_r+0x1e>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000138 	.word	0x20000138

080043dc <__swsetup_r>:
 80043dc:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <__swsetup_r+0xcc>)
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	4606      	mov	r6, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	b125      	cbz	r5, 80043f2 <__swsetup_r+0x16>
 80043e8:	69ab      	ldr	r3, [r5, #24]
 80043ea:	b913      	cbnz	r3, 80043f2 <__swsetup_r+0x16>
 80043ec:	4628      	mov	r0, r5
 80043ee:	f7ff f9bf 	bl	8003770 <__sinit>
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <__swsetup_r+0xd0>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d10f      	bne.n	8004418 <__swsetup_r+0x3c>
 80043f8:	686c      	ldr	r4, [r5, #4]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004400:	0719      	lsls	r1, r3, #28
 8004402:	d42c      	bmi.n	800445e <__swsetup_r+0x82>
 8004404:	06dd      	lsls	r5, r3, #27
 8004406:	d411      	bmi.n	800442c <__swsetup_r+0x50>
 8004408:	2309      	movs	r3, #9
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	f04f 30ff 	mov.w	r0, #4294967295
 8004416:	e03e      	b.n	8004496 <__swsetup_r+0xba>
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <__swsetup_r+0xd4>)
 800441a:	429c      	cmp	r4, r3
 800441c:	d101      	bne.n	8004422 <__swsetup_r+0x46>
 800441e:	68ac      	ldr	r4, [r5, #8]
 8004420:	e7eb      	b.n	80043fa <__swsetup_r+0x1e>
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <__swsetup_r+0xd8>)
 8004424:	429c      	cmp	r4, r3
 8004426:	bf08      	it	eq
 8004428:	68ec      	ldreq	r4, [r5, #12]
 800442a:	e7e6      	b.n	80043fa <__swsetup_r+0x1e>
 800442c:	0758      	lsls	r0, r3, #29
 800442e:	d512      	bpl.n	8004456 <__swsetup_r+0x7a>
 8004430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004432:	b141      	cbz	r1, 8004446 <__swsetup_r+0x6a>
 8004434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <__swsetup_r+0x66>
 800443c:	4630      	mov	r0, r6
 800443e:	f000 f9b9 	bl	80047b4 <_free_r>
 8004442:	2300      	movs	r3, #0
 8004444:	6363      	str	r3, [r4, #52]	; 0x34
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	2300      	movs	r3, #0
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	b94b      	cbnz	r3, 8004476 <__swsetup_r+0x9a>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446c:	d003      	beq.n	8004476 <__swsetup_r+0x9a>
 800446e:	4621      	mov	r1, r4
 8004470:	4630      	mov	r0, r6
 8004472:	f000 f92b 	bl	80046cc <__smakebuf_r>
 8004476:	89a0      	ldrh	r0, [r4, #12]
 8004478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800447c:	f010 0301 	ands.w	r3, r0, #1
 8004480:	d00a      	beq.n	8004498 <__swsetup_r+0xbc>
 8004482:	2300      	movs	r3, #0
 8004484:	60a3      	str	r3, [r4, #8]
 8004486:	6963      	ldr	r3, [r4, #20]
 8004488:	425b      	negs	r3, r3
 800448a:	61a3      	str	r3, [r4, #24]
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	b943      	cbnz	r3, 80044a2 <__swsetup_r+0xc6>
 8004490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004494:	d1ba      	bne.n	800440c <__swsetup_r+0x30>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	0781      	lsls	r1, r0, #30
 800449a:	bf58      	it	pl
 800449c:	6963      	ldrpl	r3, [r4, #20]
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	e7f4      	b.n	800448c <__swsetup_r+0xb0>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e7f7      	b.n	8004496 <__swsetup_r+0xba>
 80044a6:	bf00      	nop
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	08004ab4 	.word	0x08004ab4
 80044b0:	08004ad4 	.word	0x08004ad4
 80044b4:	08004a94 	.word	0x08004a94

080044b8 <_close_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d06      	ldr	r5, [pc, #24]	; (80044d4 <_close_r+0x1c>)
 80044bc:	2300      	movs	r3, #0
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fd f913 	bl	80016ee <_close>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_close_r+0x1a>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_close_r+0x1a>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	20000138 	.word	0x20000138

080044d8 <__sflush_r>:
 80044d8:	898a      	ldrh	r2, [r1, #12]
 80044da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044de:	4605      	mov	r5, r0
 80044e0:	0710      	lsls	r0, r2, #28
 80044e2:	460c      	mov	r4, r1
 80044e4:	d458      	bmi.n	8004598 <__sflush_r+0xc0>
 80044e6:	684b      	ldr	r3, [r1, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc05      	bgt.n	80044f8 <__sflush_r+0x20>
 80044ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	dc02      	bgt.n	80044f8 <__sflush_r+0x20>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d0f9      	beq.n	80044f2 <__sflush_r+0x1a>
 80044fe:	2300      	movs	r3, #0
 8004500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004504:	682f      	ldr	r7, [r5, #0]
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	d032      	beq.n	8004570 <__sflush_r+0x98>
 800450a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	075a      	lsls	r2, r3, #29
 8004510:	d505      	bpl.n	800451e <__sflush_r+0x46>
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	1ac0      	subs	r0, r0, r3
 8004516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004518:	b10b      	cbz	r3, 800451e <__sflush_r+0x46>
 800451a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800451c:	1ac0      	subs	r0, r0, r3
 800451e:	2300      	movs	r3, #0
 8004520:	4602      	mov	r2, r0
 8004522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004524:	6a21      	ldr	r1, [r4, #32]
 8004526:	4628      	mov	r0, r5
 8004528:	47b0      	blx	r6
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	d106      	bne.n	800453e <__sflush_r+0x66>
 8004530:	6829      	ldr	r1, [r5, #0]
 8004532:	291d      	cmp	r1, #29
 8004534:	d82c      	bhi.n	8004590 <__sflush_r+0xb8>
 8004536:	4a2a      	ldr	r2, [pc, #168]	; (80045e0 <__sflush_r+0x108>)
 8004538:	40ca      	lsrs	r2, r1
 800453a:	07d6      	lsls	r6, r2, #31
 800453c:	d528      	bpl.n	8004590 <__sflush_r+0xb8>
 800453e:	2200      	movs	r2, #0
 8004540:	6062      	str	r2, [r4, #4]
 8004542:	04d9      	lsls	r1, r3, #19
 8004544:	6922      	ldr	r2, [r4, #16]
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	d504      	bpl.n	8004554 <__sflush_r+0x7c>
 800454a:	1c42      	adds	r2, r0, #1
 800454c:	d101      	bne.n	8004552 <__sflush_r+0x7a>
 800454e:	682b      	ldr	r3, [r5, #0]
 8004550:	b903      	cbnz	r3, 8004554 <__sflush_r+0x7c>
 8004552:	6560      	str	r0, [r4, #84]	; 0x54
 8004554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004556:	602f      	str	r7, [r5, #0]
 8004558:	2900      	cmp	r1, #0
 800455a:	d0ca      	beq.n	80044f2 <__sflush_r+0x1a>
 800455c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <__sflush_r+0x92>
 8004564:	4628      	mov	r0, r5
 8004566:	f000 f925 	bl	80047b4 <_free_r>
 800456a:	2000      	movs	r0, #0
 800456c:	6360      	str	r0, [r4, #52]	; 0x34
 800456e:	e7c1      	b.n	80044f4 <__sflush_r+0x1c>
 8004570:	6a21      	ldr	r1, [r4, #32]
 8004572:	2301      	movs	r3, #1
 8004574:	4628      	mov	r0, r5
 8004576:	47b0      	blx	r6
 8004578:	1c41      	adds	r1, r0, #1
 800457a:	d1c7      	bne.n	800450c <__sflush_r+0x34>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0c4      	beq.n	800450c <__sflush_r+0x34>
 8004582:	2b1d      	cmp	r3, #29
 8004584:	d001      	beq.n	800458a <__sflush_r+0xb2>
 8004586:	2b16      	cmp	r3, #22
 8004588:	d101      	bne.n	800458e <__sflush_r+0xb6>
 800458a:	602f      	str	r7, [r5, #0]
 800458c:	e7b1      	b.n	80044f2 <__sflush_r+0x1a>
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	e7ad      	b.n	80044f4 <__sflush_r+0x1c>
 8004598:	690f      	ldr	r7, [r1, #16]
 800459a:	2f00      	cmp	r7, #0
 800459c:	d0a9      	beq.n	80044f2 <__sflush_r+0x1a>
 800459e:	0793      	lsls	r3, r2, #30
 80045a0:	680e      	ldr	r6, [r1, #0]
 80045a2:	bf08      	it	eq
 80045a4:	694b      	ldreq	r3, [r1, #20]
 80045a6:	600f      	str	r7, [r1, #0]
 80045a8:	bf18      	it	ne
 80045aa:	2300      	movne	r3, #0
 80045ac:	eba6 0807 	sub.w	r8, r6, r7
 80045b0:	608b      	str	r3, [r1, #8]
 80045b2:	f1b8 0f00 	cmp.w	r8, #0
 80045b6:	dd9c      	ble.n	80044f2 <__sflush_r+0x1a>
 80045b8:	6a21      	ldr	r1, [r4, #32]
 80045ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045bc:	4643      	mov	r3, r8
 80045be:	463a      	mov	r2, r7
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b0      	blx	r6
 80045c4:	2800      	cmp	r0, #0
 80045c6:	dc06      	bgt.n	80045d6 <__sflush_r+0xfe>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	e78e      	b.n	80044f4 <__sflush_r+0x1c>
 80045d6:	4407      	add	r7, r0
 80045d8:	eba8 0800 	sub.w	r8, r8, r0
 80045dc:	e7e9      	b.n	80045b2 <__sflush_r+0xda>
 80045de:	bf00      	nop
 80045e0:	20400001 	.word	0x20400001

080045e4 <_fflush_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	690b      	ldr	r3, [r1, #16]
 80045e8:	4605      	mov	r5, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	b913      	cbnz	r3, 80045f4 <_fflush_r+0x10>
 80045ee:	2500      	movs	r5, #0
 80045f0:	4628      	mov	r0, r5
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	b118      	cbz	r0, 80045fe <_fflush_r+0x1a>
 80045f6:	6983      	ldr	r3, [r0, #24]
 80045f8:	b90b      	cbnz	r3, 80045fe <_fflush_r+0x1a>
 80045fa:	f7ff f8b9 	bl	8003770 <__sinit>
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <_fflush_r+0x6c>)
 8004600:	429c      	cmp	r4, r3
 8004602:	d11b      	bne.n	800463c <_fflush_r+0x58>
 8004604:	686c      	ldr	r4, [r5, #4]
 8004606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ef      	beq.n	80045ee <_fflush_r+0xa>
 800460e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004610:	07d0      	lsls	r0, r2, #31
 8004612:	d404      	bmi.n	800461e <_fflush_r+0x3a>
 8004614:	0599      	lsls	r1, r3, #22
 8004616:	d402      	bmi.n	800461e <_fflush_r+0x3a>
 8004618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800461a:	f7ff f947 	bl	80038ac <__retarget_lock_acquire_recursive>
 800461e:	4628      	mov	r0, r5
 8004620:	4621      	mov	r1, r4
 8004622:	f7ff ff59 	bl	80044d8 <__sflush_r>
 8004626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004628:	07da      	lsls	r2, r3, #31
 800462a:	4605      	mov	r5, r0
 800462c:	d4e0      	bmi.n	80045f0 <_fflush_r+0xc>
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	059b      	lsls	r3, r3, #22
 8004632:	d4dd      	bmi.n	80045f0 <_fflush_r+0xc>
 8004634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004636:	f7ff f93a 	bl	80038ae <__retarget_lock_release_recursive>
 800463a:	e7d9      	b.n	80045f0 <_fflush_r+0xc>
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <_fflush_r+0x70>)
 800463e:	429c      	cmp	r4, r3
 8004640:	d101      	bne.n	8004646 <_fflush_r+0x62>
 8004642:	68ac      	ldr	r4, [r5, #8]
 8004644:	e7df      	b.n	8004606 <_fflush_r+0x22>
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <_fflush_r+0x74>)
 8004648:	429c      	cmp	r4, r3
 800464a:	bf08      	it	eq
 800464c:	68ec      	ldreq	r4, [r5, #12]
 800464e:	e7da      	b.n	8004606 <_fflush_r+0x22>
 8004650:	08004ab4 	.word	0x08004ab4
 8004654:	08004ad4 	.word	0x08004ad4
 8004658:	08004a94 	.word	0x08004a94

0800465c <_lseek_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4d07      	ldr	r5, [pc, #28]	; (800467c <_lseek_r+0x20>)
 8004660:	4604      	mov	r4, r0
 8004662:	4608      	mov	r0, r1
 8004664:	4611      	mov	r1, r2
 8004666:	2200      	movs	r2, #0
 8004668:	602a      	str	r2, [r5, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	f7fd f866 	bl	800173c <_lseek>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_lseek_r+0x1e>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_lseek_r+0x1e>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20000138 	.word	0x20000138

08004680 <__swhatbuf_r>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	460e      	mov	r6, r1
 8004684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004688:	2900      	cmp	r1, #0
 800468a:	b096      	sub	sp, #88	; 0x58
 800468c:	4614      	mov	r4, r2
 800468e:	461d      	mov	r5, r3
 8004690:	da08      	bge.n	80046a4 <__swhatbuf_r+0x24>
 8004692:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	061a      	lsls	r2, r3, #24
 800469c:	d410      	bmi.n	80046c0 <__swhatbuf_r+0x40>
 800469e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a2:	e00e      	b.n	80046c2 <__swhatbuf_r+0x42>
 80046a4:	466a      	mov	r2, sp
 80046a6:	f000 f913 	bl	80048d0 <_fstat_r>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	dbf1      	blt.n	8004692 <__swhatbuf_r+0x12>
 80046ae:	9a01      	ldr	r2, [sp, #4]
 80046b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046b8:	425a      	negs	r2, r3
 80046ba:	415a      	adcs	r2, r3
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	e7ee      	b.n	800469e <__swhatbuf_r+0x1e>
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	2000      	movs	r0, #0
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	b016      	add	sp, #88	; 0x58
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080046cc <__smakebuf_r>:
 80046cc:	898b      	ldrh	r3, [r1, #12]
 80046ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046d0:	079d      	lsls	r5, r3, #30
 80046d2:	4606      	mov	r6, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	d507      	bpl.n	80046e8 <__smakebuf_r+0x1c>
 80046d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	2301      	movs	r3, #1
 80046e2:	6163      	str	r3, [r4, #20]
 80046e4:	b002      	add	sp, #8
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	ab01      	add	r3, sp, #4
 80046ea:	466a      	mov	r2, sp
 80046ec:	f7ff ffc8 	bl	8004680 <__swhatbuf_r>
 80046f0:	9900      	ldr	r1, [sp, #0]
 80046f2:	4605      	mov	r5, r0
 80046f4:	4630      	mov	r0, r6
 80046f6:	f7ff f8fb 	bl	80038f0 <_malloc_r>
 80046fa:	b948      	cbnz	r0, 8004710 <__smakebuf_r+0x44>
 80046fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004700:	059a      	lsls	r2, r3, #22
 8004702:	d4ef      	bmi.n	80046e4 <__smakebuf_r+0x18>
 8004704:	f023 0303 	bic.w	r3, r3, #3
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	e7e3      	b.n	80046d8 <__smakebuf_r+0xc>
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <__smakebuf_r+0x7c>)
 8004712:	62b3      	str	r3, [r6, #40]	; 0x28
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	6020      	str	r0, [r4, #0]
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	9b00      	ldr	r3, [sp, #0]
 8004720:	6163      	str	r3, [r4, #20]
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	6120      	str	r0, [r4, #16]
 8004726:	b15b      	cbz	r3, 8004740 <__smakebuf_r+0x74>
 8004728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800472c:	4630      	mov	r0, r6
 800472e:	f000 f8e1 	bl	80048f4 <_isatty_r>
 8004732:	b128      	cbz	r0, 8004740 <__smakebuf_r+0x74>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	89a0      	ldrh	r0, [r4, #12]
 8004742:	4305      	orrs	r5, r0
 8004744:	81a5      	strh	r5, [r4, #12]
 8004746:	e7cd      	b.n	80046e4 <__smakebuf_r+0x18>
 8004748:	08003709 	.word	0x08003709

0800474c <memcpy>:
 800474c:	440a      	add	r2, r1
 800474e:	4291      	cmp	r1, r2
 8004750:	f100 33ff 	add.w	r3, r0, #4294967295
 8004754:	d100      	bne.n	8004758 <memcpy+0xc>
 8004756:	4770      	bx	lr
 8004758:	b510      	push	{r4, lr}
 800475a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800475e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004762:	4291      	cmp	r1, r2
 8004764:	d1f9      	bne.n	800475a <memcpy+0xe>
 8004766:	bd10      	pop	{r4, pc}

08004768 <memmove>:
 8004768:	4288      	cmp	r0, r1
 800476a:	b510      	push	{r4, lr}
 800476c:	eb01 0402 	add.w	r4, r1, r2
 8004770:	d902      	bls.n	8004778 <memmove+0x10>
 8004772:	4284      	cmp	r4, r0
 8004774:	4623      	mov	r3, r4
 8004776:	d807      	bhi.n	8004788 <memmove+0x20>
 8004778:	1e43      	subs	r3, r0, #1
 800477a:	42a1      	cmp	r1, r4
 800477c:	d008      	beq.n	8004790 <memmove+0x28>
 800477e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004786:	e7f8      	b.n	800477a <memmove+0x12>
 8004788:	4402      	add	r2, r0
 800478a:	4601      	mov	r1, r0
 800478c:	428a      	cmp	r2, r1
 800478e:	d100      	bne.n	8004792 <memmove+0x2a>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800479a:	e7f7      	b.n	800478c <memmove+0x24>

0800479c <__malloc_lock>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__malloc_lock+0x8>)
 800479e:	f7ff b885 	b.w	80038ac <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	2000012c 	.word	0x2000012c

080047a8 <__malloc_unlock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_unlock+0x8>)
 80047aa:	f7ff b880 	b.w	80038ae <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	2000012c 	.word	0x2000012c

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d044      	beq.n	8004844 <_free_r+0x90>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f7ff ffe7 	bl	800479c <__malloc_lock>
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <_free_r+0x94>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	b933      	cbnz	r3, 80047e4 <_free_r+0x30>
 80047d6:	6063      	str	r3, [r4, #4]
 80047d8:	6014      	str	r4, [r2, #0]
 80047da:	b003      	add	sp, #12
 80047dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e0:	f7ff bfe2 	b.w	80047a8 <__malloc_unlock>
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d908      	bls.n	80047fa <_free_r+0x46>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf01      	itttt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	1949      	addeq	r1, r1, r5
 80047f6:	6021      	streq	r1, [r4, #0]
 80047f8:	e7ed      	b.n	80047d6 <_free_r+0x22>
 80047fa:	461a      	mov	r2, r3
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b10b      	cbz	r3, 8004804 <_free_r+0x50>
 8004800:	42a3      	cmp	r3, r4
 8004802:	d9fa      	bls.n	80047fa <_free_r+0x46>
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	1855      	adds	r5, r2, r1
 8004808:	42a5      	cmp	r5, r4
 800480a:	d10b      	bne.n	8004824 <_free_r+0x70>
 800480c:	6824      	ldr	r4, [r4, #0]
 800480e:	4421      	add	r1, r4
 8004810:	1854      	adds	r4, r2, r1
 8004812:	42a3      	cmp	r3, r4
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	d1e0      	bne.n	80047da <_free_r+0x26>
 8004818:	681c      	ldr	r4, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	6053      	str	r3, [r2, #4]
 800481e:	4421      	add	r1, r4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	e7da      	b.n	80047da <_free_r+0x26>
 8004824:	d902      	bls.n	800482c <_free_r+0x78>
 8004826:	230c      	movs	r3, #12
 8004828:	6003      	str	r3, [r0, #0]
 800482a:	e7d6      	b.n	80047da <_free_r+0x26>
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	1961      	adds	r1, r4, r5
 8004830:	428b      	cmp	r3, r1
 8004832:	bf04      	itt	eq
 8004834:	6819      	ldreq	r1, [r3, #0]
 8004836:	685b      	ldreq	r3, [r3, #4]
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	bf04      	itt	eq
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	6054      	str	r4, [r2, #4]
 8004842:	e7ca      	b.n	80047da <_free_r+0x26>
 8004844:	b003      	add	sp, #12
 8004846:	bd30      	pop	{r4, r5, pc}
 8004848:	20000130 	.word	0x20000130

0800484c <_realloc_r>:
 800484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	4680      	mov	r8, r0
 8004852:	4614      	mov	r4, r2
 8004854:	460e      	mov	r6, r1
 8004856:	b921      	cbnz	r1, 8004862 <_realloc_r+0x16>
 8004858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	4611      	mov	r1, r2
 800485e:	f7ff b847 	b.w	80038f0 <_malloc_r>
 8004862:	b92a      	cbnz	r2, 8004870 <_realloc_r+0x24>
 8004864:	f7ff ffa6 	bl	80047b4 <_free_r>
 8004868:	4625      	mov	r5, r4
 800486a:	4628      	mov	r0, r5
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	f000 f850 	bl	8004914 <_malloc_usable_size_r>
 8004874:	4284      	cmp	r4, r0
 8004876:	4607      	mov	r7, r0
 8004878:	d802      	bhi.n	8004880 <_realloc_r+0x34>
 800487a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800487e:	d812      	bhi.n	80048a6 <_realloc_r+0x5a>
 8004880:	4621      	mov	r1, r4
 8004882:	4640      	mov	r0, r8
 8004884:	f7ff f834 	bl	80038f0 <_malloc_r>
 8004888:	4605      	mov	r5, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d0ed      	beq.n	800486a <_realloc_r+0x1e>
 800488e:	42bc      	cmp	r4, r7
 8004890:	4622      	mov	r2, r4
 8004892:	4631      	mov	r1, r6
 8004894:	bf28      	it	cs
 8004896:	463a      	movcs	r2, r7
 8004898:	f7ff ff58 	bl	800474c <memcpy>
 800489c:	4631      	mov	r1, r6
 800489e:	4640      	mov	r0, r8
 80048a0:	f7ff ff88 	bl	80047b4 <_free_r>
 80048a4:	e7e1      	b.n	800486a <_realloc_r+0x1e>
 80048a6:	4635      	mov	r5, r6
 80048a8:	e7df      	b.n	800486a <_realloc_r+0x1e>
	...

080048ac <_read_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d07      	ldr	r5, [pc, #28]	; (80048cc <_read_r+0x20>)
 80048b0:	4604      	mov	r4, r0
 80048b2:	4608      	mov	r0, r1
 80048b4:	4611      	mov	r1, r2
 80048b6:	2200      	movs	r2, #0
 80048b8:	602a      	str	r2, [r5, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f7fc fede 	bl	800167c <_read>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_read_r+0x1e>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_read_r+0x1e>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000138 	.word	0x20000138

080048d0 <_fstat_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d07      	ldr	r5, [pc, #28]	; (80048f0 <_fstat_r+0x20>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	f7fc ff12 	bl	8001706 <_fstat>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d102      	bne.n	80048ec <_fstat_r+0x1c>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	b103      	cbz	r3, 80048ec <_fstat_r+0x1c>
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	20000138 	.word	0x20000138

080048f4 <_isatty_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d06      	ldr	r5, [pc, #24]	; (8004910 <_isatty_r+0x1c>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	f7fc ff11 	bl	8001726 <_isatty>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_isatty_r+0x1a>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_isatty_r+0x1a>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20000138 	.word	0x20000138

08004914 <_malloc_usable_size_r>:
 8004914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004918:	1f18      	subs	r0, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	bfbc      	itt	lt
 800491e:	580b      	ldrlt	r3, [r1, r0]
 8004920:	18c0      	addlt	r0, r0, r3
 8004922:	4770      	bx	lr

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
