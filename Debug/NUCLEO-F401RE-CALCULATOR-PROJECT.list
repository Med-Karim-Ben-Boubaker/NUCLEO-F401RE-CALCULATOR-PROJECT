
NUCLEO-F401RE-CALCULATOR-PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fdc  08003fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004054  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b649  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c39  00000000  00000000  0002b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d80  00000000  00000000  0002e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e159  00000000  00000000  00045400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088318  00000000  00000000  00053559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  000db8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e3c 	.word	0x08003e3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003e3c 	.word	0x08003e3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <alert>:
#include "alarm-sound.h"
#include "stm32f4xx_hal.h"
#include "main.h"


void alert(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <alert+0x24>)
 800058e:	f001 fbf5 	bl	8001d7c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f001 f94c 	bl	8001830 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <alert+0x24>)
 800059e:	f001 fbed 	bl	8001d7c <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000

080005ac <precedence>:
#include <arithmetic_calculator.h>

int precedence(char operator) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    if (operator == '+' || operator == '-') // Check if the operator is addition or subtraction
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b2b      	cmp	r3, #43	; 0x2b
 80005ba:	d002      	beq.n	80005c2 <precedence+0x16>
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b2d      	cmp	r3, #45	; 0x2d
 80005c0:	d101      	bne.n	80005c6 <precedence+0x1a>
        return 1;  // Return a precedence of 1 for addition and subtraction
 80005c2:	2301      	movs	r3, #1
 80005c4:	e008      	b.n	80005d8 <precedence+0x2c>
    else if (operator == '*' || operator == '/') // Check if the operator is multiplication or division
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b2a      	cmp	r3, #42	; 0x2a
 80005ca:	d002      	beq.n	80005d2 <precedence+0x26>
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b2f      	cmp	r3, #47	; 0x2f
 80005d0:	d101      	bne.n	80005d6 <precedence+0x2a>
        return 2;  // Return a precedence of 2 for multiplication and division
 80005d2:	2302      	movs	r3, #2
 80005d4:	e000      	b.n	80005d8 <precedence+0x2c>
    else
        return 0;  // Return a precedence of 0 for any other operator
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <applyOperator>:


int applyOperator(int a, int b, char operator) {
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	4613      	mov	r3, r2
 80005f0:	71fb      	strb	r3, [r7, #7]
    switch (operator) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3b2a      	subs	r3, #42	; 0x2a
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d820      	bhi.n	800063c <applyOperator+0x58>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <applyOperator+0x1c>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000629 	.word	0x08000629
 8000604:	08000619 	.word	0x08000619
 8000608:	0800063d 	.word	0x0800063d
 800060c:	08000621 	.word	0x08000621
 8000610:	0800063d 	.word	0x0800063d
 8000614:	08000633 	.word	0x08000633
        case '+':
            return a + b;
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4413      	add	r3, r2
 800061e:	e00e      	b.n	800063e <applyOperator+0x5a>
        case '-':
            return a - b;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	e00a      	b.n	800063e <applyOperator+0x5a>
        case '*':
            return a * b;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	e005      	b.n	800063e <applyOperator+0x5a>
        case '/':
        	return a / b;
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	fb92 f3f3 	sdiv	r3, r2, r3
 800063a:	e000      	b.n	800063e <applyOperator+0x5a>
        default:
            return 0;
 800063c:	2300      	movs	r3, #0
    }
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <isOperator>:

bool isOperator(char ch){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	if(ch == '+' || ch == '-' || ch == '*' || ch == '/') return true;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b2b      	cmp	r3, #43	; 0x2b
 800065a:	d008      	beq.n	800066e <isOperator+0x22>
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b2d      	cmp	r3, #45	; 0x2d
 8000660:	d005      	beq.n	800066e <isOperator+0x22>
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b2a      	cmp	r3, #42	; 0x2a
 8000666:	d002      	beq.n	800066e <isOperator+0x22>
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b2f      	cmp	r3, #47	; 0x2f
 800066c:	d101      	bne.n	8000672 <isOperator+0x26>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <isOperator+0x28>
	else return false;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <evaluateExpression>:

bool evaluateExpression(char* expression, int* result) {
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8000686:	af00      	add	r7, sp, #0
 8000688:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800068c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000690:	6018      	str	r0, [r3, #0]
 8000692:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000696:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800069a:	6019      	str	r1, [r3, #0]
    int i;
    int value;
    int stack[100];             // Stack to store operands
    char operatorStack[100];    // Stack to store operators
    int stackTop = -1;          // Top of the operand stack
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    int operatorTop = -1;       // Top of the operator stack
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    for (i = 0; expression[i] != '\0'; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80006b2:	e1a4      	b.n	80009fe <evaluateExpression+0x37e>
        if (isdigit(expression[i])) {
 80006b4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006b8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80006bc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4ad3      	ldr	r2, [pc, #844]	; (8000a18 <evaluateExpression+0x398>)
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d042      	beq.n	800075c <evaluateExpression+0xdc>
            // If the current character is a digit, extract the whole number
            value = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
            while (isdigit(expression[i])) {
 80006dc:	e018      	b.n	8000710 <evaluateExpression+0x90>
                value = value * 10 + (expression[i] - '0');
 80006de:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006f0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80006f4:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80006f8:	6812      	ldr	r2, [r2, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b30      	subs	r3, #48	; 0x30
 8000700:	440b      	add	r3, r1
 8000702:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
                i++;
 8000706:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800070a:	3301      	adds	r3, #1
 800070c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
            while (isdigit(expression[i])) {
 8000710:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000714:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000718:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4abc      	ldr	r2, [pc, #752]	; (8000a18 <evaluateExpression+0x398>)
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1d5      	bne.n	80006de <evaluateExpression+0x5e>
            }
            i--;
 8000732:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000736:	3b01      	subs	r3, #1
 8000738:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
            stack[++stackTop] = value;  // Push the number onto the operand stack
 800073c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000740:	3301      	adds	r3, #1
 8000742:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000746:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800074a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800074e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000752:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800075a:	e14b      	b.n	80009f4 <evaluateExpression+0x374>
        }
        else if (expression[i] == '(') {
 800075c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000760:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000764:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b28      	cmp	r3, #40	; 0x28
 8000770:	d117      	bne.n	80007a2 <evaluateExpression+0x122>
            operatorStack[++operatorTop] = expression[i];  // Push '(' onto the operator stack
 8000772:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000776:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800077a:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4413      	add	r3, r2
 8000782:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000786:	3201      	adds	r2, #1
 8000788:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800078c:	7819      	ldrb	r1, [r3, #0]
 800078e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000792:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8000796:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800079a:	4413      	add	r3, r2
 800079c:	460a      	mov	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e128      	b.n	80009f4 <evaluateExpression+0x374>
        }
        else if (expression[i] == ')') {
 80007a2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80007a6:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007aa:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b29      	cmp	r3, #41	; 0x29
 80007b6:	d16f      	bne.n	8000898 <evaluateExpression+0x218>
            // Evaluate the subexpression inside parentheses
            while (operatorTop != -1 && operatorStack[operatorTop] != '(') {
 80007b8:	e048      	b.n	800084c <evaluateExpression+0x1cc>
                int b = stack[stackTop--];             // Pop the second operand from the stack
 80007ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80007c4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007c8:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80007cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
                int a = stack[stackTop--];             // Pop the first operand from the stack
 80007d4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80007de:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007e2:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
                char op = operatorStack[operatorTop--];  // Pop the operator from the stack
 80007ee:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80007f8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80007fc:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

                // Check for division by zero
                if (op == '/' && b == ERROR_DIVISION_BY_ZERO) {
 8000806:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800080a:	2b2f      	cmp	r3, #47	; 0x2f
 800080c:	d107      	bne.n	800081e <evaluateExpression+0x19e>
 800080e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <evaluateExpression+0x19e>
                    display_error_division_by_zero();
 8000816:	f000 fa07 	bl	8000c28 <display_error_division_by_zero>
                    return false;  // Return false to indicate division by zero error
 800081a:	2300      	movs	r3, #0
 800081c:	e15b      	b.n	8000ad6 <evaluateExpression+0x456>
                }
                else {
                    stack[++stackTop] = applyOperator(a, b, op);  // Apply the operator and push the result onto the stack
 800081e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000822:	3301      	adds	r3, #1
 8000824:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000828:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800082c:	461a      	mov	r2, r3
 800082e:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000832:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8000836:	f7ff fed5 	bl	80005e4 <applyOperator>
 800083a:	4601      	mov	r1, r0
 800083c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000840:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000844:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            while (operatorTop != -1 && operatorStack[operatorTop] != '(') {
 800084c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d009      	beq.n	800086a <evaluateExpression+0x1ea>
 8000856:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800085a:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800085e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b28      	cmp	r3, #40	; 0x28
 8000868:	d1a7      	bne.n	80007ba <evaluateExpression+0x13a>
                }
            }
            if (operatorTop != -1 && operatorStack[operatorTop] == '(') {
 800086a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800086e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000872:	f000 80bf 	beq.w	80009f4 <evaluateExpression+0x374>
 8000876:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800087a:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800087e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b28      	cmp	r3, #40	; 0x28
 8000888:	f040 80b4 	bne.w	80009f4 <evaluateExpression+0x374>
                operatorTop--;  // Pop '(' from the operator stack
 800088c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000890:	3b01      	subs	r3, #1
 8000892:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000896:	e0ad      	b.n	80009f4 <evaluateExpression+0x374>
            }
        }
        else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {
 8000898:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800089c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008a0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b2b      	cmp	r3, #43	; 0x2b
 80008ac:	d06b      	beq.n	8000986 <evaluateExpression+0x306>
 80008ae:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80008b2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008b6:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b2d      	cmp	r3, #45	; 0x2d
 80008c2:	d060      	beq.n	8000986 <evaluateExpression+0x306>
 80008c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80008c8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008cc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b2a      	cmp	r3, #42	; 0x2a
 80008d8:	d055      	beq.n	8000986 <evaluateExpression+0x306>
 80008da:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80008de:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80008e2:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b2f      	cmp	r3, #47	; 0x2f
 80008ee:	f040 8081 	bne.w	80009f4 <evaluateExpression+0x374>
            // Process operators: +, -, *, /
            while (operatorTop != -1 && precedence(operatorStack[operatorTop]) >= precedence(expression[i])) {
 80008f2:	e048      	b.n	8000986 <evaluateExpression+0x306>
                int b = stack[stackTop--];             // Pop the second operand from the stack
 80008f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80008fe:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000902:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                int a = stack[stackTop--];             // Pop the first operand from the stack
 800090e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000918:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800091c:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
                char op = operatorStack[operatorTop--];  // Pop the operator from the stack
 8000928:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8000932:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000936:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

                // Check for division by zero
                if (op == '/' && b == ERROR_DIVISION_BY_ZERO) {
 8000940:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8000944:	2b2f      	cmp	r3, #47	; 0x2f
 8000946:	d107      	bne.n	8000958 <evaluateExpression+0x2d8>
 8000948:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <evaluateExpression+0x2d8>
                    display_error_division_by_zero();
 8000950:	f000 f96a 	bl	8000c28 <display_error_division_by_zero>
                    return false;  // Return false to indicate division by zero error
 8000954:	2300      	movs	r3, #0
 8000956:	e0be      	b.n	8000ad6 <evaluateExpression+0x456>
                }
                else {
                    stack[++stackTop] = applyOperator(a, b, op);  // Apply the operator and push the result onto the stack
 8000958:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800095c:	3301      	adds	r3, #1
 800095e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000962:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8000966:	461a      	mov	r2, r3
 8000968:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800096c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000970:	f7ff fe38 	bl	80005e4 <applyOperator>
 8000974:	4601      	mov	r1, r0
 8000976:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800097a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800097e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            while (operatorTop != -1 && precedence(operatorStack[operatorTop]) >= precedence(expression[i])) {
 8000986:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800098a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098e:	d01a      	beq.n	80009c6 <evaluateExpression+0x346>
 8000990:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000994:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8000998:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe03 	bl	80005ac <precedence>
 80009a6:	4604      	mov	r4, r0
 80009a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80009ac:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80009b0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fdf6 	bl	80005ac <precedence>
 80009c0:	4603      	mov	r3, r0
 80009c2:	429c      	cmp	r4, r3
 80009c4:	da96      	bge.n	80008f4 <evaluateExpression+0x274>
                }
            }
            operatorStack[++operatorTop] = expression[i];  // Push the current operator onto the operator stack
 80009c6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80009ca:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80009ce:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80009da:	3201      	adds	r2, #1
 80009dc:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80009e0:	7819      	ldrb	r1, [r3, #0]
 80009e2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80009e6:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 80009ea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
    for (i = 0; expression[i] != '\0'; i++) {
 80009f4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80009f8:	3301      	adds	r3, #1
 80009fa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80009fe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000a02:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a06:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f47f ae4f 	bne.w	80006b4 <evaluateExpression+0x34>
        }
    }

    // Process remaining operators
    while (operatorTop != -1) {
 8000a16:	e04a      	b.n	8000aae <evaluateExpression+0x42e>
 8000a18:	08003ea0 	.word	0x08003ea0
        int b = stack[stackTop--];             // Pop the second operand from the stack
 8000a1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000a26:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a2a:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        int a = stack[stackTop--];             // Pop the first operand from the stack
 8000a36:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000a40:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a44:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8000a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        char op = operatorStack[operatorTop--];  // Pop the operator from the stack
 8000a50:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8000a5a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000a5e:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000a62:	5cd3      	ldrb	r3, [r2, r3]
 8000a64:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

        // Check for division by zero
        if (op == '/' && b == ERROR_DIVISION_BY_ZERO) {
 8000a68:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a6e:	d107      	bne.n	8000a80 <evaluateExpression+0x400>
 8000a70:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <evaluateExpression+0x400>
            display_error_division_by_zero();
 8000a78:	f000 f8d6 	bl	8000c28 <display_error_division_by_zero>
            return false;  // Return false to indicate division by zero error
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e02a      	b.n	8000ad6 <evaluateExpression+0x456>
        }
        else {
            stack[++stackTop] = applyOperator(a, b, op);  // Apply the operator and push the result onto the stack
 8000a80:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000a84:	3301      	adds	r3, #1
 8000a86:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000a8a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000a94:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000a98:	f7ff fda4 	bl	80005e4 <applyOperator>
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000aa2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000aa6:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (operatorTop != -1) {
 8000aae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d1b1      	bne.n	8000a1c <evaluateExpression+0x39c>
        }
    }

    *result = stack[stackTop];  // Store the final result in the provided pointer
 8000ab8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000abc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000ac0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000acc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	601a      	str	r2, [r3, #0]
    return true;                // Return true to indicate successful evaluation
 8000ad4:	2301      	movs	r3, #1
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <checkValidExpression>:


bool checkValidExpression(char* expression) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    int i;

    // Check if the first character is an operator
    if (isOperator(expression[0]))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdad 	bl	800064c <isOperator>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <checkValidExpression+0x1c>
        return false;
 8000af8:	2300      	movs	r3, #0
 8000afa:	e030      	b.n	8000b5e <checkValidExpression+0x7e>

    for (i = 0; expression[i] != '\0'; i++) {
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e019      	b.n	8000b36 <checkValidExpression+0x56>

        // Check if the current character and the next character are both operators
        if (isOperator(expression[i]) && isOperator(expression[i + 1]))
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd9e 	bl	800064c <isOperator>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00c      	beq.n	8000b30 <checkValidExpression+0x50>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd93 	bl	800064c <isOperator>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <checkValidExpression+0x50>
            return false;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e016      	b.n	8000b5e <checkValidExpression+0x7e>
    for (i = 0; expression[i] != '\0'; i++) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1df      	bne.n	8000b02 <checkValidExpression+0x22>
    }

    // Check if the last character is an operator
    if (isOperator(expression[i - 1]))
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fd7d 	bl	800064c <isOperator>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <checkValidExpression+0x7c>
        return false;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e000      	b.n	8000b5e <checkValidExpression+0x7e>

    return true;  // Return true if the expression is valid
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <print_result>:

#include "calc-write-lcd-hundler.h"

void print_result(char* stringResult){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	clear_row(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 f9cd 	bl	8000f10 <clear_row>
	lcd_put_cur(1, 0);
 8000b76:	2100      	movs	r1, #0
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 f8c5 	bl	8000d08 <lcd_put_cur>
	lcd_send_string("=");
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <print_result+0x34>)
 8000b80:	f000 f91e 	bl	8000dc0 <lcd_send_string>
	lcd_put_cur(1, 1);
 8000b84:	2101      	movs	r1, #1
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 f8be 	bl	8000d08 <lcd_put_cur>
	lcd_send_string(stringResult);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f917 	bl	8000dc0 <lcd_send_string>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08003e54 	.word	0x08003e54

08000ba0 <calculate_and_display>:

void calculate_and_display(char* expression){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(checkValidExpression(expression)){
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff99 	bl	8000ae0 <checkValidExpression>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d020      	beq.n	8000bf6 <calculate_and_display+0x56>
		int result;
		if(evaluateExpression(expression, &result)){
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fd60 	bl	8000680 <evaluateExpression>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d014      	beq.n	8000bf0 <calculate_and_display+0x50>
			char stringResult[16] = {'\0'};
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
			sprintf(stringResult, "%d", result);
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4909      	ldr	r1, [pc, #36]	; (8000c04 <calculate_and_display+0x64>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fcbe 	bl	8003560 <siprintf>
			print_result(stringResult);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ffbd 	bl	8000b68 <print_result>
	}
	else{
		print_invalid_expression_error();
	}

}
 8000bee:	e004      	b.n	8000bfa <calculate_and_display+0x5a>
		else display_error_division_by_zero();
 8000bf0:	f000 f81a 	bl	8000c28 <display_error_division_by_zero>
}
 8000bf4:	e001      	b.n	8000bfa <calculate_and_display+0x5a>
		print_invalid_expression_error();
 8000bf6:	f000 f807 	bl	8000c08 <print_invalid_expression_error>
}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08003e58 	.word	0x08003e58

08000c08 <print_invalid_expression_error>:

void print_invalid_expression_error(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	clear_row(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f97f 	bl	8000f10 <clear_row>
	lcd_put_cur(1, 0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 f877 	bl	8000d08 <lcd_put_cur>
	lcd_send_string(ERROR_MESSAGE_INVALID_EXPRESSION);
 8000c1a:	4802      	ldr	r0, [pc, #8]	; (8000c24 <print_invalid_expression_error+0x1c>)
 8000c1c:	f000 f8d0 	bl	8000dc0 <lcd_send_string>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08003e5c 	.word	0x08003e5c

08000c28 <display_error_division_by_zero>:

void display_error_division_by_zero(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	clear_row(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 f96f 	bl	8000f10 <clear_row>
	lcd_put_cur(1, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f867 	bl	8000d08 <lcd_put_cur>
	lcd_send_string(ERROR_MESSAGE_DIVISION_ZERO);
 8000c3a:	4802      	ldr	r0, [pc, #8]	; (8000c44 <display_error_division_by_zero+0x1c>)
 8000c3c:	f000 f8c0 	bl	8000dc0 <lcd_send_string>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08003e70 	.word	0x08003e70

08000c48 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f023 030f 	bic.w	r3, r3, #15
 8000c58:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	f043 030c 	orr.w	r3, r3, #12
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c74:	7bbb      	ldrb	r3, [r7, #14]
 8000c76:	f043 030c 	orr.w	r3, r3, #12
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c88:	f107 0208 	add.w	r2, r7, #8
 8000c8c:	2364      	movs	r3, #100	; 0x64
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2304      	movs	r3, #4
 8000c92:	214e      	movs	r1, #78	; 0x4e
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <lcd_send_cmd+0x5c>)
 8000c96:	f001 f9cf 	bl	8002038 <HAL_I2C_Master_Transmit>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000008c 	.word	0x2000008c

08000ca8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f023 030f 	bic.w	r3, r3, #15
 8000cb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f043 030d 	orr.w	r3, r3, #13
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0309 	orr.w	r3, r3, #9
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	f043 030d 	orr.w	r3, r3, #13
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	f043 0309 	orr.w	r3, r3, #9
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	214e      	movs	r1, #78	; 0x4e
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <lcd_send_data+0x5c>)
 8000cf6:	f001 f99f 	bl	8002038 <HAL_I2C_Master_Transmit>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000008c 	.word	0x2000008c

08000d08 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <lcd_put_cur+0x18>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d005      	beq.n	8000d2a <lcd_put_cur+0x22>
 8000d1e:	e009      	b.n	8000d34 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d26:	603b      	str	r3, [r7, #0]
            break;
 8000d28:	e004      	b.n	8000d34 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d30:	603b      	str	r3, [r7, #0]
            break;
 8000d32:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff85 	bl	8000c48 <lcd_send_cmd>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <lcd_init>:


void lcd_init (void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d4a:	2032      	movs	r0, #50	; 0x32
 8000d4c:	f000 fd70 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d50:	2030      	movs	r0, #48	; 0x30
 8000d52:	f7ff ff79 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d56:	2005      	movs	r0, #5
 8000d58:	f000 fd6a 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d5c:	2030      	movs	r0, #48	; 0x30
 8000d5e:	f7ff ff73 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 fd64 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d68:	2030      	movs	r0, #48	; 0x30
 8000d6a:	f7ff ff6d 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(10);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f000 fd5e 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d74:	2020      	movs	r0, #32
 8000d76:	f7ff ff67 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(10);
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f000 fd58 	bl	8001830 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d80:	2028      	movs	r0, #40	; 0x28
 8000d82:	f7ff ff61 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fd52 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d8c:	2008      	movs	r0, #8
 8000d8e:	f7ff ff5b 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fd4c 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff ff55 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fd46 	bl	8001830 <HAL_Delay>
	HAL_Delay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 fd43 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000daa:	2006      	movs	r0, #6
 8000dac:	f7ff ff4c 	bl	8000c48 <lcd_send_cmd>
	HAL_Delay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f000 fd3d 	bl	8001830 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000db6:	200c      	movs	r0, #12
 8000db8:	f7ff ff46 	bl	8000c48 <lcd_send_cmd>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dc8:	e006      	b.n	8000dd8 <lcd_send_string+0x18>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff68 	bl	8000ca8 <lcd_send_data>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f4      	bne.n	8000dca <lcd_send_string+0xa>
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <cursor_deplacement_right>:

// Function to move the cursor to the right
void cursor_deplacement_right(int* row, int* col){
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
    if(*col < 16){
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	dc0c      	bgt.n	8000e16 <cursor_deplacement_right+0x2c>
        // If the current column is less than 16, move the cursor one position to the right
        lcd_put_cur(*row, ++(*col));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff ff7a 	bl	8000d08 <lcd_put_cur>
        // move the cursor to the first row at the beginning of the line
        *col = 0;
        *row = 0;
        lcd_put_cur(*row, *col);
    }
}
 8000e14:	e022      	b.n	8000e5c <cursor_deplacement_right+0x72>
    else if(*row == 0){
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d110      	bne.n	8000e40 <cursor_deplacement_right+0x56>
        *col = 0;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
        lcd_put_cur(++(*row), *col);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f7ff ff65 	bl	8000d08 <lcd_put_cur>
}
 8000e3e:	e00d      	b.n	8000e5c <cursor_deplacement_right+0x72>
        *col = 0;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
        *row = 0;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
        lcd_put_cur(*row, *col);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f7ff ff56 	bl	8000d08 <lcd_put_cur>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <cursor_deplacement_left>:

// Function to move the cursor to the left
void cursor_deplacement_left(int* row, int* col){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    if(*col > 0){
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dd0c      	ble.n	8000e90 <cursor_deplacement_left+0x2c>
        // If the current column is greater than 0, move the cursor one position to the left
        lcd_put_cur(*row, --(*col));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff ff3d 	bl	8000d08 <lcd_put_cur>
        // If the current row is 1 and the column is at the beginning (0),
        // move the cursor to the previous row at the end of the line
        *col = 16;
        lcd_put_cur(--(*row), *col);
    }
}
 8000e8e:	e013      	b.n	8000eb8 <cursor_deplacement_left+0x54>
    else if(*row == 1){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10f      	bne.n	8000eb8 <cursor_deplacement_left+0x54>
        *col = 16;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2210      	movs	r2, #16
 8000e9c:	601a      	str	r2, [r3, #0]
        lcd_put_cur(--(*row), *col);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f7ff ff28 	bl	8000d08 <lcd_put_cur>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <remove_cursor_element>:

void remove_cursor_element(int* row, int* col){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	if(*row == 0 && *col == 0){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <remove_cursor_element+0x32>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10b      	bne.n	8000ef2 <remove_cursor_element+0x32>
		lcd_put_cur(0, 0);
 8000eda:	2100      	movs	r1, #0
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff ff13 	bl	8000d08 <lcd_put_cur>
		lcd_send_string(" ");
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <remove_cursor_element+0x4c>)
 8000ee4:	f7ff ff6c 	bl	8000dc0 <lcd_send_string>
		cursor_deplacement_left(row, col);
 8000ee8:	6839      	ldr	r1, [r7, #0]
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffba 	bl	8000e64 <cursor_deplacement_left>
 8000ef0:	e007      	b.n	8000f02 <remove_cursor_element+0x42>
	}
	else {
		cursor_deplacement_left(row, col);
 8000ef2:	6839      	ldr	r1, [r7, #0]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffb5 	bl	8000e64 <cursor_deplacement_left>
		lcd_send_string(" ");
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <remove_cursor_element+0x4c>)
 8000efc:	f7ff ff60 	bl	8000dc0 <lcd_send_string>

	}

}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08003e84 	.word	0x08003e84

08000f10 <clear_row>:

void clear_row(int row){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	for(int i=0; i<16; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e009      	b.n	8000f32 <clear_row+0x22>
		lcd_put_cur(row, i);
 8000f1e:	68f9      	ldr	r1, [r7, #12]
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fef1 	bl	8000d08 <lcd_put_cur>
		lcd_send_string(" ");
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <clear_row+0x34>)
 8000f28:	f7ff ff4a 	bl	8000dc0 <lcd_send_string>
	for(int i=0; i<16; i++){
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	ddf2      	ble.n	8000f1e <clear_row+0xe>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08003e84 	.word	0x08003e84

08000f48 <keypad_read>:
#include "keypad-lib.h"

// Function to read the pressed key from the keypad
char keypad_read() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
    // Iterate through each row
    for (int row = 0; row < 4; row++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e09d      	b.n	8001090 <keypad_read+0x148>

        // Set all rows to low (deactivate all rows)
        HAL_GPIO_WritePin(GPIOC, ROW1_PIN | ROW2_PIN | ROW3_PIN | ROW4_PIN, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	210f      	movs	r1, #15
 8000f58:	4852      	ldr	r0, [pc, #328]	; (80010a4 <keypad_read+0x15c>)
 8000f5a:	f000 ff0f 	bl	8001d7c <HAL_GPIO_WritePin>

        // Set the current row to high (activate the specific row)
        switch (row) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d823      	bhi.n	8000fac <keypad_read+0x64>
 8000f64:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <keypad_read+0x24>)
 8000f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6a:	bf00      	nop
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f89 	.word	0x08000f89
 8000f74:	08000f95 	.word	0x08000f95
 8000f78:	08000fa1 	.word	0x08000fa1
            case 0:
                HAL_GPIO_WritePin(GPIOC, ROW1_PIN, GPIO_PIN_SET); //Write PC1
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4848      	ldr	r0, [pc, #288]	; (80010a4 <keypad_read+0x15c>)
 8000f82:	f000 fefb 	bl	8001d7c <HAL_GPIO_WritePin>
                break;
 8000f86:	e011      	b.n	8000fac <keypad_read+0x64>
            case 1:
                HAL_GPIO_WritePin(GPIOC, ROW2_PIN, GPIO_PIN_SET); //Write PC0
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4845      	ldr	r0, [pc, #276]	; (80010a4 <keypad_read+0x15c>)
 8000f8e:	f000 fef5 	bl	8001d7c <HAL_GPIO_WritePin>
                break;
 8000f92:	e00b      	b.n	8000fac <keypad_read+0x64>
            case 2:
                HAL_GPIO_WritePin(GPIOC, ROW3_PIN, GPIO_PIN_SET); //Write PC3
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4842      	ldr	r0, [pc, #264]	; (80010a4 <keypad_read+0x15c>)
 8000f9a:	f000 feef 	bl	8001d7c <HAL_GPIO_WritePin>
                break;
 8000f9e:	e005      	b.n	8000fac <keypad_read+0x64>
            case 3:
                HAL_GPIO_WritePin(GPIOC, ROW4_PIN, GPIO_PIN_SET); //Write PC2
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	483f      	ldr	r0, [pc, #252]	; (80010a4 <keypad_read+0x15c>)
 8000fa6:	f000 fee9 	bl	8001d7c <HAL_GPIO_WritePin>
                break;
 8000faa:	bf00      	nop
        }

        HAL_Delay(1); // Adjust the delay duration as needed
 8000fac:	2001      	movs	r0, #1
 8000fae:	f000 fc3f 	bl	8001830 <HAL_Delay>

        // Check if any column is low (indicating a key press)
        if (HAL_GPIO_ReadPin(GPIOA, COL1_PIN) == GPIO_PIN_SET) {
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	483c      	ldr	r0, [pc, #240]	; (80010a8 <keypad_read+0x160>)
 8000fb6:	f000 fec9 	bl	8001d4c <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d113      	bne.n	8000fe8 <keypad_read+0xa0>
            if (row == 0)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <keypad_read+0x82>
                return '1';
 8000fc6:	2331      	movs	r3, #49	; 0x31
 8000fc8:	e067      	b.n	800109a <keypad_read+0x152>
            else if (row == 1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <keypad_read+0x8c>
                return '4';
 8000fd0:	2334      	movs	r3, #52	; 0x34
 8000fd2:	e062      	b.n	800109a <keypad_read+0x152>
            else if (row == 2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d101      	bne.n	8000fde <keypad_read+0x96>
                return '7';
 8000fda:	2337      	movs	r3, #55	; 0x37
 8000fdc:	e05d      	b.n	800109a <keypad_read+0x152>
            else if (row == 3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d101      	bne.n	8000fe8 <keypad_read+0xa0>
                return '*';
 8000fe4:	232a      	movs	r3, #42	; 0x2a
 8000fe6:	e058      	b.n	800109a <keypad_read+0x152>
        }

        if (HAL_GPIO_ReadPin(GPIOA, COL2_PIN) == GPIO_PIN_SET) {
 8000fe8:	2102      	movs	r1, #2
 8000fea:	482f      	ldr	r0, [pc, #188]	; (80010a8 <keypad_read+0x160>)
 8000fec:	f000 feae 	bl	8001d4c <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d113      	bne.n	800101e <keypad_read+0xd6>
            if (row == 0)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <keypad_read+0xb8>
                return '2';
 8000ffc:	2332      	movs	r3, #50	; 0x32
 8000ffe:	e04c      	b.n	800109a <keypad_read+0x152>
            else if (row == 1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <keypad_read+0xc2>
                return '5';
 8001006:	2335      	movs	r3, #53	; 0x35
 8001008:	e047      	b.n	800109a <keypad_read+0x152>
            else if (row == 2)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d101      	bne.n	8001014 <keypad_read+0xcc>
                return '8';
 8001010:	2338      	movs	r3, #56	; 0x38
 8001012:	e042      	b.n	800109a <keypad_read+0x152>
            else if (row == 3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d101      	bne.n	800101e <keypad_read+0xd6>
                return '0';
 800101a:	2330      	movs	r3, #48	; 0x30
 800101c:	e03d      	b.n	800109a <keypad_read+0x152>
        }

        if (HAL_GPIO_ReadPin(GPIOA, COL3_PIN) == GPIO_PIN_SET) {
 800101e:	2110      	movs	r1, #16
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <keypad_read+0x160>)
 8001022:	f000 fe93 	bl	8001d4c <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d113      	bne.n	8001054 <keypad_read+0x10c>
            if (row == 0)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <keypad_read+0xee>
                return '3';
 8001032:	2333      	movs	r3, #51	; 0x33
 8001034:	e031      	b.n	800109a <keypad_read+0x152>
            else if (row == 1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <keypad_read+0xf8>
                return '6';
 800103c:	2336      	movs	r3, #54	; 0x36
 800103e:	e02c      	b.n	800109a <keypad_read+0x152>
            else if (row == 2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d101      	bne.n	800104a <keypad_read+0x102>
                return '9';
 8001046:	2339      	movs	r3, #57	; 0x39
 8001048:	e027      	b.n	800109a <keypad_read+0x152>
            else if (row == 3)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d101      	bne.n	8001054 <keypad_read+0x10c>
                return '#';
 8001050:	2323      	movs	r3, #35	; 0x23
 8001052:	e022      	b.n	800109a <keypad_read+0x152>
        }

        if (HAL_GPIO_ReadPin(GPIOB, COL4_PIN) == GPIO_PIN_SET) {
 8001054:	2101      	movs	r1, #1
 8001056:	4815      	ldr	r0, [pc, #84]	; (80010ac <keypad_read+0x164>)
 8001058:	f000 fe78 	bl	8001d4c <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d113      	bne.n	800108a <keypad_read+0x142>
            if (row == 0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <keypad_read+0x124>
                return '+';
 8001068:	232b      	movs	r3, #43	; 0x2b
 800106a:	e016      	b.n	800109a <keypad_read+0x152>
            else if (row == 1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <keypad_read+0x12e>
                return '-';
 8001072:	232d      	movs	r3, #45	; 0x2d
 8001074:	e011      	b.n	800109a <keypad_read+0x152>
            else if (row == 2)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d101      	bne.n	8001080 <keypad_read+0x138>
                return '/';
 800107c:	232f      	movs	r3, #47	; 0x2f
 800107e:	e00c      	b.n	800109a <keypad_read+0x152>
            else if (row == 3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d101      	bne.n	800108a <keypad_read+0x142>
                return 'D';
 8001086:	2344      	movs	r3, #68	; 0x44
 8001088:	e007      	b.n	800109a <keypad_read+0x152>
    for (int row = 0; row < 4; row++) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3301      	adds	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b03      	cmp	r3, #3
 8001094:	f77f af5e 	ble.w	8000f54 <keypad_read+0xc>
        }
    }

    // No key press detected
    return '\0';
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fb49 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f88f 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 f94f 	bl	8001360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010c2:	f000 f923 	bl	800130c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010c6:	f000 f8f3 	bl	80012b0 <MX_I2C1_Init>
  lcd_init();
 80010ca:	f7ff fe3c 	bl	8000d46 <lcd_init>
  /* USER CODE BEGIN 2 */
  lcd_put_cur(0, 0);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fe19 	bl	8000d08 <lcd_put_cur>
  HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f000 fbaa 	bl	8001830 <HAL_Delay>
  char str[2] = {'\0'};
 80010dc:	2300      	movs	r3, #0
 80010de:	85bb      	strh	r3, [r7, #44]	; 0x2c
  char expression[16*2] = {'\0'};
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]
  char ch;
  char ch_printed = 'x';
 80010f8:	2378      	movs	r3, #120	; 0x78
 80010fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int row, col, exp_index;
  row = col = exp_index = 0 ;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
 8001102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  ch = keypad_read();
 800110a:	f7ff ff1d 	bl	8000f48 <keypad_read>
 800110e:	4603      	mov	r3, r0
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if(ch!= '\0' && ch_printed != ch){
 8001114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001118:	2b00      	cmp	r3, #0
 800111a:	d057      	beq.n	80011cc <main+0x11c>
 800111c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001124:	429a      	cmp	r2, r3
 8001126:	d051      	beq.n	80011cc <main+0x11c>
		  alert();
 8001128:	f7ff fa2c 	bl	8000584 <alert>
		  if(ch!='#' && ch!='D'){
 800112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001130:	2b23      	cmp	r3, #35	; 0x23
 8001132:	d024      	beq.n	800117e <main+0xce>
 8001134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001138:	2b44      	cmp	r3, #68	; 0x44
 800113a:	d020      	beq.n	800117e <main+0xce>
			  expression[exp_index] = ch;
 800113c:	f107 020c 	add.w	r2, r7, #12
 8001140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001142:	4413      	add	r3, r2
 8001144:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001148:	701a      	strb	r2, [r3, #0]
			  str[0] = ch;
 800114a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			  lcd_put_cur(row, col);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdd5 	bl	8000d08 <lcd_put_cur>
			  lcd_send_string(str);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe2c 	bl	8000dc0 <lcd_send_string>
			  cursor_deplacement_right(&row, &col);
 8001168:	1d3a      	adds	r2, r7, #4
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe3a 	bl	8000dea <cursor_deplacement_right>
			  exp_index++;
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	3301      	adds	r3, #1
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
 800117c:	e026      	b.n	80011cc <main+0x11c>
		  }
		  else if(ch == '#'){
 800117e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001182:	2b23      	cmp	r3, #35	; 0x23
 8001184:	d119      	bne.n	80011ba <main+0x10a>
			  lcd_put_cur(row, col);
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fdbb 	bl	8000d08 <lcd_put_cur>
			  remove_cursor_element(&row, &col);
 8001192:	1d3a      	adds	r2, r7, #4
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe90 	bl	8000ec0 <remove_cursor_element>
			  expression[exp_index] = '\0';
 80011a0:	f107 020c 	add.w	r2, r7, #12
 80011a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a6:	4413      	add	r3, r2
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
			  if (exp_index != 0)
 80011ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <main+0x11c>
				  exp_index--;
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b4:	3b01      	subs	r3, #1
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
 80011b8:	e008      	b.n	80011cc <main+0x11c>
		  }
		  else if(ch == 'D'){
 80011ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011be:	2b44      	cmp	r3, #68	; 0x44
 80011c0:	d104      	bne.n	80011cc <main+0x11c>
			  calculate_and_display(expression);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fcea 	bl	8000ba0 <calculate_and_display>
		  }

	  }
	  ch_printed = ch;
 80011cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  HAL_Delay(200);
 80011d4:	20c8      	movs	r0, #200	; 0xc8
 80011d6:	f000 fb2b 	bl	8001830 <HAL_Delay>
	  ch = keypad_read();
 80011da:	e796      	b.n	800110a <main+0x5a>

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f9b0 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <SystemClock_Config+0xcc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <SystemClock_Config+0xcc>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <SystemClock_Config+0xcc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001228:	4a20      	ldr	r2, [pc, #128]	; (80012ac <SystemClock_Config+0xd0>)
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <SystemClock_Config+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001250:	2304      	movs	r3, #4
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001254:	2348      	movs	r3, #72	; 0x48
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800125c:	2307      	movs	r3, #7
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f001 f9ef 	bl	8002648 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001270:	f000 f912 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2102      	movs	r1, #2
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fc51 	bl	8002b38 <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800129c:	f000 f8fc 	bl	8001498 <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3750      	adds	r7, #80	; 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_I2C1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x50>)
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_I2C1_Init+0x58>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ee:	f000 fd5f 	bl	8001db0 <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 f8ce 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000008c 	.word	0x2000008c
 8001304:	40005400 	.word	0x40005400
 8001308:	000186a0 	.word	0x000186a0

0800130c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART2_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001344:	f001 fe18 	bl	8002f78 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 f8a3 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000e0 	.word	0x200000e0
 800135c:	40004400 	.word	0x40004400

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b43      	ldr	r3, [pc, #268]	; (8001488 <MX_GPIO_Init+0x128>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a42      	ldr	r2, [pc, #264]	; (8001488 <MX_GPIO_Init+0x128>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <MX_GPIO_Init+0x128>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_GPIO_Init+0x128>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <MX_GPIO_Init+0x128>)
 800139c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_GPIO_Init+0x128>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <MX_GPIO_Init+0x128>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a34      	ldr	r2, [pc, #208]	; (8001488 <MX_GPIO_Init+0x128>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <MX_GPIO_Init+0x128>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <MX_GPIO_Init+0x128>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <MX_GPIO_Init+0x128>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_GPIO_Init+0x128>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	4828      	ldr	r0, [pc, #160]	; (800148c <MX_GPIO_Init+0x12c>)
 80013ec:	f000 fcc6 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2120      	movs	r1, #32
 80013f4:	4826      	ldr	r0, [pc, #152]	; (8001490 <MX_GPIO_Init+0x130>)
 80013f6:	f000 fcc1 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001400:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	481e      	ldr	r0, [pc, #120]	; (800148c <MX_GPIO_Init+0x12c>)
 8001412:	f000 fb17 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001416:	230f      	movs	r3, #15
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4817      	ldr	r0, [pc, #92]	; (800148c <MX_GPIO_Init+0x12c>)
 800142e:	f000 fb09 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001432:	2313      	movs	r3, #19
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800143a:	2302      	movs	r3, #2
 800143c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <MX_GPIO_Init+0x130>)
 8001446:	f000 fafd 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144a:	2320      	movs	r3, #32
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001452:	2302      	movs	r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0x130>)
 8001462:	f000 faef 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_GPIO_Init+0x134>)
 800147a:	f000 fae3 	bl	8001a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40020800 	.word	0x40020800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014e2:	2007      	movs	r0, #7
 80014e4:	f000 fa7a 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_I2C_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_I2C_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_I2C_MspInit+0x8c>)
 8001550:	f000 fa78 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_I2C_MspInit+0x88>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_I2C_MspInit+0x88>)
 800155e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005400 	.word	0x40005400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12b      	bne.n	80015fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ee:	2307      	movs	r3, #7
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x8c>)
 80015fa:	f000 fa23 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 f8c6 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f001 ff30 	bl	80034fc <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20018000 	.word	0x20018000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	20000124 	.word	0x20000124
 80016d0:	20000140 	.word	0x20000140

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001714:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001722:	f7ff ffd7 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001726:	f001 feef 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7ff fcc1 	bl	80010b0 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001730:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800173c:	08003fe4 	.word	0x08003fe4
  ldr r2, =_sbss
 8001740:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001744:	2000013c 	.word	0x2000013c

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f931 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fe90 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f93b 	bl	8001a2a <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f911 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20000128 	.word	0x20000128

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000128 	.word	0x20000128

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffde 	bl	8001818 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff47 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff5c 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff8e 	bl	8001930 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffb0 	bl	8001998 <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e159      	b.n	8001d14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8148 	bne.w	8001d0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d005      	beq.n	8001a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d130      	bne.n	8001af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d017      	beq.n	8001b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a2 	beq.w	8001d0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <HAL_GPIO_Init+0x2e8>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x2e8>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <HAL_GPIO_Init+0x2e8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x2ec>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x202>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x1fe>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a47      	ldr	r2, [pc, #284]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a46      	ldr	r2, [pc, #280]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x1f6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a45      	ldr	r2, [pc, #276]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x1f2>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c46:	2300      	movs	r3, #0
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x2ec>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	f67f aea2 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e12b      	b.n	800201a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fb8c 	bl	80014f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e14:	f001 f888 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8001e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a81      	ldr	r2, [pc, #516]	; (8002024 <HAL_I2C_Init+0x274>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d807      	bhi.n	8001e34 <HAL_I2C_Init+0x84>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a80      	ldr	r2, [pc, #512]	; (8002028 <HAL_I2C_Init+0x278>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e006      	b.n	8001e42 <HAL_I2C_Init+0x92>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a7d      	ldr	r2, [pc, #500]	; (800202c <HAL_I2C_Init+0x27c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0e7      	b.n	800201a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a78      	ldr	r2, [pc, #480]	; (8002030 <HAL_I2C_Init+0x280>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_I2C_Init+0x274>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <HAL_I2C_Init+0xd4>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	e009      	b.n	8001e98 <HAL_I2C_Init+0xe8>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_I2C_Init+0x284>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	3301      	adds	r3, #1
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	495c      	ldr	r1, [pc, #368]	; (8002024 <HAL_I2C_Init+0x274>)
 8001eb4:	428b      	cmp	r3, r1
 8001eb6:	d819      	bhi.n	8001eec <HAL_I2C_Init+0x13c>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e59      	subs	r1, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec6:	1c59      	adds	r1, r3, #1
 8001ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ecc:	400b      	ands	r3, r1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_I2C_Init+0x138>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e59      	subs	r1, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee6:	e051      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e04f      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_I2C_Init+0x168>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e012      	b.n	8001f3e <HAL_I2C_Init+0x18e>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e58      	subs	r0, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	0099      	lsls	r1, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Init+0x196>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e022      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10e      	bne.n	8001f6c <HAL_I2C_Init+0x1bc>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e58      	subs	r0, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6859      	ldr	r1, [r3, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	440b      	add	r3, r1
 8001f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6a:	e00f      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	6809      	ldr	r1, [r1, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6911      	ldr	r1, [r2, #16]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68d2      	ldr	r2, [r2, #12]
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	000186a0 	.word	0x000186a0
 8002028:	001e847f 	.word	0x001e847f
 800202c:	003d08ff 	.word	0x003d08ff
 8002030:	431bde83 	.word	0x431bde83
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	461a      	mov	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	817b      	strh	r3, [r7, #10]
 8002048:	4613      	mov	r3, r2
 800204a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fbe4 	bl	8001818 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	f040 80e0 	bne.w	8002220 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2319      	movs	r3, #25
 8002066:	2201      	movs	r2, #1
 8002068:	4970      	ldr	r1, [pc, #448]	; (800222c <HAL_I2C_Master_Transmit+0x1f4>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f964 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	e0d3      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_I2C_Master_Transmit+0x50>
 8002084:	2302      	movs	r3, #2
 8002086:	e0cc      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d007      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2221      	movs	r2, #33	; 0x21
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2210      	movs	r2, #16
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a50      	ldr	r2, [pc, #320]	; (8002230 <HAL_I2C_Master_Transmit+0x1f8>)
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f89c 	bl	8002234 <I2C_MasterRequestWrite>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e08d      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800211c:	e066      	b.n	80021ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f9de 	bl	80024e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b04      	cmp	r3, #4
 8002134:	d107      	bne.n	8002146 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06b      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b04      	cmp	r3, #4
 8002186:	d11b      	bne.n	80021c0 <HAL_I2C_Master_Transmit+0x188>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d017      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6a39      	ldr	r1, [r7, #32]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f9ce 	bl	8002566 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e01a      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d194      	bne.n	800211e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	e000      	b.n	8002222 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002220:	2302      	movs	r3, #2
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	00100002 	.word	0x00100002
 8002230:	ffff0000 	.word	0xffff0000

08002234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d006      	beq.n	800225e <I2C_MasterRequestWrite+0x2a>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d003      	beq.n	800225e <I2C_MasterRequestWrite+0x2a>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800225c:	d108      	bne.n	8002270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e00b      	b.n	8002288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	2b12      	cmp	r3, #18
 8002276:	d107      	bne.n	8002288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f84f 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ae:	d103      	bne.n	80022b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e035      	b.n	8002328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c4:	d108      	bne.n	80022d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022c6:	897b      	ldrh	r3, [r7, #10]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022d4:	611a      	str	r2, [r3, #16]
 80022d6:	e01b      	b.n	8002310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022d8:	897b      	ldrh	r3, [r7, #10]
 80022da:	11db      	asrs	r3, r3, #7
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0306 	and.w	r3, r3, #6
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f063 030f 	orn	r3, r3, #15
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <I2C_MasterRequestWrite+0xfc>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f875 	bl	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e010      	b.n	8002328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002306:	897b      	ldrh	r3, [r7, #10]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <I2C_MasterRequestWrite+0x100>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f865 	bl	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	00010008 	.word	0x00010008
 8002334:	00010002 	.word	0x00010002

08002338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	e025      	b.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d021      	beq.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7ff fa61 	bl	8001818 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e023      	b.n	80023de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10d      	bne.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4013      	ands	r3, r2
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	e00c      	b.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d0b6      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f4:	e051      	b.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002404:	d123      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800241e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e046      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d021      	beq.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7ff f9df 	bl	8001818 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e020      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10c      	bne.n	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4013      	ands	r3, r2
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e00b      	b.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4013      	ands	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d18d      	bne.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f0:	e02d      	b.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f878 	bl	80025e8 <I2C_IsAcknowledgeFailed>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e02d      	b.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d021      	beq.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff f985 	bl	8001818 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d1ca      	bne.n	80024f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002572:	e02d      	b.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f837 	bl	80025e8 <I2C_IsAcknowledgeFailed>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02d      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d021      	beq.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff f944 	bl	8001818 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d1ca      	bne.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	d11b      	bne.n	8002638 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002608:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e267      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d075      	beq.n	8002752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00c      	beq.n	800268c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	2b08      	cmp	r3, #8
 800267c:	d112      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05b      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d157      	bne.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e242      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x74>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6f      	ldr	r2, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff f88a 	bl	8001818 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff f886 	bl	8001818 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e207      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xc0>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff f876 	bl	8001818 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff f872 	bl	8001818 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1f3      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1c7      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff f82b 	bl	8001818 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff f827 	bl	8001818 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1a8      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff f80a 	bl	8001818 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7ff f806 	bl	8001818 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e187      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d036      	beq.n	80028a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe ffea 	bl	8001818 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe ffe6 	bl	8001818 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e167      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x200>
 8002866:	e01b      	b.n	80028a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe ffd3 	bl	8001818 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe ffcf 	bl	8001818 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e150      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ea      	bne.n	8002876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b77      	ldr	r3, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b74      	ldr	r3, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe ff8f 	bl	8001818 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe ff8b 	bl	8001818 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e10c      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x2ea>
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x30c>
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5b      	ldr	r2, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe ff50 	bl	8001818 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe ff4c 	bl	8001818 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0cb      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCC_OscConfig+0x334>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe ff3a 	bl	8001818 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe ff36 	bl	8001818 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0b5      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a1 	beq.w	8002b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d05c      	beq.n	8002aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d141      	bne.n	8002a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff0a 	bl	8001818 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe ff06 	bl	8001818 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e087      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fedf 	bl	8001818 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fedb 	bl	8001818 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e05c      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x416>
 8002a7c:	e054      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fec8 	bl	8001818 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fec4 	bl	8001818 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e045      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
 8002aaa:	e03d      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e038      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x4ec>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d028      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d121      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d90c      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d044      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d119      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e067      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fdf6 	bl	8001818 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe fdf2 	bl	8001818 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e04f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20c      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fd56 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08003e88 	.word	0x08003e88
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d08:	b094      	sub	sp, #80	; 0x50
 8002d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d14:	2300      	movs	r3, #0
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1c:	4b79      	ldr	r3, [pc, #484]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d00d      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	f200 80e1 	bhi.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x34>
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d003      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d36:	e0db      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d3c:	e0db      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d42:	e0d8      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d44:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	2200      	movs	r2, #0
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
 8002d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d76:	4622      	mov	r2, r4
 8002d78:	462b      	mov	r3, r5
 8002d7a:	f04f 0000 	mov.w	r0, #0
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	0159      	lsls	r1, r3, #5
 8002d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d88:	0150      	lsls	r0, r2, #5
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4621      	mov	r1, r4
 8002d90:	1a51      	subs	r1, r2, r1
 8002d92:	6139      	str	r1, [r7, #16]
 8002d94:	4629      	mov	r1, r5
 8002d96:	eb63 0301 	sbc.w	r3, r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	018b      	lsls	r3, r1, #6
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002db2:	4651      	mov	r1, sl
 8002db4:	018a      	lsls	r2, r1, #6
 8002db6:	4651      	mov	r1, sl
 8002db8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	4699      	mov	r9, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	eb18 0303 	adds.w	r3, r8, r3
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	462b      	mov	r3, r5
 8002de4:	eb49 0303 	adc.w	r3, r9, r3
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002df6:	4629      	mov	r1, r5
 8002df8:	024b      	lsls	r3, r1, #9
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e00:	4621      	mov	r1, r4
 8002e02:	024a      	lsls	r2, r1, #9
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e14:	f7fd fa34 	bl	8000280 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	e058      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0159      	lsls	r1, r3, #5
 8002e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4e:	0150      	lsls	r0, r2, #5
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4641      	mov	r1, r8
 8002e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e74:	ebb2 040a 	subs.w	r4, r2, sl
 8002e78:	eb63 050b 	sbc.w	r5, r3, fp
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	00eb      	lsls	r3, r5, #3
 8002e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8a:	00e2      	lsls	r2, r4, #3
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4643      	mov	r3, r8
 8002e92:	18e3      	adds	r3, r4, r3
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	464b      	mov	r3, r9
 8002e98:	eb45 0303 	adc.w	r3, r5, r3
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	61fa      	str	r2, [r7, #28]
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	f7fd f9da 	bl	8000280 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3750      	adds	r7, #80	; 0x50
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	08003e98 	.word	0x08003e98

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffdc 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	08003e98 	.word	0x08003e98

08002f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03f      	b.n	800300a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe faf0 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f829 	bl	8003014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b0c0      	sub	sp, #256	; 0x100
 800301a:	af00      	add	r7, sp, #0
 800301c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	68d9      	ldr	r1, [r3, #12]
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	ea40 0301 	orr.w	r3, r0, r1
 800303c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800306c:	f021 010c 	bic.w	r1, r1, #12
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800307a:	430b      	orrs	r3, r1
 800307c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308e:	6999      	ldr	r1, [r3, #24]
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	ea40 0301 	orr.w	r3, r0, r1
 800309a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <UART_SetConfig+0x2cc>)
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d005      	beq.n	80030b4 <UART_SetConfig+0xa0>
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <UART_SetConfig+0x2d0>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d104      	bne.n	80030be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7ff ff4c 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80030b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030bc:	e003      	b.n	80030c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030be:	f7ff ff33 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 80030c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	f040 810c 	bne.w	80032ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030e6:	4622      	mov	r2, r4
 80030e8:	462b      	mov	r3, r5
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ee:	415b      	adcs	r3, r3
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030f6:	4621      	mov	r1, r4
 80030f8:	eb12 0801 	adds.w	r8, r2, r1
 80030fc:	4629      	mov	r1, r5
 80030fe:	eb43 0901 	adc.w	r9, r3, r1
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800310e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003116:	4690      	mov	r8, r2
 8003118:	4699      	mov	r9, r3
 800311a:	4623      	mov	r3, r4
 800311c:	eb18 0303 	adds.w	r3, r8, r3
 8003120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003124:	462b      	mov	r3, r5
 8003126:	eb49 0303 	adc.w	r3, r9, r3
 800312a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800313a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800313e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003142:	460b      	mov	r3, r1
 8003144:	18db      	adds	r3, r3, r3
 8003146:	653b      	str	r3, [r7, #80]	; 0x50
 8003148:	4613      	mov	r3, r2
 800314a:	eb42 0303 	adc.w	r3, r2, r3
 800314e:	657b      	str	r3, [r7, #84]	; 0x54
 8003150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003158:	f7fd f892 	bl	8000280 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <UART_SetConfig+0x2d4>)
 8003162:	fba3 2302 	umull	r2, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	011c      	lsls	r4, r3, #4
 800316a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	64b9      	str	r1, [r7, #72]	; 0x48
 8003184:	415b      	adcs	r3, r3
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800318c:	4641      	mov	r1, r8
 800318e:	eb12 0a01 	adds.w	sl, r2, r1
 8003192:	4649      	mov	r1, r9
 8003194:	eb43 0b01 	adc.w	fp, r3, r1
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ac:	4692      	mov	sl, r2
 80031ae:	469b      	mov	fp, r3
 80031b0:	4643      	mov	r3, r8
 80031b2:	eb1a 0303 	adds.w	r3, sl, r3
 80031b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ba:	464b      	mov	r3, r9
 80031bc:	eb4b 0303 	adc.w	r3, fp, r3
 80031c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031d8:	460b      	mov	r3, r1
 80031da:	18db      	adds	r3, r3, r3
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
 80031de:	4613      	mov	r3, r2
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
 80031e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031ee:	f7fd f847 	bl	8000280 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <UART_SetConfig+0x2d4>)
 80031fa:	fba3 2301 	umull	r2, r3, r3, r1
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2264      	movs	r2, #100	; 0x64
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	1acb      	subs	r3, r1, r3
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <UART_SetConfig+0x2d4>)
 8003210:	fba3 2302 	umull	r2, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800321c:	441c      	add	r4, r3
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800322c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	63b9      	str	r1, [r7, #56]	; 0x38
 8003238:	415b      	adcs	r3, r3
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003240:	4641      	mov	r1, r8
 8003242:	1851      	adds	r1, r2, r1
 8003244:	6339      	str	r1, [r7, #48]	; 0x30
 8003246:	4649      	mov	r1, r9
 8003248:	414b      	adcs	r3, r1
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003258:	4659      	mov	r1, fp
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003262:	4651      	mov	r1, sl
 8003264:	00ca      	lsls	r2, r1, #3
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	4603      	mov	r3, r0
 800326c:	4642      	mov	r2, r8
 800326e:	189b      	adds	r3, r3, r2
 8003270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003274:	464b      	mov	r3, r9
 8003276:	460a      	mov	r2, r1
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800328c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003294:	460b      	mov	r3, r1
 8003296:	18db      	adds	r3, r3, r3
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
 800329a:	4613      	mov	r3, r2
 800329c:	eb42 0303 	adc.w	r3, r2, r3
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032aa:	f7fc ffe9 	bl	8000280 <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <UART_SetConfig+0x2d4>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	3332      	adds	r3, #50	; 0x32
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <UART_SetConfig+0x2d4>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4422      	add	r2, r4
 80032da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032dc:	e105      	b.n	80034ea <UART_SetConfig+0x4d6>
 80032de:	bf00      	nop
 80032e0:	40011000 	.word	0x40011000
 80032e4:	40011400 	.word	0x40011400
 80032e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032fe:	4642      	mov	r2, r8
 8003300:	464b      	mov	r3, r9
 8003302:	1891      	adds	r1, r2, r2
 8003304:	6239      	str	r1, [r7, #32]
 8003306:	415b      	adcs	r3, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800330e:	4641      	mov	r1, r8
 8003310:	1854      	adds	r4, r2, r1
 8003312:	4649      	mov	r1, r9
 8003314:	eb43 0501 	adc.w	r5, r3, r1
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	00eb      	lsls	r3, r5, #3
 8003322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003326:	00e2      	lsls	r2, r4, #3
 8003328:	4614      	mov	r4, r2
 800332a:	461d      	mov	r5, r3
 800332c:	4643      	mov	r3, r8
 800332e:	18e3      	adds	r3, r4, r3
 8003330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003334:	464b      	mov	r3, r9
 8003336:	eb45 0303 	adc.w	r3, r5, r3
 800333a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800334a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800335a:	4629      	mov	r1, r5
 800335c:	008b      	lsls	r3, r1, #2
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003364:	4621      	mov	r1, r4
 8003366:	008a      	lsls	r2, r1, #2
 8003368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800336c:	f7fc ff88 	bl	8000280 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <UART_SetConfig+0x4e4>)
 8003376:	fba3 2302 	umull	r2, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	011c      	lsls	r4, r3, #4
 800337e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800338c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	1891      	adds	r1, r2, r2
 8003396:	61b9      	str	r1, [r7, #24]
 8003398:	415b      	adcs	r3, r3
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a0:	4641      	mov	r1, r8
 80033a2:	1851      	adds	r1, r2, r1
 80033a4:	6139      	str	r1, [r7, #16]
 80033a6:	4649      	mov	r1, r9
 80033a8:	414b      	adcs	r3, r1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b8:	4659      	mov	r1, fp
 80033ba:	00cb      	lsls	r3, r1, #3
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c2:	4651      	mov	r1, sl
 80033c4:	00ca      	lsls	r2, r1, #3
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	4642      	mov	r2, r8
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d4:	464b      	mov	r3, r9
 80033d6:	460a      	mov	r2, r1
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033f8:	4649      	mov	r1, r9
 80033fa:	008b      	lsls	r3, r1, #2
 80033fc:	4641      	mov	r1, r8
 80033fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003402:	4641      	mov	r1, r8
 8003404:	008a      	lsls	r2, r1, #2
 8003406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800340a:	f7fc ff39 	bl	8000280 <__aeabi_uldivmod>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <UART_SetConfig+0x4e4>)
 8003414:	fba3 1302 	umull	r1, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	2164      	movs	r1, #100	; 0x64
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	3332      	adds	r3, #50	; 0x32
 8003426:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <UART_SetConfig+0x4e4>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003432:	441c      	add	r4, r3
 8003434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003438:	2200      	movs	r2, #0
 800343a:	673b      	str	r3, [r7, #112]	; 0x70
 800343c:	677a      	str	r2, [r7, #116]	; 0x74
 800343e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003442:	4642      	mov	r2, r8
 8003444:	464b      	mov	r3, r9
 8003446:	1891      	adds	r1, r2, r2
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	415b      	adcs	r3, r3
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003452:	4641      	mov	r1, r8
 8003454:	1851      	adds	r1, r2, r1
 8003456:	6039      	str	r1, [r7, #0]
 8003458:	4649      	mov	r1, r9
 800345a:	414b      	adcs	r3, r1
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800346a:	4659      	mov	r1, fp
 800346c:	00cb      	lsls	r3, r1, #3
 800346e:	4651      	mov	r1, sl
 8003470:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003474:	4651      	mov	r1, sl
 8003476:	00ca      	lsls	r2, r1, #3
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	4603      	mov	r3, r0
 800347e:	4642      	mov	r2, r8
 8003480:	189b      	adds	r3, r3, r2
 8003482:	66bb      	str	r3, [r7, #104]	; 0x68
 8003484:	464b      	mov	r3, r9
 8003486:	460a      	mov	r2, r1
 8003488:	eb42 0303 	adc.w	r3, r2, r3
 800348c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	663b      	str	r3, [r7, #96]	; 0x60
 8003498:	667a      	str	r2, [r7, #100]	; 0x64
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034a6:	4649      	mov	r1, r9
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	4641      	mov	r1, r8
 80034ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b0:	4641      	mov	r1, r8
 80034b2:	008a      	lsls	r2, r1, #2
 80034b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034b8:	f7fc fee2 	bl	8000280 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 1302 	umull	r1, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2164      	movs	r1, #100	; 0x64
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	3332      	adds	r3, #50	; 0x32
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <UART_SetConfig+0x4e4>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4422      	add	r2, r4
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	bf00      	nop
 80034ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop
 80034f8:	51eb851f 	.word	0x51eb851f

080034fc <__errno>:
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <__errno+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2000000c 	.word	0x2000000c

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4d0d      	ldr	r5, [pc, #52]	; (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2600      	movs	r6, #0
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4d0b      	ldr	r5, [pc, #44]	; (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	; (800354c <__libc_init_array+0x44>)
 800351c:	f000 fc8e 	bl	8003e3c <_init>
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2600      	movs	r6, #0
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003fdc 	.word	0x08003fdc
 8003544:	08003fdc 	.word	0x08003fdc
 8003548:	08003fdc 	.word	0x08003fdc
 800354c:	08003fe0 	.word	0x08003fe0

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <siprintf>:
 8003560:	b40e      	push	{r1, r2, r3}
 8003562:	b500      	push	{lr}
 8003564:	b09c      	sub	sp, #112	; 0x70
 8003566:	ab1d      	add	r3, sp, #116	; 0x74
 8003568:	9002      	str	r0, [sp, #8]
 800356a:	9006      	str	r0, [sp, #24]
 800356c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <siprintf+0x38>)
 8003572:	9107      	str	r1, [sp, #28]
 8003574:	9104      	str	r1, [sp, #16]
 8003576:	4909      	ldr	r1, [pc, #36]	; (800359c <siprintf+0x3c>)
 8003578:	f853 2b04 	ldr.w	r2, [r3], #4
 800357c:	9105      	str	r1, [sp, #20]
 800357e:	6800      	ldr	r0, [r0, #0]
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	a902      	add	r1, sp, #8
 8003584:	f000 f868 	bl	8003658 <_svfiprintf_r>
 8003588:	9b02      	ldr	r3, [sp, #8]
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	b01c      	add	sp, #112	; 0x70
 8003590:	f85d eb04 	ldr.w	lr, [sp], #4
 8003594:	b003      	add	sp, #12
 8003596:	4770      	bx	lr
 8003598:	2000000c 	.word	0x2000000c
 800359c:	ffff0208 	.word	0xffff0208

080035a0 <__ssputs_r>:
 80035a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	688e      	ldr	r6, [r1, #8]
 80035a6:	429e      	cmp	r6, r3
 80035a8:	4682      	mov	sl, r0
 80035aa:	460c      	mov	r4, r1
 80035ac:	4690      	mov	r8, r2
 80035ae:	461f      	mov	r7, r3
 80035b0:	d838      	bhi.n	8003624 <__ssputs_r+0x84>
 80035b2:	898a      	ldrh	r2, [r1, #12]
 80035b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035b8:	d032      	beq.n	8003620 <__ssputs_r+0x80>
 80035ba:	6825      	ldr	r5, [r4, #0]
 80035bc:	6909      	ldr	r1, [r1, #16]
 80035be:	eba5 0901 	sub.w	r9, r5, r1
 80035c2:	6965      	ldr	r5, [r4, #20]
 80035c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035cc:	3301      	adds	r3, #1
 80035ce:	444b      	add	r3, r9
 80035d0:	106d      	asrs	r5, r5, #1
 80035d2:	429d      	cmp	r5, r3
 80035d4:	bf38      	it	cc
 80035d6:	461d      	movcc	r5, r3
 80035d8:	0553      	lsls	r3, r2, #21
 80035da:	d531      	bpl.n	8003640 <__ssputs_r+0xa0>
 80035dc:	4629      	mov	r1, r5
 80035de:	f000 fb63 	bl	8003ca8 <_malloc_r>
 80035e2:	4606      	mov	r6, r0
 80035e4:	b950      	cbnz	r0, 80035fc <__ssputs_r+0x5c>
 80035e6:	230c      	movs	r3, #12
 80035e8:	f8ca 3000 	str.w	r3, [sl]
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	6921      	ldr	r1, [r4, #16]
 80035fe:	464a      	mov	r2, r9
 8003600:	f000 fabe 	bl	8003b80 <memcpy>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	6126      	str	r6, [r4, #16]
 8003612:	6165      	str	r5, [r4, #20]
 8003614:	444e      	add	r6, r9
 8003616:	eba5 0509 	sub.w	r5, r5, r9
 800361a:	6026      	str	r6, [r4, #0]
 800361c:	60a5      	str	r5, [r4, #8]
 800361e:	463e      	mov	r6, r7
 8003620:	42be      	cmp	r6, r7
 8003622:	d900      	bls.n	8003626 <__ssputs_r+0x86>
 8003624:	463e      	mov	r6, r7
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	4632      	mov	r2, r6
 800362a:	4641      	mov	r1, r8
 800362c:	f000 fab6 	bl	8003b9c <memmove>
 8003630:	68a3      	ldr	r3, [r4, #8]
 8003632:	1b9b      	subs	r3, r3, r6
 8003634:	60a3      	str	r3, [r4, #8]
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	4433      	add	r3, r6
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	2000      	movs	r0, #0
 800363e:	e7db      	b.n	80035f8 <__ssputs_r+0x58>
 8003640:	462a      	mov	r2, r5
 8003642:	f000 fba5 	bl	8003d90 <_realloc_r>
 8003646:	4606      	mov	r6, r0
 8003648:	2800      	cmp	r0, #0
 800364a:	d1e1      	bne.n	8003610 <__ssputs_r+0x70>
 800364c:	6921      	ldr	r1, [r4, #16]
 800364e:	4650      	mov	r0, sl
 8003650:	f000 fabe 	bl	8003bd0 <_free_r>
 8003654:	e7c7      	b.n	80035e6 <__ssputs_r+0x46>
	...

08003658 <_svfiprintf_r>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	4698      	mov	r8, r3
 800365e:	898b      	ldrh	r3, [r1, #12]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	b09d      	sub	sp, #116	; 0x74
 8003664:	4607      	mov	r7, r0
 8003666:	460d      	mov	r5, r1
 8003668:	4614      	mov	r4, r2
 800366a:	d50e      	bpl.n	800368a <_svfiprintf_r+0x32>
 800366c:	690b      	ldr	r3, [r1, #16]
 800366e:	b963      	cbnz	r3, 800368a <_svfiprintf_r+0x32>
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	f000 fb19 	bl	8003ca8 <_malloc_r>
 8003676:	6028      	str	r0, [r5, #0]
 8003678:	6128      	str	r0, [r5, #16]
 800367a:	b920      	cbnz	r0, 8003686 <_svfiprintf_r+0x2e>
 800367c:	230c      	movs	r3, #12
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e0d1      	b.n	800382a <_svfiprintf_r+0x1d2>
 8003686:	2340      	movs	r3, #64	; 0x40
 8003688:	616b      	str	r3, [r5, #20]
 800368a:	2300      	movs	r3, #0
 800368c:	9309      	str	r3, [sp, #36]	; 0x24
 800368e:	2320      	movs	r3, #32
 8003690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003694:	f8cd 800c 	str.w	r8, [sp, #12]
 8003698:	2330      	movs	r3, #48	; 0x30
 800369a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003844 <_svfiprintf_r+0x1ec>
 800369e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036a2:	f04f 0901 	mov.w	r9, #1
 80036a6:	4623      	mov	r3, r4
 80036a8:	469a      	mov	sl, r3
 80036aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ae:	b10a      	cbz	r2, 80036b4 <_svfiprintf_r+0x5c>
 80036b0:	2a25      	cmp	r2, #37	; 0x25
 80036b2:	d1f9      	bne.n	80036a8 <_svfiprintf_r+0x50>
 80036b4:	ebba 0b04 	subs.w	fp, sl, r4
 80036b8:	d00b      	beq.n	80036d2 <_svfiprintf_r+0x7a>
 80036ba:	465b      	mov	r3, fp
 80036bc:	4622      	mov	r2, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	4638      	mov	r0, r7
 80036c2:	f7ff ff6d 	bl	80035a0 <__ssputs_r>
 80036c6:	3001      	adds	r0, #1
 80036c8:	f000 80aa 	beq.w	8003820 <_svfiprintf_r+0x1c8>
 80036cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ce:	445a      	add	r2, fp
 80036d0:	9209      	str	r2, [sp, #36]	; 0x24
 80036d2:	f89a 3000 	ldrb.w	r3, [sl]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a2 	beq.w	8003820 <_svfiprintf_r+0x1c8>
 80036dc:	2300      	movs	r3, #0
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
 80036e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e6:	f10a 0a01 	add.w	sl, sl, #1
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	9307      	str	r3, [sp, #28]
 80036ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036f2:	931a      	str	r3, [sp, #104]	; 0x68
 80036f4:	4654      	mov	r4, sl
 80036f6:	2205      	movs	r2, #5
 80036f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036fc:	4851      	ldr	r0, [pc, #324]	; (8003844 <_svfiprintf_r+0x1ec>)
 80036fe:	f7fc fd6f 	bl	80001e0 <memchr>
 8003702:	9a04      	ldr	r2, [sp, #16]
 8003704:	b9d8      	cbnz	r0, 800373e <_svfiprintf_r+0xe6>
 8003706:	06d0      	lsls	r0, r2, #27
 8003708:	bf44      	itt	mi
 800370a:	2320      	movmi	r3, #32
 800370c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003710:	0711      	lsls	r1, r2, #28
 8003712:	bf44      	itt	mi
 8003714:	232b      	movmi	r3, #43	; 0x2b
 8003716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800371a:	f89a 3000 	ldrb.w	r3, [sl]
 800371e:	2b2a      	cmp	r3, #42	; 0x2a
 8003720:	d015      	beq.n	800374e <_svfiprintf_r+0xf6>
 8003722:	9a07      	ldr	r2, [sp, #28]
 8003724:	4654      	mov	r4, sl
 8003726:	2000      	movs	r0, #0
 8003728:	f04f 0c0a 	mov.w	ip, #10
 800372c:	4621      	mov	r1, r4
 800372e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003732:	3b30      	subs	r3, #48	; 0x30
 8003734:	2b09      	cmp	r3, #9
 8003736:	d94e      	bls.n	80037d6 <_svfiprintf_r+0x17e>
 8003738:	b1b0      	cbz	r0, 8003768 <_svfiprintf_r+0x110>
 800373a:	9207      	str	r2, [sp, #28]
 800373c:	e014      	b.n	8003768 <_svfiprintf_r+0x110>
 800373e:	eba0 0308 	sub.w	r3, r0, r8
 8003742:	fa09 f303 	lsl.w	r3, r9, r3
 8003746:	4313      	orrs	r3, r2
 8003748:	9304      	str	r3, [sp, #16]
 800374a:	46a2      	mov	sl, r4
 800374c:	e7d2      	b.n	80036f4 <_svfiprintf_r+0x9c>
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	9103      	str	r1, [sp, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	bfbb      	ittet	lt
 800375a:	425b      	neglt	r3, r3
 800375c:	f042 0202 	orrlt.w	r2, r2, #2
 8003760:	9307      	strge	r3, [sp, #28]
 8003762:	9307      	strlt	r3, [sp, #28]
 8003764:	bfb8      	it	lt
 8003766:	9204      	strlt	r2, [sp, #16]
 8003768:	7823      	ldrb	r3, [r4, #0]
 800376a:	2b2e      	cmp	r3, #46	; 0x2e
 800376c:	d10c      	bne.n	8003788 <_svfiprintf_r+0x130>
 800376e:	7863      	ldrb	r3, [r4, #1]
 8003770:	2b2a      	cmp	r3, #42	; 0x2a
 8003772:	d135      	bne.n	80037e0 <_svfiprintf_r+0x188>
 8003774:	9b03      	ldr	r3, [sp, #12]
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	9203      	str	r2, [sp, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	bfb8      	it	lt
 8003780:	f04f 33ff 	movlt.w	r3, #4294967295
 8003784:	3402      	adds	r4, #2
 8003786:	9305      	str	r3, [sp, #20]
 8003788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003854 <_svfiprintf_r+0x1fc>
 800378c:	7821      	ldrb	r1, [r4, #0]
 800378e:	2203      	movs	r2, #3
 8003790:	4650      	mov	r0, sl
 8003792:	f7fc fd25 	bl	80001e0 <memchr>
 8003796:	b140      	cbz	r0, 80037aa <_svfiprintf_r+0x152>
 8003798:	2340      	movs	r3, #64	; 0x40
 800379a:	eba0 000a 	sub.w	r0, r0, sl
 800379e:	fa03 f000 	lsl.w	r0, r3, r0
 80037a2:	9b04      	ldr	r3, [sp, #16]
 80037a4:	4303      	orrs	r3, r0
 80037a6:	3401      	adds	r4, #1
 80037a8:	9304      	str	r3, [sp, #16]
 80037aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ae:	4826      	ldr	r0, [pc, #152]	; (8003848 <_svfiprintf_r+0x1f0>)
 80037b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037b4:	2206      	movs	r2, #6
 80037b6:	f7fc fd13 	bl	80001e0 <memchr>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d038      	beq.n	8003830 <_svfiprintf_r+0x1d8>
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <_svfiprintf_r+0x1f4>)
 80037c0:	bb1b      	cbnz	r3, 800380a <_svfiprintf_r+0x1b2>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	3307      	adds	r3, #7
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	3308      	adds	r3, #8
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d0:	4433      	add	r3, r6
 80037d2:	9309      	str	r3, [sp, #36]	; 0x24
 80037d4:	e767      	b.n	80036a6 <_svfiprintf_r+0x4e>
 80037d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037da:	460c      	mov	r4, r1
 80037dc:	2001      	movs	r0, #1
 80037de:	e7a5      	b.n	800372c <_svfiprintf_r+0xd4>
 80037e0:	2300      	movs	r3, #0
 80037e2:	3401      	adds	r4, #1
 80037e4:	9305      	str	r3, [sp, #20]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f04f 0c0a 	mov.w	ip, #10
 80037ec:	4620      	mov	r0, r4
 80037ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f2:	3a30      	subs	r2, #48	; 0x30
 80037f4:	2a09      	cmp	r2, #9
 80037f6:	d903      	bls.n	8003800 <_svfiprintf_r+0x1a8>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0c5      	beq.n	8003788 <_svfiprintf_r+0x130>
 80037fc:	9105      	str	r1, [sp, #20]
 80037fe:	e7c3      	b.n	8003788 <_svfiprintf_r+0x130>
 8003800:	fb0c 2101 	mla	r1, ip, r1, r2
 8003804:	4604      	mov	r4, r0
 8003806:	2301      	movs	r3, #1
 8003808:	e7f0      	b.n	80037ec <_svfiprintf_r+0x194>
 800380a:	ab03      	add	r3, sp, #12
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	462a      	mov	r2, r5
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <_svfiprintf_r+0x1f8>)
 8003812:	a904      	add	r1, sp, #16
 8003814:	4638      	mov	r0, r7
 8003816:	f3af 8000 	nop.w
 800381a:	1c42      	adds	r2, r0, #1
 800381c:	4606      	mov	r6, r0
 800381e:	d1d6      	bne.n	80037ce <_svfiprintf_r+0x176>
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	065b      	lsls	r3, r3, #25
 8003824:	f53f af2c 	bmi.w	8003680 <_svfiprintf_r+0x28>
 8003828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800382a:	b01d      	add	sp, #116	; 0x74
 800382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003830:	ab03      	add	r3, sp, #12
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	462a      	mov	r2, r5
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <_svfiprintf_r+0x1f8>)
 8003838:	a904      	add	r1, sp, #16
 800383a:	4638      	mov	r0, r7
 800383c:	f000 f87a 	bl	8003934 <_printf_i>
 8003840:	e7eb      	b.n	800381a <_svfiprintf_r+0x1c2>
 8003842:	bf00      	nop
 8003844:	08003fa1 	.word	0x08003fa1
 8003848:	08003fab 	.word	0x08003fab
 800384c:	00000000 	.word	0x00000000
 8003850:	080035a1 	.word	0x080035a1
 8003854:	08003fa7 	.word	0x08003fa7

08003858 <_printf_common>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	4616      	mov	r6, r2
 800385e:	4699      	mov	r9, r3
 8003860:	688a      	ldr	r2, [r1, #8]
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003868:	4293      	cmp	r3, r2
 800386a:	bfb8      	it	lt
 800386c:	4613      	movlt	r3, r2
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003874:	4607      	mov	r7, r0
 8003876:	460c      	mov	r4, r1
 8003878:	b10a      	cbz	r2, 800387e <_printf_common+0x26>
 800387a:	3301      	adds	r3, #1
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	0699      	lsls	r1, r3, #26
 8003882:	bf42      	ittt	mi
 8003884:	6833      	ldrmi	r3, [r6, #0]
 8003886:	3302      	addmi	r3, #2
 8003888:	6033      	strmi	r3, [r6, #0]
 800388a:	6825      	ldr	r5, [r4, #0]
 800388c:	f015 0506 	ands.w	r5, r5, #6
 8003890:	d106      	bne.n	80038a0 <_printf_common+0x48>
 8003892:	f104 0a19 	add.w	sl, r4, #25
 8003896:	68e3      	ldr	r3, [r4, #12]
 8003898:	6832      	ldr	r2, [r6, #0]
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	42ab      	cmp	r3, r5
 800389e:	dc26      	bgt.n	80038ee <_printf_common+0x96>
 80038a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038a4:	1e13      	subs	r3, r2, #0
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	bf18      	it	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	0692      	lsls	r2, r2, #26
 80038ae:	d42b      	bmi.n	8003908 <_printf_common+0xb0>
 80038b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b4:	4649      	mov	r1, r9
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	3001      	adds	r0, #1
 80038bc:	d01e      	beq.n	80038fc <_printf_common+0xa4>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	68e5      	ldr	r5, [r4, #12]
 80038c2:	6832      	ldr	r2, [r6, #0]
 80038c4:	f003 0306 	and.w	r3, r3, #6
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	bf08      	it	eq
 80038cc:	1aad      	subeq	r5, r5, r2
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	bf0c      	ite	eq
 80038d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d8:	2500      	movne	r5, #0
 80038da:	4293      	cmp	r3, r2
 80038dc:	bfc4      	itt	gt
 80038de:	1a9b      	subgt	r3, r3, r2
 80038e0:	18ed      	addgt	r5, r5, r3
 80038e2:	2600      	movs	r6, #0
 80038e4:	341a      	adds	r4, #26
 80038e6:	42b5      	cmp	r5, r6
 80038e8:	d11a      	bne.n	8003920 <_printf_common+0xc8>
 80038ea:	2000      	movs	r0, #0
 80038ec:	e008      	b.n	8003900 <_printf_common+0xa8>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4652      	mov	r2, sl
 80038f2:	4649      	mov	r1, r9
 80038f4:	4638      	mov	r0, r7
 80038f6:	47c0      	blx	r8
 80038f8:	3001      	adds	r0, #1
 80038fa:	d103      	bne.n	8003904 <_printf_common+0xac>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	3501      	adds	r5, #1
 8003906:	e7c6      	b.n	8003896 <_printf_common+0x3e>
 8003908:	18e1      	adds	r1, r4, r3
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	2030      	movs	r0, #48	; 0x30
 800390e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003912:	4422      	add	r2, r4
 8003914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800391c:	3302      	adds	r3, #2
 800391e:	e7c7      	b.n	80038b0 <_printf_common+0x58>
 8003920:	2301      	movs	r3, #1
 8003922:	4622      	mov	r2, r4
 8003924:	4649      	mov	r1, r9
 8003926:	4638      	mov	r0, r7
 8003928:	47c0      	blx	r8
 800392a:	3001      	adds	r0, #1
 800392c:	d0e6      	beq.n	80038fc <_printf_common+0xa4>
 800392e:	3601      	adds	r6, #1
 8003930:	e7d9      	b.n	80038e6 <_printf_common+0x8e>
	...

08003934 <_printf_i>:
 8003934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	7e0f      	ldrb	r7, [r1, #24]
 800393a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800393c:	2f78      	cmp	r7, #120	; 0x78
 800393e:	4691      	mov	r9, r2
 8003940:	4680      	mov	r8, r0
 8003942:	460c      	mov	r4, r1
 8003944:	469a      	mov	sl, r3
 8003946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800394a:	d807      	bhi.n	800395c <_printf_i+0x28>
 800394c:	2f62      	cmp	r7, #98	; 0x62
 800394e:	d80a      	bhi.n	8003966 <_printf_i+0x32>
 8003950:	2f00      	cmp	r7, #0
 8003952:	f000 80d8 	beq.w	8003b06 <_printf_i+0x1d2>
 8003956:	2f58      	cmp	r7, #88	; 0x58
 8003958:	f000 80a3 	beq.w	8003aa2 <_printf_i+0x16e>
 800395c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003964:	e03a      	b.n	80039dc <_printf_i+0xa8>
 8003966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800396a:	2b15      	cmp	r3, #21
 800396c:	d8f6      	bhi.n	800395c <_printf_i+0x28>
 800396e:	a101      	add	r1, pc, #4	; (adr r1, 8003974 <_printf_i+0x40>)
 8003970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039e1 	.word	0x080039e1
 800397c:	0800395d 	.word	0x0800395d
 8003980:	0800395d 	.word	0x0800395d
 8003984:	0800395d 	.word	0x0800395d
 8003988:	0800395d 	.word	0x0800395d
 800398c:	080039e1 	.word	0x080039e1
 8003990:	0800395d 	.word	0x0800395d
 8003994:	0800395d 	.word	0x0800395d
 8003998:	0800395d 	.word	0x0800395d
 800399c:	0800395d 	.word	0x0800395d
 80039a0:	08003aed 	.word	0x08003aed
 80039a4:	08003a11 	.word	0x08003a11
 80039a8:	08003acf 	.word	0x08003acf
 80039ac:	0800395d 	.word	0x0800395d
 80039b0:	0800395d 	.word	0x0800395d
 80039b4:	08003b0f 	.word	0x08003b0f
 80039b8:	0800395d 	.word	0x0800395d
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	0800395d 	.word	0x0800395d
 80039c4:	0800395d 	.word	0x0800395d
 80039c8:	08003ad7 	.word	0x08003ad7
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	602a      	str	r2, [r5, #0]
 80039d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039dc:	2301      	movs	r3, #1
 80039de:	e0a3      	b.n	8003b28 <_printf_i+0x1f4>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	6829      	ldr	r1, [r5, #0]
 80039e4:	0606      	lsls	r6, r0, #24
 80039e6:	f101 0304 	add.w	r3, r1, #4
 80039ea:	d50a      	bpl.n	8003a02 <_printf_i+0xce>
 80039ec:	680e      	ldr	r6, [r1, #0]
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	da03      	bge.n	80039fc <_printf_i+0xc8>
 80039f4:	232d      	movs	r3, #45	; 0x2d
 80039f6:	4276      	negs	r6, r6
 80039f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fc:	485e      	ldr	r0, [pc, #376]	; (8003b78 <_printf_i+0x244>)
 80039fe:	230a      	movs	r3, #10
 8003a00:	e019      	b.n	8003a36 <_printf_i+0x102>
 8003a02:	680e      	ldr	r6, [r1, #0]
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a0a:	bf18      	it	ne
 8003a0c:	b236      	sxthne	r6, r6
 8003a0e:	e7ef      	b.n	80039f0 <_printf_i+0xbc>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	1d19      	adds	r1, r3, #4
 8003a16:	6029      	str	r1, [r5, #0]
 8003a18:	0601      	lsls	r1, r0, #24
 8003a1a:	d501      	bpl.n	8003a20 <_printf_i+0xec>
 8003a1c:	681e      	ldr	r6, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <_printf_i+0xf2>
 8003a20:	0646      	lsls	r6, r0, #25
 8003a22:	d5fb      	bpl.n	8003a1c <_printf_i+0xe8>
 8003a24:	881e      	ldrh	r6, [r3, #0]
 8003a26:	4854      	ldr	r0, [pc, #336]	; (8003b78 <_printf_i+0x244>)
 8003a28:	2f6f      	cmp	r7, #111	; 0x6f
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2308      	moveq	r3, #8
 8003a2e:	230a      	movne	r3, #10
 8003a30:	2100      	movs	r1, #0
 8003a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a36:	6865      	ldr	r5, [r4, #4]
 8003a38:	60a5      	str	r5, [r4, #8]
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	bfa2      	ittt	ge
 8003a3e:	6821      	ldrge	r1, [r4, #0]
 8003a40:	f021 0104 	bicge.w	r1, r1, #4
 8003a44:	6021      	strge	r1, [r4, #0]
 8003a46:	b90e      	cbnz	r6, 8003a4c <_printf_i+0x118>
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	d04d      	beq.n	8003ae8 <_printf_i+0x1b4>
 8003a4c:	4615      	mov	r5, r2
 8003a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a52:	fb03 6711 	mls	r7, r3, r1, r6
 8003a56:	5dc7      	ldrb	r7, [r0, r7]
 8003a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a5c:	4637      	mov	r7, r6
 8003a5e:	42bb      	cmp	r3, r7
 8003a60:	460e      	mov	r6, r1
 8003a62:	d9f4      	bls.n	8003a4e <_printf_i+0x11a>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d10b      	bne.n	8003a80 <_printf_i+0x14c>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	07de      	lsls	r6, r3, #31
 8003a6c:	d508      	bpl.n	8003a80 <_printf_i+0x14c>
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	6861      	ldr	r1, [r4, #4]
 8003a72:	4299      	cmp	r1, r3
 8003a74:	bfde      	ittt	le
 8003a76:	2330      	movle	r3, #48	; 0x30
 8003a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a80:	1b52      	subs	r2, r2, r5
 8003a82:	6122      	str	r2, [r4, #16]
 8003a84:	f8cd a000 	str.w	sl, [sp]
 8003a88:	464b      	mov	r3, r9
 8003a8a:	aa03      	add	r2, sp, #12
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f7ff fee2 	bl	8003858 <_printf_common>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d14c      	bne.n	8003b32 <_printf_i+0x1fe>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	b004      	add	sp, #16
 8003a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa2:	4835      	ldr	r0, [pc, #212]	; (8003b78 <_printf_i+0x244>)
 8003aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aa8:	6829      	ldr	r1, [r5, #0]
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ab0:	6029      	str	r1, [r5, #0]
 8003ab2:	061d      	lsls	r5, r3, #24
 8003ab4:	d514      	bpl.n	8003ae0 <_printf_i+0x1ac>
 8003ab6:	07df      	lsls	r7, r3, #31
 8003ab8:	bf44      	itt	mi
 8003aba:	f043 0320 	orrmi.w	r3, r3, #32
 8003abe:	6023      	strmi	r3, [r4, #0]
 8003ac0:	b91e      	cbnz	r6, 8003aca <_printf_i+0x196>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f023 0320 	bic.w	r3, r3, #32
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	2310      	movs	r3, #16
 8003acc:	e7b0      	b.n	8003a30 <_printf_i+0xfc>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	f043 0320 	orr.w	r3, r3, #32
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	2378      	movs	r3, #120	; 0x78
 8003ad8:	4828      	ldr	r0, [pc, #160]	; (8003b7c <_printf_i+0x248>)
 8003ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ade:	e7e3      	b.n	8003aa8 <_printf_i+0x174>
 8003ae0:	0659      	lsls	r1, r3, #25
 8003ae2:	bf48      	it	mi
 8003ae4:	b2b6      	uxthmi	r6, r6
 8003ae6:	e7e6      	b.n	8003ab6 <_printf_i+0x182>
 8003ae8:	4615      	mov	r5, r2
 8003aea:	e7bb      	b.n	8003a64 <_printf_i+0x130>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	6826      	ldr	r6, [r4, #0]
 8003af0:	6961      	ldr	r1, [r4, #20]
 8003af2:	1d18      	adds	r0, r3, #4
 8003af4:	6028      	str	r0, [r5, #0]
 8003af6:	0635      	lsls	r5, r6, #24
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0x1cc>
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0x1d2>
 8003b00:	0670      	lsls	r0, r6, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0x1c8>
 8003b04:	8019      	strh	r1, [r3, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	4615      	mov	r5, r2
 8003b0c:	e7ba      	b.n	8003a84 <_printf_i+0x150>
 8003b0e:	682b      	ldr	r3, [r5, #0]
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	681d      	ldr	r5, [r3, #0]
 8003b16:	6862      	ldr	r2, [r4, #4]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f7fc fb60 	bl	80001e0 <memchr>
 8003b20:	b108      	cbz	r0, 8003b26 <_printf_i+0x1f2>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	6060      	str	r0, [r4, #4]
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	6123      	str	r3, [r4, #16]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b30:	e7a8      	b.n	8003a84 <_printf_i+0x150>
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	462a      	mov	r2, r5
 8003b36:	4649      	mov	r1, r9
 8003b38:	4640      	mov	r0, r8
 8003b3a:	47d0      	blx	sl
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d0ab      	beq.n	8003a98 <_printf_i+0x164>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	079b      	lsls	r3, r3, #30
 8003b44:	d413      	bmi.n	8003b6e <_printf_i+0x23a>
 8003b46:	68e0      	ldr	r0, [r4, #12]
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	bfb8      	it	lt
 8003b4e:	4618      	movlt	r0, r3
 8003b50:	e7a4      	b.n	8003a9c <_printf_i+0x168>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4632      	mov	r2, r6
 8003b56:	4649      	mov	r1, r9
 8003b58:	4640      	mov	r0, r8
 8003b5a:	47d0      	blx	sl
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d09b      	beq.n	8003a98 <_printf_i+0x164>
 8003b60:	3501      	adds	r5, #1
 8003b62:	68e3      	ldr	r3, [r4, #12]
 8003b64:	9903      	ldr	r1, [sp, #12]
 8003b66:	1a5b      	subs	r3, r3, r1
 8003b68:	42ab      	cmp	r3, r5
 8003b6a:	dcf2      	bgt.n	8003b52 <_printf_i+0x21e>
 8003b6c:	e7eb      	b.n	8003b46 <_printf_i+0x212>
 8003b6e:	2500      	movs	r5, #0
 8003b70:	f104 0619 	add.w	r6, r4, #25
 8003b74:	e7f5      	b.n	8003b62 <_printf_i+0x22e>
 8003b76:	bf00      	nop
 8003b78:	08003fb2 	.word	0x08003fb2
 8003b7c:	08003fc3 	.word	0x08003fc3

08003b80 <memcpy>:
 8003b80:	440a      	add	r2, r1
 8003b82:	4291      	cmp	r1, r2
 8003b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b88:	d100      	bne.n	8003b8c <memcpy+0xc>
 8003b8a:	4770      	bx	lr
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b96:	4291      	cmp	r1, r2
 8003b98:	d1f9      	bne.n	8003b8e <memcpy+0xe>
 8003b9a:	bd10      	pop	{r4, pc}

08003b9c <memmove>:
 8003b9c:	4288      	cmp	r0, r1
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	eb01 0402 	add.w	r4, r1, r2
 8003ba4:	d902      	bls.n	8003bac <memmove+0x10>
 8003ba6:	4284      	cmp	r4, r0
 8003ba8:	4623      	mov	r3, r4
 8003baa:	d807      	bhi.n	8003bbc <memmove+0x20>
 8003bac:	1e43      	subs	r3, r0, #1
 8003bae:	42a1      	cmp	r1, r4
 8003bb0:	d008      	beq.n	8003bc4 <memmove+0x28>
 8003bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bba:	e7f8      	b.n	8003bae <memmove+0x12>
 8003bbc:	4402      	add	r2, r0
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	d100      	bne.n	8003bc6 <memmove+0x2a>
 8003bc4:	bd10      	pop	{r4, pc}
 8003bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bce:	e7f7      	b.n	8003bc0 <memmove+0x24>

08003bd0 <_free_r>:
 8003bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	d044      	beq.n	8003c60 <_free_r+0x90>
 8003bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bda:	9001      	str	r0, [sp, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f1a1 0404 	sub.w	r4, r1, #4
 8003be2:	bfb8      	it	lt
 8003be4:	18e4      	addlt	r4, r4, r3
 8003be6:	f000 f913 	bl	8003e10 <__malloc_lock>
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <_free_r+0x94>)
 8003bec:	9801      	ldr	r0, [sp, #4]
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	b933      	cbnz	r3, 8003c00 <_free_r+0x30>
 8003bf2:	6063      	str	r3, [r4, #4]
 8003bf4:	6014      	str	r4, [r2, #0]
 8003bf6:	b003      	add	sp, #12
 8003bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bfc:	f000 b90e 	b.w	8003e1c <__malloc_unlock>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d908      	bls.n	8003c16 <_free_r+0x46>
 8003c04:	6825      	ldr	r5, [r4, #0]
 8003c06:	1961      	adds	r1, r4, r5
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf01      	itttt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	1949      	addeq	r1, r1, r5
 8003c12:	6021      	streq	r1, [r4, #0]
 8003c14:	e7ed      	b.n	8003bf2 <_free_r+0x22>
 8003c16:	461a      	mov	r2, r3
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	b10b      	cbz	r3, 8003c20 <_free_r+0x50>
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d9fa      	bls.n	8003c16 <_free_r+0x46>
 8003c20:	6811      	ldr	r1, [r2, #0]
 8003c22:	1855      	adds	r5, r2, r1
 8003c24:	42a5      	cmp	r5, r4
 8003c26:	d10b      	bne.n	8003c40 <_free_r+0x70>
 8003c28:	6824      	ldr	r4, [r4, #0]
 8003c2a:	4421      	add	r1, r4
 8003c2c:	1854      	adds	r4, r2, r1
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	6011      	str	r1, [r2, #0]
 8003c32:	d1e0      	bne.n	8003bf6 <_free_r+0x26>
 8003c34:	681c      	ldr	r4, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6053      	str	r3, [r2, #4]
 8003c3a:	4421      	add	r1, r4
 8003c3c:	6011      	str	r1, [r2, #0]
 8003c3e:	e7da      	b.n	8003bf6 <_free_r+0x26>
 8003c40:	d902      	bls.n	8003c48 <_free_r+0x78>
 8003c42:	230c      	movs	r3, #12
 8003c44:	6003      	str	r3, [r0, #0]
 8003c46:	e7d6      	b.n	8003bf6 <_free_r+0x26>
 8003c48:	6825      	ldr	r5, [r4, #0]
 8003c4a:	1961      	adds	r1, r4, r5
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	bf04      	itt	eq
 8003c50:	6819      	ldreq	r1, [r3, #0]
 8003c52:	685b      	ldreq	r3, [r3, #4]
 8003c54:	6063      	str	r3, [r4, #4]
 8003c56:	bf04      	itt	eq
 8003c58:	1949      	addeq	r1, r1, r5
 8003c5a:	6021      	streq	r1, [r4, #0]
 8003c5c:	6054      	str	r4, [r2, #4]
 8003c5e:	e7ca      	b.n	8003bf6 <_free_r+0x26>
 8003c60:	b003      	add	sp, #12
 8003c62:	bd30      	pop	{r4, r5, pc}
 8003c64:	2000012c 	.word	0x2000012c

08003c68 <sbrk_aligned>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4e0e      	ldr	r6, [pc, #56]	; (8003ca4 <sbrk_aligned+0x3c>)
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	6831      	ldr	r1, [r6, #0]
 8003c70:	4605      	mov	r5, r0
 8003c72:	b911      	cbnz	r1, 8003c7a <sbrk_aligned+0x12>
 8003c74:	f000 f8bc 	bl	8003df0 <_sbrk_r>
 8003c78:	6030      	str	r0, [r6, #0]
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f000 f8b7 	bl	8003df0 <_sbrk_r>
 8003c82:	1c43      	adds	r3, r0, #1
 8003c84:	d00a      	beq.n	8003c9c <sbrk_aligned+0x34>
 8003c86:	1cc4      	adds	r4, r0, #3
 8003c88:	f024 0403 	bic.w	r4, r4, #3
 8003c8c:	42a0      	cmp	r0, r4
 8003c8e:	d007      	beq.n	8003ca0 <sbrk_aligned+0x38>
 8003c90:	1a21      	subs	r1, r4, r0
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 f8ac 	bl	8003df0 <_sbrk_r>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d101      	bne.n	8003ca0 <sbrk_aligned+0x38>
 8003c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	20000130 	.word	0x20000130

08003ca8 <_malloc_r>:
 8003ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cac:	1ccd      	adds	r5, r1, #3
 8003cae:	f025 0503 	bic.w	r5, r5, #3
 8003cb2:	3508      	adds	r5, #8
 8003cb4:	2d0c      	cmp	r5, #12
 8003cb6:	bf38      	it	cc
 8003cb8:	250c      	movcc	r5, #12
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	db01      	blt.n	8003cc4 <_malloc_r+0x1c>
 8003cc0:	42a9      	cmp	r1, r5
 8003cc2:	d905      	bls.n	8003cd0 <_malloc_r+0x28>
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	2600      	movs	r6, #0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cd0:	4e2e      	ldr	r6, [pc, #184]	; (8003d8c <_malloc_r+0xe4>)
 8003cd2:	f000 f89d 	bl	8003e10 <__malloc_lock>
 8003cd6:	6833      	ldr	r3, [r6, #0]
 8003cd8:	461c      	mov	r4, r3
 8003cda:	bb34      	cbnz	r4, 8003d2a <_malloc_r+0x82>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f7ff ffc2 	bl	8003c68 <sbrk_aligned>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	d14d      	bne.n	8003d86 <_malloc_r+0xde>
 8003cea:	6834      	ldr	r4, [r6, #0]
 8003cec:	4626      	mov	r6, r4
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	d140      	bne.n	8003d74 <_malloc_r+0xcc>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	eb04 0803 	add.w	r8, r4, r3
 8003cfc:	f000 f878 	bl	8003df0 <_sbrk_r>
 8003d00:	4580      	cmp	r8, r0
 8003d02:	d13a      	bne.n	8003d7a <_malloc_r+0xd2>
 8003d04:	6821      	ldr	r1, [r4, #0]
 8003d06:	3503      	adds	r5, #3
 8003d08:	1a6d      	subs	r5, r5, r1
 8003d0a:	f025 0503 	bic.w	r5, r5, #3
 8003d0e:	3508      	adds	r5, #8
 8003d10:	2d0c      	cmp	r5, #12
 8003d12:	bf38      	it	cc
 8003d14:	250c      	movcc	r5, #12
 8003d16:	4629      	mov	r1, r5
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f7ff ffa5 	bl	8003c68 <sbrk_aligned>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d02b      	beq.n	8003d7a <_malloc_r+0xd2>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	442b      	add	r3, r5
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	e00e      	b.n	8003d48 <_malloc_r+0xa0>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	1b52      	subs	r2, r2, r5
 8003d2e:	d41e      	bmi.n	8003d6e <_malloc_r+0xc6>
 8003d30:	2a0b      	cmp	r2, #11
 8003d32:	d916      	bls.n	8003d62 <_malloc_r+0xba>
 8003d34:	1961      	adds	r1, r4, r5
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	6025      	str	r5, [r4, #0]
 8003d3a:	bf18      	it	ne
 8003d3c:	6059      	strne	r1, [r3, #4]
 8003d3e:	6863      	ldr	r3, [r4, #4]
 8003d40:	bf08      	it	eq
 8003d42:	6031      	streq	r1, [r6, #0]
 8003d44:	5162      	str	r2, [r4, r5]
 8003d46:	604b      	str	r3, [r1, #4]
 8003d48:	4638      	mov	r0, r7
 8003d4a:	f104 060b 	add.w	r6, r4, #11
 8003d4e:	f000 f865 	bl	8003e1c <__malloc_unlock>
 8003d52:	f026 0607 	bic.w	r6, r6, #7
 8003d56:	1d23      	adds	r3, r4, #4
 8003d58:	1af2      	subs	r2, r6, r3
 8003d5a:	d0b6      	beq.n	8003cca <_malloc_r+0x22>
 8003d5c:	1b9b      	subs	r3, r3, r6
 8003d5e:	50a3      	str	r3, [r4, r2]
 8003d60:	e7b3      	b.n	8003cca <_malloc_r+0x22>
 8003d62:	6862      	ldr	r2, [r4, #4]
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	bf0c      	ite	eq
 8003d68:	6032      	streq	r2, [r6, #0]
 8003d6a:	605a      	strne	r2, [r3, #4]
 8003d6c:	e7ec      	b.n	8003d48 <_malloc_r+0xa0>
 8003d6e:	4623      	mov	r3, r4
 8003d70:	6864      	ldr	r4, [r4, #4]
 8003d72:	e7b2      	b.n	8003cda <_malloc_r+0x32>
 8003d74:	4634      	mov	r4, r6
 8003d76:	6876      	ldr	r6, [r6, #4]
 8003d78:	e7b9      	b.n	8003cee <_malloc_r+0x46>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f000 f84c 	bl	8003e1c <__malloc_unlock>
 8003d84:	e7a1      	b.n	8003cca <_malloc_r+0x22>
 8003d86:	6025      	str	r5, [r4, #0]
 8003d88:	e7de      	b.n	8003d48 <_malloc_r+0xa0>
 8003d8a:	bf00      	nop
 8003d8c:	2000012c 	.word	0x2000012c

08003d90 <_realloc_r>:
 8003d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d94:	4680      	mov	r8, r0
 8003d96:	4614      	mov	r4, r2
 8003d98:	460e      	mov	r6, r1
 8003d9a:	b921      	cbnz	r1, 8003da6 <_realloc_r+0x16>
 8003d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003da0:	4611      	mov	r1, r2
 8003da2:	f7ff bf81 	b.w	8003ca8 <_malloc_r>
 8003da6:	b92a      	cbnz	r2, 8003db4 <_realloc_r+0x24>
 8003da8:	f7ff ff12 	bl	8003bd0 <_free_r>
 8003dac:	4625      	mov	r5, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db4:	f000 f838 	bl	8003e28 <_malloc_usable_size_r>
 8003db8:	4284      	cmp	r4, r0
 8003dba:	4607      	mov	r7, r0
 8003dbc:	d802      	bhi.n	8003dc4 <_realloc_r+0x34>
 8003dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dc2:	d812      	bhi.n	8003dea <_realloc_r+0x5a>
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f7ff ff6e 	bl	8003ca8 <_malloc_r>
 8003dcc:	4605      	mov	r5, r0
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d0ed      	beq.n	8003dae <_realloc_r+0x1e>
 8003dd2:	42bc      	cmp	r4, r7
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	bf28      	it	cs
 8003dda:	463a      	movcs	r2, r7
 8003ddc:	f7ff fed0 	bl	8003b80 <memcpy>
 8003de0:	4631      	mov	r1, r6
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7ff fef4 	bl	8003bd0 <_free_r>
 8003de8:	e7e1      	b.n	8003dae <_realloc_r+0x1e>
 8003dea:	4635      	mov	r5, r6
 8003dec:	e7df      	b.n	8003dae <_realloc_r+0x1e>
	...

08003df0 <_sbrk_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d06      	ldr	r5, [pc, #24]	; (8003e0c <_sbrk_r+0x1c>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	f7fd fc34 	bl	8001668 <_sbrk>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_sbrk_r+0x1a>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_sbrk_r+0x1a>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	20000134 	.word	0x20000134

08003e10 <__malloc_lock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__malloc_lock+0x8>)
 8003e12:	f000 b811 	b.w	8003e38 <__retarget_lock_acquire_recursive>
 8003e16:	bf00      	nop
 8003e18:	20000138 	.word	0x20000138

08003e1c <__malloc_unlock>:
 8003e1c:	4801      	ldr	r0, [pc, #4]	; (8003e24 <__malloc_unlock+0x8>)
 8003e1e:	f000 b80c 	b.w	8003e3a <__retarget_lock_release_recursive>
 8003e22:	bf00      	nop
 8003e24:	20000138 	.word	0x20000138

08003e28 <_malloc_usable_size_r>:
 8003e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e2c:	1f18      	subs	r0, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bfbc      	itt	lt
 8003e32:	580b      	ldrlt	r3, [r1, r0]
 8003e34:	18c0      	addlt	r0, r0, r3
 8003e36:	4770      	bx	lr

08003e38 <__retarget_lock_acquire_recursive>:
 8003e38:	4770      	bx	lr

08003e3a <__retarget_lock_release_recursive>:
 8003e3a:	4770      	bx	lr

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
